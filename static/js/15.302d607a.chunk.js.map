{"version":3,"sources":["components/Slide/index.tsx","components/SubTitle.tsx","views/Collateral/components/AddGuaranteeFromWallet.tsx","views/Collateral/components/AddCurrencyToAvatar.tsx","views/Collateral/components/BeforeMintAction.tsx","views/Collateral/components/WithdrawCollateral.tsx","views/Mint/components/NeutralizeComp.tsx","hooks/usePosContract.ts","views/Collateral/components/AddGuaranteeFromAvatar.tsx","views/Collateral/components/ImproveGuaranteeDays.tsx","views/Collateral/components/ImproveCollateralRatio.tsx","views/Collateral/components/TradingThroughAvatar.tsx","views/Collateral/components/GeneralTransfer.tsx","views/Collateral/components/manage.tsx","views/Collateral/ManagerPage.tsx","components/Logo.tsx","hooks/usePanel.ts","components/DataWrapper/index.tsx","components/Methods/index.tsx","hooks/useApprove.ts","config/constants/thresholdValue.ts","views/Collateral/components/Title.tsx"],"names":["PrettoSlider","styled","Slider","props","color","height","width","background","opacity","border","bottom","value","boxShadow","transform","position","left","zIndex","borderRadius","lineHeight","fontSize","padding","backgroundColor","transformOrigin","display","CustomizedSlider","_jsx","valueLabelDisplay","orientation","defaultValue","disabled","Content","_templateObject","_taggedTemplateLiteral","SubTitle","children","AddGuaranteeFromWallet","walletTokenBalance","approveStatus","onApprove","transferVal","setTransferVal","useState","isDisabled","setDisabled","toastSuccess","toastError","toastInfo","useToast","approveBtnStatus","setApproveBtnStatus","currentPosition","collateralIndex","usePositionInfo","onUpdatePrepaidInterest","newDisplayCollateralRatio","newDisplayPrepaidInterestCoverage","useComputedIndexAction","handleUpdatePosition","onAddPrepaidInterest","usePositionAction","changeTransferVal","useCallback","e","type","numberVal","Number","target","mintTokenInfo","settlementCurrency","symbol","_transferAmount","toSmallUnits","TokenUtils","formatTokenAmount","decimals","isZero","onSubmit","async","ToastTitle","failed","txInfo","submited","TransactionSubmittedInfo","content","txHash","hash","wait","success","TransactionSuccessInfo","_jsxs","_Fragment","Methods","SelectIcon","Wallet","options","token","balance","icon","Logo","imgprops","style","marginRight","logo","address","rightOptionList","prepaidInterest","rightBalance","leftBalance","rightSymbol","selectedSymbol","RightIcon","src","Assets","PrepaidInterest","alt","leftInputValue","rightInputValue","selectInput","onMax","DataWrapper","data","DataIndexName","CollateralRatio","displayRatio","PrepaidInterestCoverage","displayCoverage","Approve","onClick","state","AddCurrencyToAvatar","account","chainId","submitStatus","setSubmitStatus","currentPositionTokenInfo","onUpdateCollateralValue","transfer","useTransfer","tradingList","useMemo","allowedTokens","Array","from","Object","values","tokens","map","item","toLargeUnits","balances","selectIndex","setSelectIndex","leftSelectedToken","length","onTransfer","console","log","commonTokens","tx","chainConfigs","positionAddress","transactionHash","reason","rightOptions","leftSelectValue","_ref","_transferVal","leftChange","selected","_index","findIndex","AvatarIcon","TipWrap","IconWrap","BeforeMintAction","useHashPowerToken","expanded","handleChange","usePanel","active","useWeb3React","Wrapper","Title","Accordion","id","onChange","AccordionSummary","Typography","AccordionDetails","ActionUser","contracts","ActionUserInterface","utils","Interface","abi","WidrawFromPrepaidInterestToWallet","actionDisable","setActionDisable","trading","setTrading","transferAmount","setTransferAmount","signer","useSystemParams","newPrepaidInterestCoverage","newCollateralRatio","minCollateralValue","onGuaranteeCurrencyToWallet","encodeFunctionData","toString","positionContract","ethers","Contract","PositionABI","delegateCall","useEffect","val","concat","isNaN","pimin","positionStatus","estimatedDailyDebt","toNumber","pi","formatFourDecimals","GuaranteeIcon","rightSelectedValue","selectValue","selectedBalance","WidrawFromCollateralToWallet","tokenPools","setLeftSelectedToken","SupportedTokens","WBTC","rightSelectedToken","setRightSelectedToken","transferAmountVal","withdrawAssetParams","keys","current","activeToken","find","it","rightSelectValue","unitPrice","getSwapQuote","minCollateralValueTokenPrice","WithdrawCollateral","SelectGroup","Tip","_templateObject2","Func","_templateObject3","NeutralizeButton","Button","_templateObject4","SelectTypeWrap","_templateObject5","TipInfo","_templateObject6","RED","NeutralizeType","fbtc20mint","NeutralizeComp","setRefresh","setApproveStatus","disabledAction","setDisabledAction","neutralizeAmount","setNeutralizeAmount","posContract","contract","setContract","currentCpt","useAppSelector","collateralManage","currentCPT","_contract","getContract","usePosContract","neutralizeType","setNeutralizeType","currentMintToken","onUpdateNeutralizeValue","newNeutralizeFee","newEstimatedDailyDebt","handleApprove","useApprove","onCheckApprove","useCheckApprove","info","message","settlementCurrencyValues","checkApprove","isEnable","_hex","onChangeNeutralizeAmount","_decimals","formattedValue","actionVal","debt","isValueWithinBounds","isWalletValueValid","isCollateralValueValid","isValueValid","transferValue","isFinalValueValid","onNeutralize","Select","groupStyle","actionValue","isGroup","dir","ButtonBase","Math","min","className","onKeyUp","tabIndex","role","WalletIcon","Avatar","cellSpacing","cellPadding","colSpan","viewBox","fill","xmlns","d","fillRule","clipRule","AddGuaranteeFromAvatar","_currentPositionToken3","_currentPositionToken","_currentPositionToken2","error","CustomizedAccordions","ImproveCollateralRatio","NetralizeComp","AddBtn","ActionMulticall","ActionMulticallInterface","TradingThrough","columns","setColumns","isSubmitStatus","setIsSubmit","onUpdateTotalCollateralValue","tokenList","tokenPrice","list","filter","addMethods","uuid","input","output","inputToken","outputToken","includes","initColumns","_params","inputAmount","String","outputAmount","tokenAddressPath","findPath","to","dataMulti","transaction","FlexWrap","flexDirection","wordBreak","onChangeInputAmount","MAX_SAFE_INTEGER","res","actionValSum","reduce","acc","curr","next","prototype","hasOwnProperty","call","indexOf","slice","onChangeToken","onExchange","record","index","i","push","poolPath","fromDecimals","toDecimals","inputValue","outputValue","total","forEach","price","DragDropContext","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","items","destItems","removed","splice","copiedItems","Droppable","provided","droppableProps","ref","innerRef","Draggable","draggableId","isDragDisabled","provideds","amountOut","unitAmountOut","priceStr","draggableProps","dragHandleProps","alignItems","userSelect","margin","paddingRight","isExchange","leftDisableStatus","rightDisableStatus","rightChange","leftSymbol","right","IconButton","cursor","marginTop","marginLeft","DeleteIcon","DroppableIcon","placeholder","AddIcon","POSITIVE_INFINITY","MethodsWrap","AccountType","accountCategoryList","MyWallet","Settlement","Standard","getTokenDecimals","key","valueToKeyMap","GeneralTransfer","gDisStatus","setGDisStatus","actionData","setActionData","accountType","tokenType","tokenSelectDisabled","avatarAssetList","onChangeVal","isTransfer","transferTransactions","transferData","recviceTarget","tokenSymbol","transferDecimals","tokenAddress","handleAllSettled","results","_result$reason","_result$reason2","status","submitTransaction","_data","handleResult","_ref2","handleError","Promise","allSettled","then","catch","send","recive","onChangeAccount","__index","nextState","settlement","shortBalanceValue","collateralValue","tokenTypeDecimals","collateralAssets","maxActionTotalAssets","maxCollateralTransfer","amountOutPrice","otherTokenWbtc","sub","actionCurrentMaxValue","amountInCurrentMaxValue","maxTransterCurrentToken","floor","maxPrepaidInterest","maxActionPrepaidInterest","transferAmout","interestGuaranteed","gt","avatarAssetBalance","walletAssetBalance","selectDisabled","Input","event","cleanedValue","replace","_parts$","parts","split","join","hidden","justifyContent","ExchangeArrow","list1","list2","reverse","ele","Box","CardWrap","Card","TipPanel","CollateralInfoWrap","getValueColor","withRouter","oBox","React","useRef","handleChangeCurrentPosition","toastWarning","callback","approveTransactionInfo","err","collateralRatio","Infinite","NEGATIVE_INFINITY","prepaidInterestCoverage","obligation","epochDebt","estimatedObligationToday","setTimeout","panel","document","querySelector","scrollIntoView","allowedAssets","currentTokenPrice","currentAllowedTokens","currentAllowedTokenBalance","usdt","WBTCToUSD","tokenInfo","_currentTokenPrice$to","formatCurrencyTwoDecimals","mintTokens","isSupportedChainId","_tokens","mintTokenChainConfigs","marginBottom","Grid","container","spacing","xs","ScrollWrapper","title","LiquidationThresholdValue","ratio","Slide","days","ImproveGuaranteeDays","TradingThroughAvatar","Collateral","CopyToClipboard","toCopy","Fbtc20Icon","CollateralManage","Link","ArrowLine","ManagerPage","Manage","_props$imgprops","dispatch","useAppDispatch","newExpanded","toggleStatus","setExpanded","SelectWrap","GroupWrap","Index","rightSelectInput","rightNumberIsShow","leftDesc","rightDesc","currentSelected","setVal","rightList","setRightList","rightVal","setRightVal","displayValues","_rightBalance","_leftBalance","orignalBalance","allDisabled","inputDisabled","RoundArrow","spender","ERC20","allowance","owner","library","getSigner","approve","constants","MaxUint256","ShortThresholdValue"],"mappings":"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","file":"static/js/15.302d607a.chunk.js","sourcesContent":["import * as React from 'react'\nimport Slider from '@mui/material/Slider'\nimport { styled } from '@mui/material/styles'\n\nconst PrettoSlider = styled(Slider)((props) => {\n  return () => ({\n    color: '#52af77',\n    height: 320,\n    width: 6,\n    '& .MuiSlider-rail': {\n      background: 'linear-gradient(180deg, #1DCADA, #FFCC04 40%, #FF6308)',\n      opacity: '1',\n    },\n    '& .MuiSlider-track': {\n      border: 'none',\n      background: 'transparent',\n      // background:'linear-gradient(90deg, #FF4D00 0%, #FF730D 31.52%, #FFBD12 44.08%, #FFD900 97.25%)',\n    },\n    '& .MuiSlider-thumb': {\n      // eslint-disable-next-line no-nested-ternary\n      bottom: props.value === 0 ? '2px !important' : props.value > 100 ? 'calc(100% - 2px) !important' : '',\n      height: 6,\n      width: 6,\n      boxShadow: '0px 8px 10px rgba(0, 0, 0, 0.25)',\n      background: '#fff',\n      transform: 'translate(-24px,50%)',\n      // background:'linear-gradient(90deg, #FF4D00 0%, #FF730D 31.52%, #FFBD12 44.08%, #FFD900 97.25%)',\n      border: '2px solid #000',\n      '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n        boxShadow: 'inherit',\n      },\n      '&:before': {\n        position: 'absolute',\n        left: 2,\n        zIndex: -1,\n        width: 20,\n        height: 2,\n        background: '#000',\n        borderRadius: 1,\n      },\n    },\n    '& .MuiSlider-valueLabel': {\n      lineHeight: 1.2,\n      fontSize: 12,\n      background: 'unset',\n      padding: 0,\n      width: 32,\n      height: 32,\n      borderRadius: '50% 50% 50% 0',\n      backgroundColor: '#52af77',\n      transformOrigin: 'left',\n      transform: 'translate(50%, -100%) rotate(-90deg) scale(0)',\n      '&:before': { display: 'none' },\n      '&.MuiSlider-valueLabelOpen': {\n        display: 'none',\n        transform: 'translate(50%, -100%) rotate(-90deg) scale(1)',\n      },\n      '& > *': {\n        transform: 'rotate(45deg)',\n      },\n    },\n  })\n})\n\nexport default function CustomizedSlider(props) {\n  return (\n    <PrettoSlider\n      valueLabelDisplay=\"auto\"\n      aria-label=\"pretto slider\"\n      orientation=\"vertical\"\n      defaultValue={90}\n      disabled\n      {...props}\n    />\n  )\n}\n","import React from 'react'\nimport { styled } from '@mui/material/styles'\n\nconst Content = styled('p')`\n  font-family: 'Heebo Regular', serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 21px;\n  color: rgba(0, 0, 0, 0.5);\n`\nfunction SubTitle(props) {\n  const { children } = props\n  return <Content {...props}>{children}</Content>\n}\n\nexport default SubTitle\n","import React, { useCallback, useState } from 'react'\nimport Methods from 'components/Methods'\nimport { Approve } from 'components/CommonComponent'\nimport tokens, { poolData } from 'config/constants/tokens'\nimport useToast from 'hooks/useToast'\nimport Assets from 'assets'\nimport Wallet from 'components/Menu/icons/Wallet'\nimport DataWrapper from 'components/DataWrapper'\nimport { TokenUtils, toSmallUnits } from 'utils/transformHelper'\nimport { useComputedIndexAction, usePositionInfo, usePositionAction } from 'hooks/news/usePoistion'\nimport { TransactionSubmittedInfo, TransactionSuccessInfo } from 'components/TransactionInfo'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport Logo from 'components/Logo'\n\nfunction AddGuaranteeFromWallet(props) {\n  const { walletTokenBalance, approveStatus, onApprove } = props\n  const [transferVal, setTransferVal] = useState<number>(0)\n  const [isDisabled, setDisabled] = useState(false)\n  const { toastSuccess, toastError, toastInfo } = useToast()\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n\n  const { currentPosition, collateralIndex } = usePositionInfo()\n  const { onUpdatePrepaidInterest, newDisplayCollateralRatio, newDisplayPrepaidInterestCoverage } =\n    useComputedIndexAction()\n  const { handleUpdatePosition, onAddPrepaidInterest } = usePositionAction()\n\n  const changeTransferVal = useCallback(\n    (e, type) => {\n      const numberVal = type === 0 ? Number(e.target.value) : walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]\n      const _transferAmount = toSmallUnits(\n        TokenUtils.formatTokenAmount(numberVal, currentPosition.mintTokenInfo.settlementCurrency.decimals),\n        currentPosition.mintTokenInfo.settlementCurrency.decimals,\n      )\n      if (numberVal > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol] || numberVal <= 0 || _transferAmount.isZero()) {\n        setDisabled(true)\n      } else {\n        setDisabled(false)\n      }\n      onUpdatePrepaidInterest(numberVal)\n      setTransferVal(type === 0 ? e.target.value : numberVal)\n    },\n    [currentPosition.mintTokenInfo.settlementCurrency.decimals, currentPosition.mintTokenInfo.settlementCurrency.symbol, onUpdatePrepaidInterest, walletTokenBalance],\n  )\n\n  const onSubmit = useCallback(async () => {\n    try {\n      if (!transferVal || (transferVal <= 0 && transferVal > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol])) {\n        toastError(ToastTitle.failed, 'Please enter a valid amount')\n        return\n      }\n      setDisabled(true)\n      const txInfo = await onAddPrepaidInterest(transferVal)\n      toastInfo(\n        ToastTitle.submited,\n        <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n      )\n      const result = await txInfo.wait()\n      if (result) {\n        toastSuccess(\n          ToastTitle.success,\n          <TransactionSuccessInfo content=\"Settlement added successfully\" txHash={txInfo.hash} />,\n        )\n        setDisabled(false)\n        setTransferVal(0)\n        onUpdatePrepaidInterest(0)\n        await handleUpdatePosition()\n      }\n    } catch (e: any) {\n      setDisabled(false)\n    }\n  }, [transferVal, walletTokenBalance, currentPosition.mintTokenInfo.settlementCurrency.symbol, onAddPrepaidInterest, toastInfo, toastError, toastSuccess, onUpdatePrepaidInterest, handleUpdatePosition])\n\n  return (\n    <>\n      <Methods\n        SelectIcon={Wallet}\n        options={[\n          {\n            token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            balance: walletTokenBalance ? walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol] : 0,\n            symbol: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            icon: ()=> <Logo imgprops={{\n              style: {marginRight: 10}\n            }} token={currentPosition.mintTokenInfo.settlementCurrency.logo} symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol} />,\n            address:  currentPosition.mintTokenInfo.settlementCurrency.address,\n            rightOptionList: [\n              {\n                token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n                symbol: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n                icon: () => <Logo imgprops={{\n                  style: {marginRight: 10}\n                }} token={currentPosition.mintTokenInfo.settlementCurrency.logo} symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol} />,\n                address:  currentPosition.mintTokenInfo.settlementCurrency.address,\n                balance: collateralIndex.prepaidInterest,\n              },\n            ],\n          },\n        ]}\n        rightBalance={collateralIndex.prepaidInterest}\n        leftBalance={walletTokenBalance ? walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol] : 0}\n        rightSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        selectedSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        RightIcon={() => <img src={Assets.PrepaidInterest} style={{ width: 20 }} alt=\"\" />}\n        leftInputValue={transferVal}\n        rightInputValue={transferVal}\n        selectInput={(e) => {\n          changeTransferVal(e, 0)\n        }}\n        onMax={() => {\n          changeTransferVal({}, 1)\n        }}\n      />\n      <DataWrapper\n        data={[\n          [DataIndexName.CollateralRatio, collateralIndex.displayRatio, newDisplayCollateralRatio],\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={isDisabled || transferVal <= 0} onClick={onSubmit}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nexport default AddGuaranteeFromWallet\n","import React, { useCallback, useMemo, useState } from 'react'\nimport tokens from 'config/constants/tokens'\nimport Methods from 'components/Methods'\nimport Wallet from 'components/Menu/icons/Wallet'\nimport { AvatarIcon } from 'components/uikit'\nimport { Approve, IconWrap, TipWrap } from 'components/CommonComponent'\nimport { useTransfer } from 'hooks/useManager'\nimport DataWrapper from 'components/DataWrapper'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { useComputedIndexAction, usePositionInfo, usePositionAction } from 'hooks/news/usePoistion'\nimport Logo from 'components/Logo'\nimport { chainConfigs, commonTokens, SupportedChainId, tokenKey } from 'config/constants/tokenConfig'\nimport useToast from 'hooks/useToast'\nimport { TransactionSuccessInfo } from 'components/TransactionInfo'\n\nfunction AddCurrencyToAvatar(props) {\n  const { onApprove, approveStatus, account, chainId, walletTokenBalance } = props\n\n  const [transferVal, setTransferVal] = useState(0)\n  const [submitStatus, setSubmitStatus] = useState(true)\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n\n  const { toastError, toastSuccess } = useToast()\n  const { currentPosition, currentPositionTokenInfo, collateralIndex } = usePositionInfo()\n  const { onUpdateCollateralValue, newDisplayCollateralRatio, newDisplayPrepaidInterestCoverage } =\n    useComputedIndexAction()\n  const { handleUpdatePosition } = usePositionAction()\n  const transfer = useTransfer()\n\n  const tradingList = useMemo(() => {\n    const { allowedTokens } = currentPositionTokenInfo\n    const tokenList = Array.from(Object.values(allowedTokens.tokens)).map((item) => {\n      return {\n        ...item,\n        token: item.symbol,\n        icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={item.logo} symbol={item.symbol} />,\n        balance: walletTokenBalance[item.symbol],\n        rightOptionList: [\n          {\n            ...item,\n            token: item.symbol,\n            icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={item.logo} symbol={item.symbol} />,\n            balance: toLargeUnits(allowedTokens.balances[item.symbol], item.decimals),\n          },\n        ],\n      }\n    })\n    return tokenList\n  }, [currentPositionTokenInfo, walletTokenBalance])\n  const [selectIndex, setSelectIndex] = useState<number>(0)\n\n  const leftSelectedToken = useMemo(() => {\n    return (\n      (tradingList.length && tradingList[selectIndex]) || {\n        ...currentPosition.mintTokenInfo.settlementCurrency,\n        balance: walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol],\n      }\n    )\n  }, [currentPosition.mintTokenInfo.settlementCurrency, selectIndex, tradingList, walletTokenBalance])\n  const rightSelectedToken = useMemo(() => {\n    return (\n      (tradingList.length && tradingList[selectIndex].rightOptionList[0]) || {\n        ...currentPosition.mintTokenInfo.settlementCurrency,\n        balance: toLargeUnits(\n          currentPositionTokenInfo.allowedTokens.balances[currentPosition.mintTokenInfo.settlementCurrency.symbol],\n          currentPosition.mintTokenInfo.settlementCurrency.decimals,\n        ),\n      }\n    )\n  }, [\n    currentPosition?.mintTokenInfo.settlementCurrency,\n    currentPositionTokenInfo?.allowedTokens.balances,\n    selectIndex,\n    tradingList,\n  ])\n  const onTransfer = useCallback(async () => {\n    try {\n      setSubmitStatus(true)\n      console.log('first', toSmallUnits(\n        TokenUtils.formatTokenAmount(transferVal, commonTokens[leftSelectedToken.symbol].decimals),\n        commonTokens[leftSelectedToken.symbol].decimals,\n      ))\n      const tx = await transfer(\n        account,\n        chainConfigs[chainId as SupportedChainId].tokens[leftSelectedToken.symbol].address,\n        currentPosition?.positionAddress,\n        toSmallUnits(\n          TokenUtils.formatTokenAmount(transferVal, commonTokens[leftSelectedToken.symbol].decimals),\n          commonTokens[leftSelectedToken.symbol].decimals,\n        ),\n      )\n      if (tx) {\n        setSubmitStatus(false)\n        setTransferVal(0)\n        toastSuccess(ToastTitle.success, <TransactionSuccessInfo content='Collateral added successfully.' txHash={tx.transactionHash} />)\n        onUpdateCollateralValue({\n          symbol: leftSelectedToken.symbol as tokenKey,\n          value: 0,\n        })\n        await handleUpdatePosition()\n      }\n    } catch (e: any) {\n      toastError(ToastTitle.failed, e?.reason)\n      setSubmitStatus(false)\n    }\n  }, [\n    transfer,\n    account,\n    leftSelectedToken,\n    chainId,\n    currentPosition,\n    transferVal,\n    toastSuccess,\n    onUpdateCollateralValue,\n    handleUpdatePosition,\n    toastError,\n  ])\n  return (\n    <>\n      <Methods\n        options={tradingList}\n        rightOptions={tradingList}\n        leftInputValue={transferVal}\n        leftBalance={leftSelectedToken.balance}\n        leftSelectValue={leftSelectedToken.symbol}\n        rightInputValue={transferVal}\n        // rightBalance={rightSelectedToken.balance}\n        // rightSelectValue={rightSelectedToken.symbol}\n        SelectIcon={Wallet}\n        selectInput={({ target }) => {\n          setTransferVal(target.value)\n          console.log('target.value :>> ', target.value, leftSelectedToken.balance);\n          if (target.value > 0 && target.value <= leftSelectedToken.balance) {\n            const _transferVal = toSmallUnits(\n              TokenUtils.formatTokenAmount(target.value, leftSelectedToken.decimals),\n              leftSelectedToken.decimals,\n            )\n            console.log('_transferVal :>> ', _transferVal);\n            setSubmitStatus(_transferVal.isZero())\n          } else {\n            setSubmitStatus(true)\n          }\n\n          onUpdateCollateralValue({\n            symbol: leftSelectedToken.symbol as tokenKey,\n            value: target.value,\n          })\n        }}\n        leftChange={(selected) => {\n          const _index = tradingList.findIndex((item) => item.symbol === selected.symbol)\n          setSelectIndex(_index)\n          setTransferVal(0)\n          onUpdateCollateralValue({\n            symbol: selected.symbol,\n            value: 0,\n          })\n        }}\n        onMax={() => {\n          if (walletTokenBalance) {\n            if (leftSelectedToken.balance) {\n              setTransferVal(leftSelectedToken.balance)\n              onUpdateCollateralValue({\n                symbol: leftSelectedToken.symbol as tokenKey,\n                value: leftSelectedToken.balance,\n              })\n              if (leftSelectedToken.balance > 0) {\n                setSubmitStatus(false)\n              }\n            }\n          }\n        }}\n        RightIcon={AvatarIcon}\n      />\n      <DataWrapper\n        data={[\n          [DataIndexName.CollateralRatio, collateralIndex.displayRatio, newDisplayCollateralRatio],\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      <TipWrap>\n        <IconWrap style={{ background: '#FF7D00', color: '#fff' }}>!</IconWrap>\n        <p>\n          Add asset to Collateral won’t effect the Prepaid Interest Coverage, so you might need to add the specific\n          asset in method 1 first.\n        </p>\n      </TipWrap>\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={submitStatus || transferVal <= 0} onClick={onTransfer}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nexport default AddCurrencyToAvatar\n","import React from 'react'\nimport { Typography } from '@mui/material/'\nimport { useWeb3React } from 'web3-react-core'\nimport usePanel from 'hooks/usePanel'\n\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails } from 'components/CommonComponent'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport AddGuaranteeFromWallet from './AddGuaranteeFromWallet'\nimport AddCurrencyToAvatar from './AddCurrencyToAvatar'\n\nexport default function BeforeMintAction(props) {\n  const { approveStatus, onApprove } = props\n  const { walletTokenBalance } = useHashPowerToken()\n  const { expanded, handleChange } = usePanel()\n  const { active, chainId, account } = useWeb3React()\n\n  return (\n    <Wrapper>\n      <Title>Add collateral before mint</Title>\n      <Accordion id=\"panel1\" expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Add asset from my wallet to Prepaid Interest</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel1' && (\n            <AddGuaranteeFromWallet\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel2\" expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 2. Add asset from my wallet to Collateral</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel2' && (\n            <AddCurrencyToAvatar\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Typography } from '@mui/material/'\nimport Wallet from 'components/Menu/icons/Wallet'\nimport Methods from 'components/Methods'\nimport { useWeb3React } from 'web3-react-core'\nimport { AvatarIcon, GuaranteeIcon } from 'components/uikit'\nimport DataWrapper from 'components/DataWrapper'\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails, Approve } from 'components/CommonComponent'\nimport usePanel from 'hooks/usePanel'\n// import tokens from 'config/constants/tokens'\nimport useToast from 'hooks/useToast'\nimport contracts from 'config/constants/contracts'\nimport { ethers, utils } from 'ethers'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport useSystemParams from 'hooks/useSystemParams'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport { useComputedIndexAction, usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport PositionABI from 'config/abi/Position.json'\nimport Logo from 'components/Logo'\nimport { chainConfigs, SupportedChainId, SupportedTokens, TokenConfig } from 'config/constants/tokenConfig'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { TransactionSubmittedInfo } from 'components/TransactionInfo'\nimport { getSwapQuote } from 'config/constants/pool'\n\nconst { ActionUser } = contracts\nconst ActionUserInterface = new utils.Interface(ActionUser.abi)\nconst WidrawFromPrepaidInterestToWallet = (props: { approveStatus: boolean; onApprove: any }) => {\n  const { approveStatus, onApprove } = props\n  const [actionDisable, setActionDisable] = useState(true)\n  const { chainId, account } = useWeb3React()\n  const { currentPosition, collateralIndex } = usePositionInfo()\n  const [trading, setTrading] = useState(false)\n  const [transferAmount, setTransferAmount] = useState<number>(0)\n  const { toastError, toastSuccess, toastInfo } = useToast()\n  const { walletTokenBalance } = useHashPowerToken()\n  const { signer } = useSystemParams()\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n  const {\n    onUpdatePrepaidInterest,\n    newDisplayCollateralRatio,\n    newPrepaidInterestCoverage,\n    newCollateralRatio,\n    newDisplayPrepaidInterestCoverage,\n    minCollateralValue,\n  } = useComputedIndexAction()\n\n  const { handleUpdatePosition } = usePositionAction()\n  const onGuaranteeCurrencyToWallet = useCallback(async () => {\n    try {\n      setTrading(true)\n      const data = ActionUserInterface.encodeFunctionData('moveGuarantee', [\n        account,\n        toSmallUnits(transferAmount.toString(), currentPosition.mintTokenInfo.settlementCurrency.decimals),\n      ])\n      const positionContract = new ethers.Contract(currentPosition.positionAddress, PositionABI, signer)\n      const txInfo = await positionContract.delegateCall(ActionUser.address[chainId], data)\n      if (txInfo) {\n        setTransferAmount(0)\n        toastInfo(\n          ToastTitle.submited,\n          <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n        )\n        const result = await txInfo.wait()\n        if (result) {\n          setTrading(false)\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSubmittedInfo content=\"The transactions was successful\" txHash={txInfo.hash} />,\n          )\n          await handleUpdatePosition()\n        }\n      }\n    } catch (e: any) {\n      setTrading(false)\n      toastError(ToastTitle.failed, e?.reason)\n    }\n  }, [\n    account,\n    chainId,\n    currentPosition.mintTokenInfo.settlementCurrency.decimals,\n    currentPosition.positionAddress,\n    handleUpdatePosition,\n    signer,\n    toastError,\n    toastInfo,\n    toastSuccess,\n    transferAmount,\n  ])\n\n  const onInput = (e) => {\n    setTransferAmount(e.target.value)\n  }\n  useEffect(() => {\n    if (\n      newCollateralRatio < 120 ||\n      newPrepaidInterestCoverage < 20 ||\n      transferAmount <= 0 ||\n      transferAmount > (collateralIndex.prepaidInterest as number) ||\n      trading\n    ) {\n      setActionDisable(true)\n    } else {\n      setActionDisable(false)\n    }\n  }, [collateralIndex.prepaidInterest, newCollateralRatio, newPrepaidInterestCoverage, trading, transferAmount])\n\n  useEffect(() => {\n    if (transferAmount >= 0) {\n      const val = transferAmount >= 0 ? Number(`-${transferAmount}`) : 0\n      onUpdatePrepaidInterest(Number.isNaN(val) ? 0 : val)\n    } else {\n      onUpdatePrepaidInterest(0)\n    }\n  }, [onUpdatePrepaidInterest, transferAmount])\n\n  const tradingList = useMemo(() => {\n    return [\n      {\n        decimals: currentPosition.mintTokenInfo.settlementCurrency.decimals,\n        token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n        balance: collateralIndex.prepaidInterest,\n        icon: () => (\n          <Logo\n            imgprops={{ style: { marginRight: 10 } }}\n            token={currentPosition.mintTokenInfo.settlementCurrency.logo}\n            symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n          />\n        ),\n        rightOptionList: [\n          {\n            decimals: currentPosition.mintTokenInfo.settlementCurrency.decimals,\n            token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            balance: walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol],\n            icon: () => (\n              <Logo\n                imgprops={{ style: { marginRight: 10 } }}\n                token={currentPosition.mintTokenInfo.settlementCurrency.logo}\n                symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n              />\n            ),\n          },\n        ],\n      },\n    ]\n  }, [collateralIndex, currentPosition, walletTokenBalance])\n\n  return (\n    <>\n      <Methods\n        selectInput={onInput}\n        onMax={() => {\n          const pimin = 20 * currentPosition.positionStatus.estimatedDailyDebt.toNumber()\n          const pi = Number(\n            TokenUtils.formatTokenAmount(\n              Number(collateralIndex.prepaidInterest) -\n                (toLargeUnits(pimin, currentPosition.mintTokenInfo.settlementCurrency.decimals, true) as number),\n              currentPosition.mintTokenInfo.settlementCurrency.decimals,\n            ),\n          )\n          if (pi > 0 && minCollateralValue >= 0) {\n            if (pi > minCollateralValue) {\n              setTransferAmount(Number(TokenUtils.formatFourDecimals(minCollateralValue)))\n            } else {\n              setTransferAmount(Number(TokenUtils.formatFourDecimals(pi)))\n            }\n          } else {\n            setTransferAmount(0)\n          }\n        }}\n        SelectIcon={GuaranteeIcon}\n        options={tradingList}\n        leftBalance={collateralIndex.prepaidInterest}\n        rightBalance={walletTokenBalance && walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]}\n        rightSelectedValue={42}\n        rightSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        selectValue={42}\n        selectedBalance={100}\n        selectedSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        leftInputValue={transferAmount}\n        rightInputValue={transferAmount}\n        RightIcon={Wallet}\n      />\n      <DataWrapper\n        data={[\n          ['Collateral Ratio', collateralIndex.displayRatio, newDisplayCollateralRatio],\n          ['Prepaid Interest Coverage', collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={actionDisable} onClick={onGuaranteeCurrencyToWallet}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nconst WidrawFromCollateralToWallet: React.FC<{\n  approveStatus: boolean\n  onApprove: (callback: (state: boolean) => void) => void\n}> = (props) => {\n  const { chainId, account } = useWeb3React()\n  const { approveStatus, onApprove } = props\n  const { signer } = useSystemParams()\n  const { walletTokenBalance } = useHashPowerToken()\n  const [transferAmount, setTransferAmount] = useState<number>(0)\n  const { tokenPools } = useSystemParams()\n\n  const [leftSelectedToken, setLeftSelectedToken] = useState<\n    { balance: number; token: SupportedTokens } & Omit<TokenConfig, 'logo'>\n  >({\n    balance: 0,\n    token: SupportedTokens.WBTC,\n    decimals: 8,\n    address: '',\n    symbol: SupportedTokens.WBTC,\n  })\n  const [rightSelectedToken, setRightSelectedToken] = useState<\n    { balance: number; token: SupportedTokens } & Omit<TokenConfig, 'logo'>\n  >({\n    balance: 0,\n    token: SupportedTokens.WBTC,\n    decimals: 8,\n    address: '',\n    symbol: SupportedTokens.WBTC,\n  })\n  const [actionDisable, setActionDisable] = useState(true)\n\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n\n  const { currentPosition, currentPositionTokenInfo, collateralIndex } = usePositionInfo()\n  const {\n    onUpdateCollateralValue,\n    newDisplayCollateralRatio,\n    newCollateralRatio,\n    newDisplayPrepaidInterestCoverage,\n    minCollateralValue,\n  } = useComputedIndexAction()\n  const { handleUpdatePosition } = usePositionAction()\n  const { toastError, toastSuccess, toastInfo } = useToast()\n  const [trading, setTrading] = useState(false)\n\n  useEffect(() => {\n    if (leftSelectedToken) {\n      const val = toSmallUnits(\n        TokenUtils.formatTokenAmount(transferAmount, leftSelectedToken.decimals),\n        leftSelectedToken.decimals,\n      )\n      if (!val.isZero() && transferAmount <= leftSelectedToken.balance && !trading) {\n        setActionDisable(false)\n      } else {\n        setActionDisable(true)\n      }\n      if (newCollateralRatio <= 120) {\n        setActionDisable(true)\n      }\n    }\n  }, [leftSelectedToken, transferAmount, trading, newCollateralRatio])\n\n  useEffect(() => {\n    const transferAmountVal = Number(`-${transferAmount}`)\n    onUpdateCollateralValue({\n      symbol: leftSelectedToken.token as any,\n      value: Number.isNaN(transferAmountVal) ? 0 : transferAmountVal,\n    })\n  }, [leftSelectedToken, onUpdateCollateralValue, transferAmount])\n\n  const onTransfer = useCallback(async () => {\n    setTrading(true)\n    setActionDisable(true)\n    if (transferAmount <= 0) {\n      setTrading(false)\n      toastError(ToastTitle.failed, 'Please enter a valid amount')\n      return\n    }\n    const withdrawAssetParams = ActionUserInterface.encodeFunctionData('withdrawAsset', [\n      chainConfigs[chainId as SupportedChainId].tokens[leftSelectedToken.token].address,\n      account,\n      toSmallUnits(\n        TokenUtils.formatTokenAmount(transferAmount, leftSelectedToken.decimals),\n        leftSelectedToken.decimals,\n      ),\n    ])\n    try {\n      const positionContract = new ethers.Contract(currentPosition.positionAddress, PositionABI, signer)\n      const txInfo = await positionContract.delegateCall(ActionUser.address[chainId], withdrawAssetParams)\n      if (txInfo.hash) {\n        toastInfo(\n          ToastTitle.submited,\n          <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n        )\n        const result = await txInfo.wait()\n        if (result) {\n          setTrading(false)\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSubmittedInfo content=\"The transactions was successful\" txHash={txInfo.hash} />,\n          )\n          setTransferAmount(0)\n          await handleUpdatePosition()\n        }\n      }\n    } catch (e: any) {\n      setTrading(false)\n      toastError(ToastTitle.failed, e?.reason)\n    }\n  }, [\n    leftSelectedToken,\n    chainId,\n    account,\n    transferAmount,\n    currentPosition.positionAddress,\n    signer,\n    toastInfo,\n    toastSuccess,\n    handleUpdatePosition,\n    toastError,\n  ])\n\n  const onMax = (type) => {\n    const { settlementCurrency } = currentPosition.mintTokenInfo\n    if (type === 1) {\n      if (leftSelectedToken.token === settlementCurrency.symbol) {\n        if (minCollateralValue < leftSelectedToken.balance) {\n          setTransferAmount(Number(TokenUtils.formatFourDecimals(minCollateralValue)))\n        } else {\n          setTransferAmount(Number(TokenUtils.formatFourDecimals(leftSelectedToken.balance)))\n        }\n      } else {\n        const unitPrice = getSwapQuote(\n          chainId,\n          leftSelectedToken.token,\n          settlementCurrency.symbol,\n          toSmallUnits(\n            TokenUtils.formatTokenAmount(minCollateralValue, settlementCurrency.decimals),\n            settlementCurrency.decimals,\n          ),\n          tokenPools,\n        )\n        const minCollateralValueTokenPrice = toLargeUnits(unitPrice, leftSelectedToken.decimals, true) as number\n        if (minCollateralValueTokenPrice < leftSelectedToken.balance) {\n          setTransferAmount(Number(TokenUtils.formatFourDecimals(minCollateralValueTokenPrice)))\n        } else {\n          setTransferAmount(Number(TokenUtils.formatFourDecimals(leftSelectedToken.balance)))\n        }\n      }\n    }\n  }\n\n  const tradingList = useMemo(() => {\n    const { allowedTokens } = currentPositionTokenInfo\n    if (allowedTokens.tokens) {\n      return Object.keys(allowedTokens.tokens).map((item) => {\n        const token = allowedTokens.tokens[item as SupportedTokens]\n        const current = {\n          icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={token.logo} symbol={token.symbol} />,\n          token: token.symbol,\n          balance: toLargeUnits(allowedTokens.balances[item as SupportedTokens], token.decimals, true) as number,\n          decimals: token.decimals,\n          address: token.address,\n        }\n        return {\n          ...current,\n          rightOptionList: [\n            {\n              ...current,\n              balance: walletTokenBalance[item as SupportedTokens] as number,\n            },\n          ],\n        }\n      })\n    }\n    return []\n  }, [currentPositionTokenInfo, walletTokenBalance])\n\n  useEffect(() => {\n    const activeToken =\n      (tradingList.find((it) => it.token === currentPosition.mintTokenInfo.settlementCurrency.symbol) as any) ||\n      (tradingList[0] as any)\n    setLeftSelectedToken(activeToken)\n    setRightSelectedToken(activeToken)\n  }, [currentPosition.mintTokenInfo.settlementCurrency.symbol, tradingList])\n\n  return (\n    <>\n      <Methods\n        rightOptions={[rightSelectedToken]}\n        SelectIcon={AvatarIcon}\n        options={tradingList}\n        leftSelectValue={leftSelectedToken ? leftSelectedToken.token : ''}\n        rightSelectValue={rightSelectedToken ? rightSelectedToken.token : ''}\n        rightBalance={rightSelectedToken.balance}\n        leftInputValue={transferAmount}\n        rightInputValue={transferAmount}\n        leftChange={(selected) => {\n          setLeftSelectedToken(selected)\n          setRightSelectedToken(selected.rightOptionList[0])\n          setTransferAmount(0)\n        }}\n        selectInput={(e) => {\n          setTransferAmount(e.target.value)\n          if (e.target.value > 0 && e.target.value <= leftSelectedToken.balance) {\n            setActionDisable(false)\n          } else {\n            setActionDisable(true)\n          }\n        }}\n        onMax={() => {\n          onMax(1)\n        }}\n        RightIcon={Wallet}\n      />\n      <DataWrapper\n        data={[\n          [DataIndexName.CollateralRatio, collateralIndex.displayRatio, newDisplayCollateralRatio],\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={actionDisable} onClick={onTransfer}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nexport default function WithdrawCollateral(props) {\n  const { expanded, handleChange } = usePanel()\n  return (\n    <Wrapper>\n      <Title>Withdraw Collateral</Title>\n      <Accordion id=\"panel13\" expanded={expanded === 'panel13'} onChange={handleChange('panel13')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Withdraw asset from Collateral to my wallet</Typography>\n        </AccordionSummary>\n        <AccordionDetails>{expanded === 'panel13' && <WidrawFromCollateralToWallet {...props} />}</AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel14\" expanded={expanded === 'panel14'} onChange={handleChange('panel14')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 2. Withdraw asset from Prepaid Interest to my wallet</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel14' && <WidrawFromPrepaidInterestToWallet {...props} />}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { styled } from '@mui/material/styles'\nimport { useWeb3React } from 'web3-react-core'\nimport { ButtonBase } from '@mui/material'\nimport { utils } from 'ethers'\nimport Select from 'components/Select'\nimport WalletIcon from 'components/Menu/icons/Wallet'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport useSystemParams from 'hooks/useSystemParams'\nimport usePosContract from 'hooks/usePosContract'\nimport useToast from 'hooks/useToast'\nimport { useApprove, useCheckApprove } from 'hooks/useApprove'\nimport contracts from 'config/constants/contracts'\nimport { AvatarIcon, Button } from 'components/uikit'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport { useComputedIndexAction, usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { TransactionSuccessInfo } from 'components/TransactionInfo'\nimport Logo from 'components/Logo'\n\nconst SelectGroup = styled('div')`\n  button.MuiSelectUnstyled-root {\n    width: 200px;\n  }\n\n  div.MuiInput-root {\n    width: calc(100% - 200px) !important;\n  }\n\n  div.topFunc {\n    display: flex;\n    align-items: center;\n    padding: 5px 10px;\n\n    span {\n      margin-left: 10px;\n      font-size: 12px;\n      color: rgba(0, 0, 0, 0.5);\n    }\n  }\n`\nconst Tip = styled('div')`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 18px;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 17px;\n  color: rgba(0, 0, 0, 0.5);\n  background: #def1ff;\n  border-radius: 14px;\n  padding: 16px 19px 11px;\n  p span:first-of-type {\n    margin-right: 10px;\n  }\n\n  & + p {\n    font-weight: 400;\n    font-size: 12px;\n    line-height: 17px;\n    color: #000000;\n    margin-bottom: 30px;\n  }\n\n  .info_panel {\n    width: 100%;\n    text-align: right;\n    .footer {\n      border-top: 0.5px solid rgba(0, 0, 0, 0.12);\n    }\n    td {\n      font-family: PingFangSC-Regular, sans-serif;\n      font-weight: 400;\n      font-size: 12px;\n      padding: 5px 0;\n    }\n    .label {\n      text-align: left;\n      width: 30%;\n    }\n    .from,\n    .to {\n      width: 35%;\n      line-height: 17px;\n    }\n    .to {\n      font-family: PingFangSC-Medium, sans-serif;\n      font-weight: 500;\n      color: #000;\n    }\n  }\n`\nconst Func = styled('div')`\n  padding: 10px 20px 5px;\n\n  button {\n    color: #2aa1ff;\n  }\n`\n\nconst NeutralizeButton = styled(Button)`\n  background: linear-gradient(90deg, #61c2f7 0%, #7ae9f0 100%);\n  border-radius: 20px !important;\n  box-shadow: none !important;\n  line-height: 46px !important;\n  height: 46px !important;\n  display: block !important;\n  margin: 30px auto 0 !important;\n  width: 30% !important;\n  color: #000;\n`\n\nconst SelectTypeWrap = styled('div')`\n  h3 {\n    font-size: 16px;\n    font-family: PingFangSC-Medium, sans-serif;\n    margin-bottom: 16px;\n  }\n  .content {\n    display: flex;\n  }\n  .item_wrap {\n    min-width: 200px;\n    padding: 1px;\n    border-radius: 14px;\n    overflow: hidden;\n    margin-right: 16px;\n    background: #e3e8ed;\n    cursor: pointer;\n    user-select: none;\n    span {\n      font-family: PingFangSC-Regular, sans-serif;\n      color: rgba(0, 0, 0, 0.5);\n      font-size: 12px;\n      line-height: 17px;\n      &:first-of-type {\n        margin-right: 30px;\n      }\n    }\n    &.active {\n      padding: 2px;\n      background: linear-gradient(270deg, #7ae9f0 0%, #61c3f7 100%);\n      span {\n        color: #000;\n      }\n    }\n  }\n  .item {\n    border-radius: 12px;\n    //border: 2px solid #E3E8ED;\n    //border-image: linear-gradient(#7AE9F0 , #61C3F7) 30 30;\n    padding: 14px 14px 9px 10px;\n    background: #fff;\n    width: 100%;\n    height: 100%;\n    //box-sizing: border-box;\n    h4 {\n      font-family: PingFangSC-Semibold, sans-serif;\n      font-weight: 550;\n      display: flex;\n      align-items: center;\n      line-height: 20px;\n      font-size: 14px;\n      margin-bottom: 22px;\n      svg {\n        margin-right: 8.5px;\n      }\n    }\n    p {\n      display: flex;\n      justify-content: space-between;\n    }\n  }\n`\n\nconst TipInfo = styled('div')`\n  display: flex;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.03);\n  border-radius: 8px;\n  padding: 16px 20px;\n  p {\n    line-height: 20px;\n    font-size: 14px;\n    font-family: PingFangSC-Regular, sans-serif;\n    margin-left: 16px;\n    color: rgba(0, 0, 0, 0.5);\n  }\n`\n\nconst RED = 'red'\n\nenum NeutralizeType {\n  Wallet = 'wallet',\n  Avatar = 'avatar',\n}\n\nconst { ActionUser: fbtc20mint } = contracts\nfunction NeutralizeComp() {\n  const { setRefresh, walletTokenBalance } = useHashPowerToken()\n  const { signer } = useSystemParams()\n  const { active, chainId, account } = useWeb3React()\n  const [approveStatus, setApproveStatus] = useState(false)\n  const [disabledAction, setDisabledAction] = useState(true)\n  const [neutralizeAmount, setNeutralizeAmount] = useState(0)\n  const posContract = usePosContract(active, signer)\n  const [neutralizeType, setNeutralizeType] = useState<NeutralizeType>(NeutralizeType.Wallet)\n\n  const { toastSuccess, toastError, toastInfo } = useToast()\n  const { currentMintToken, currentPosition, currentPositionTokenInfo, collateralIndex } = usePositionInfo()\n  const { onUpdateNeutralizeValue, newNeutralizeFee, newDisplayCollateralRatio, newDisplayPrepaidInterestCoverage, newEstimatedDailyDebt } =\n    useComputedIndexAction()\n\n  const { handleUpdatePosition } = usePositionAction()\n\n  const { handleApprove } = useApprove(account, currentPosition?.mintTokenInfo.address)\n  const { onCheckApprove } = useCheckApprove()\n\n  const onApprove = useCallback(async () => {\n    try {\n      const info = await handleApprove(currentPosition?.positionAddress)\n      setApproveStatus(true)\n      if (info.hash) {\n        toastInfo(\n          ToastTitle.submited,\n          <TransactionSuccessInfo txHash={info.hash} content=\"The approve has been submitted\" />,\n        )\n        const result = await info.wait()\n        \n        if (result) {\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSuccessInfo txHash={info.hash} content=\"The approve has been successfully\" />,\n          )\n        }\n      }\n    } catch ({ message }: any) {\n      setApproveStatus(false)\n      toastError(ToastTitle.failed, `${message}`)\n    }\n  }, [handleApprove, currentPosition?.positionAddress, toastInfo, toastSuccess, toastError])\n\n  const settlementCurrencyValues = useMemo(() => {\n    const settlementCurrency = currentPosition?.mintTokenInfo.settlementCurrency\n    if (currentPositionTokenInfo?.allowedTokens) {\n      return {\n        [settlementCurrency.symbol]: Number(\n          TokenUtils.formatFourDecimals(\n            Number(\n              toLargeUnits(\n                currentPositionTokenInfo.allowedTokens.balances[settlementCurrency.symbol],\n                settlementCurrency.decimals,\n              ),\n            ),\n          ),\n        ),\n        [currentMintToken]: Number(\n          TokenUtils.formatFourDecimals(\n            Number(\n              toLargeUnits(\n                currentPositionTokenInfo.allowedTokens.balances[currentPosition.mintTokenInfo.symbol],\n                currentPosition.mintTokenInfo.decimals,\n              ),\n            ),\n          ),\n        ),\n      }\n    }\n    return {\n      [settlementCurrency.symbol]: 0,\n      [currentMintToken]: 0,\n    }\n  }, [currentMintToken, currentPosition, currentPositionTokenInfo])\n\n  const checkApprove = useCallback(async () => {\n    if (currentPosition.isEnable) {\n      const txInfo = await onCheckApprove(\n        account,\n        currentPosition.mintTokenInfo.address,\n        currentPosition.positionAddress,\n      )\n      setApproveStatus(txInfo && txInfo._hex > 0)\n    }\n  }, [account, currentPosition, onCheckApprove])\n\n  const onChangeNeutralizeAmount = useCallback(\n    ({ target }) => {\n      const { value } = target;\n      const { mintTokenInfo, balance } = currentPosition;\n      const _decimals = mintTokenInfo.decimals;\n  \n      setNeutralizeAmount(value);\n  \n      const formattedValue = value ? Number(`-${value}`) : 0;\n      const actionVal = Number(TokenUtils.formatTokenAmount(formattedValue, _decimals));\n      onUpdateNeutralizeValue(actionVal);\n  \n      const debt = toLargeUnits(balance, _decimals);\n      const isValueWithinBounds = value > 0 && value <= debt;\n  \n      const isWalletValueValid = isValueWithinBounds && value <= walletTokenBalance[currentMintToken];\n      const isCollateralValueValid = isValueWithinBounds && value <= settlementCurrencyValues[currentMintToken];\n  \n  \n      const isValueValid = neutralizeType === NeutralizeType.Wallet\n        ? isWalletValueValid\n        : isCollateralValueValid;\n  \n      setDisabledAction(!isValueValid);\n  \n      if (value > 0) {\n        const transferValue = toSmallUnits(\n          TokenUtils.formatTokenAmount(value, _decimals),\n          _decimals\n        );\n  \n        const isFinalValueValid = isValueValid && !transferValue.isZero();\n        setDisabledAction(!isFinalValueValid);\n      }\n    },\n    [\n      onUpdateNeutralizeValue,\n      settlementCurrencyValues,\n      currentMintToken,\n      walletTokenBalance,\n      neutralizeType,\n      currentPosition,\n    ]\n  );\n  \n\n  const onNeutralize = useCallback(async () => {\n    if (!disabledAction) {\n      const interf = new utils.Interface(fbtc20mint.abi)\n      const data = interf.encodeFunctionData('neutralizetBalance', [\n        toSmallUnits(TokenUtils.formatTokenAmount(neutralizeAmount, currentPosition.mintTokenInfo.decimals), currentPosition.mintTokenInfo.decimals),\n        neutralizeType === NeutralizeType.Wallet,\n      ])\n      if (posContract) {\n        try {\n          const info = await posContract.delegateCall(fbtc20mint.address[chainId], data)\n          if (info) {\n            setDisabledAction(true)\n            setNeutralizeAmount(0)\n            toastInfo(\n              ToastTitle.success,\n              <TransactionSuccessInfo txHash={info.hash} content=\"Waiting for confirmation\" />,\n            )\n            const result = await info.wait()\n            if (result) {\n              setRefresh((state) => !state)\n              toastSuccess(\n                ToastTitle.success,\n                <TransactionSuccessInfo txHash={info.hash} content=\"The transaction has been successfully\" />,\n              )\n              setDisabledAction(false)\n              onUpdateNeutralizeValue(0)\n              await handleUpdatePosition()\n            }\n          }\n        } catch (e: any) {\n          toastError(ToastTitle.failed, e?.reason || e?.message)\n        }\n      }\n    }\n  }, [\n    disabledAction,\n    neutralizeAmount,\n    currentPosition.mintTokenInfo.decimals,\n    neutralizeType,\n    posContract,\n    chainId,\n    toastInfo,\n    setRefresh,\n    toastSuccess,\n    onUpdateNeutralizeValue,\n    handleUpdatePosition,\n    toastError,\n  ])\n\n  useEffect(() => {\n    checkApprove()\n  }, [checkApprove])\n\n  return (\n    <>\n      <SelectGroup>\n        <Select\n          selectValue={currentMintToken}\n          groupStyle={{ width: '100%' }}\n          options={[\n            {\n              ...currentPosition?.mintTokenInfo,\n              icon: ()=> <Logo imgprops={{style: {marginRight: 10}}} token={currentPosition?.mintTokenInfo.logo} symbol={currentMintToken} />,\n              token: currentPosition.mintTokenInfo.symbol,\n            },\n          ]}\n          actionValue={neutralizeAmount}\n          selectInput={onChangeNeutralizeAmount}\n          isGroup\n        />\n        <Func dir=\"rtl\">\n          <ButtonBase\n            onClick={() => {\n              const debt = toLargeUnits(currentPosition.balance, currentPosition.mintTokenInfo.decimals)\n              if (neutralizeType === NeutralizeType.Wallet) {\n                const value = Math.min(Number(walletTokenBalance[currentMintToken]), Number(debt))\n                onChangeNeutralizeAmount({ target: { value } })\n              } else {\n                const value = Math.min(Number(settlementCurrencyValues[currentMintToken]), Number(debt))\n                onChangeNeutralizeAmount({ target: { value } })\n              }\n            }}\n          >\n            Max\n          </ButtonBase>\n        </Func>\n        <SelectTypeWrap>\n          <h3>Neutralize the asset from</h3>\n          <div className=\"content\">\n            <div\n              className={`item_wrap ${neutralizeType === NeutralizeType.Wallet ? 'active' : ''}`}\n              onClick={() => {\n                setNeutralizeType(NeutralizeType.Wallet)\n                if (neutralizeAmount > 0) {\n                  setDisabledAction(\n                    newNeutralizeFee > walletTokenBalance.WBTC ||\n                      neutralizeAmount > walletTokenBalance[currentMintToken],\n                  )\n                }\n              }}\n              onKeyUp={() => null}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <div className=\"item wallet\">\n                <h4>\n                  <WalletIcon /> My Wallet\n                </h4>\n                <p>\n                  <span>{currentMintToken}</span>\n                  <span\n                    style={{\n                      color:\n                        (neutralizeType === NeutralizeType.Wallet &&\n                          walletTokenBalance &&\n                          neutralizeAmount > walletTokenBalance[currentMintToken] &&\n                          RED) ||\n                        '',\n                    }}\n                  >\n                    {(walletTokenBalance && TokenUtils.formatFourDecimals(walletTokenBalance[currentMintToken])) || 0}\n                  </span>\n                </p>\n                <p>\n                  <span>{currentPosition.mintTokenInfo.settlementCurrency.symbol}</span>\n                  <span\n                    style={{\n                      color:\n                        neutralizeType === NeutralizeType.Wallet &&\n                        walletTokenBalance &&\n                        newNeutralizeFee > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]\n                          ? RED\n                          : '',\n                    }}\n                  >\n                    {(walletTokenBalance && TokenUtils.formatFourDecimals(walletTokenBalance.WBTC)) || 0}\n                  </span>\n                </p>\n              </div>\n            </div>\n\n            <div\n              className={`item_wrap ${neutralizeType === NeutralizeType.Avatar ? 'active' : ''}`}\n              onClick={() => {\n                setNeutralizeType(NeutralizeType.Avatar)\n                if (neutralizeAmount > 0) {\n                  setDisabledAction(\n                    neutralizeAmount > settlementCurrencyValues[currentMintToken] ||\n                      newNeutralizeFee >\n                        settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol],\n                  )\n                }\n              }}\n              onKeyUp={() => null}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <div className=\"item avatar\">\n                <h4>\n                  <AvatarIcon />\n                  Collateral\n                </h4>\n                <p>\n                  <span>{currentMintToken}</span>\n                  <span\n                    style={{\n                      color:\n                        (neutralizeType === NeutralizeType.Avatar &&\n                          neutralizeAmount > settlementCurrencyValues[currentMintToken] &&\n                          RED) ||\n                        '',\n                    }}\n                  >\n                    {settlementCurrencyValues[currentPosition.mintTokenInfo.symbol]}\n                  </span>\n                </p>\n                <p>\n                  <span>{currentPosition.mintTokenInfo.settlementCurrency.symbol}</span>\n                  <span\n                    style={{\n                      color:\n                        (neutralizeType === NeutralizeType.Avatar &&\n                          newNeutralizeFee >\n                            settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol] &&\n                          RED) ||\n                        '',\n                    }}\n                  >\n                    {settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol]}\n                  </span>\n                </p>\n              </div>\n            </div>\n          </div>\n        </SelectTypeWrap>\n      </SelectGroup>\n      <Tip>\n        <table className=\"info_panel\" cellSpacing={20} cellPadding={20}>\n          <thead>\n            <tr>\n              <td className=\"from\" colSpan={2}>\n                From\n              </td>\n              <td className=\"to\">To</td>\n            </tr>\n            <tr>\n              <td className=\"label\">Outstanding Debt</td>\n              <td className=\"from\">\n                {TokenUtils.formatFourDecimals(\n                  Number(toLargeUnits(currentPosition?.balance, currentPosition?.mintTokenInfo.decimals)),\n                )}\n              </td>\n              <td className=\"to\">\n                {TokenUtils.formatFourDecimals(\n                  Number(toLargeUnits(currentPosition?.balance, currentPosition?.mintTokenInfo.decimals)) -\n                    neutralizeAmount,\n                )}\n              </td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td className=\"label\">{DataIndexName.CollateralRatio}</td>\n              <td className=\"from\">{collateralIndex.displayRatio}</td>\n              <td className=\"to\">{newDisplayCollateralRatio}</td>\n            </tr>\n            <tr>\n              <td className=\"label\">{DataIndexName.PrepaidInterestCoverage}</td>\n              <td className=\"from\">{collateralIndex.displayCoverage}</td>\n\n              <td className=\"to\">{newDisplayPrepaidInterestCoverage}</td>\n            </tr>\n            <tr className=\"footer\">\n              <td className=\"label\">Estimate neutralize fee</td>\n              <td\n                className=\"to\"\n                colSpan={2}\n                style={{\n                  color:\n                    (neutralizeType === NeutralizeType.Wallet &&\n                      walletTokenBalance &&\n                      newNeutralizeFee > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]) ||\n                    (neutralizeType === NeutralizeType.Avatar &&\n                      newNeutralizeFee >\n                        settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol])\n                      ? RED\n                      : '',\n                }}\n              >\n                {!newNeutralizeFee ? 0 : `≈ ${TokenUtils.formatTokenAmount(newNeutralizeFee, currentPosition.mintTokenInfo.settlementCurrency.decimals)} ${currentPosition.mintTokenInfo.settlementCurrency.symbol}`} \n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </Tip>\n      <TipInfo>\n        {(neutralizeType === NeutralizeType.Wallet &&\n          walletTokenBalance &&\n          newNeutralizeFee > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]) ||\n        (neutralizeType === NeutralizeType.Avatar &&\n          newNeutralizeFee > settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol]) ? (\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16Z\"\n              fill=\"#FF2E00\"\n            />\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M8.57852 10.156C8.82398 10.156 9.02296 10.355 9.02296 10.6004V11.756C9.02296 12.0015 8.82398 12.2004 8.57852 12.2004H7.42296C7.1775 12.2004 6.97852 12.0015 6.97852 11.756V10.6004C6.97852 10.355 7.1775 10.156 7.42296 10.156H8.57852ZM8.57852 3.62842C8.82398 3.62842 9.02296 3.8274 9.02296 4.07286V8.74859C9.02296 8.99405 8.82398 9.19303 8.57852 9.19303H7.42296C7.1775 9.19303 6.97852 8.99405 6.97852 8.74859V4.07286C6.97852 3.8274 7.1775 3.62842 7.42296 3.62842H8.57852Z\"\n              fill=\"white\"\n            />\n          </svg>\n        ) : (\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16Z\"\n              fill=\"#73797C\"\n            />\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M7.42295 5.6736C7.17749 5.6736 6.9785 5.47461 6.9785 5.22915V4.0736C6.9785 3.82814 7.17749 3.62915 7.42295 3.62915H8.5785C8.82396 3.62915 9.02295 3.82814 9.02295 4.0736L9.02295 5.22915C9.02295 5.47461 8.82396 5.6736 8.5785 5.6736H7.42295ZM7.42295 12.2012C7.17749 12.2012 6.9785 12.0022 6.9785 11.7567V7.081C6.9785 6.83554 7.17749 6.63656 7.42295 6.63656H8.5785C8.82396 6.63656 9.02295 6.83554 9.02295 7.081V11.7567C9.02295 12.0022 8.82396 12.2012 8.5785 12.2012H7.42295Z\"\n              fill=\"white\"\n            />\n          </svg>\n        )}\n\n        <p\n          style={{\n            color:\n              (neutralizeType === NeutralizeType.Wallet &&\n                walletTokenBalance &&\n                newNeutralizeFee > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]) ||\n              (neutralizeType === NeutralizeType.Avatar &&\n                newNeutralizeFee > settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol])\n                ? RED\n                : '',\n          }}\n        >\n          A 1.0% fee of the token value will be levied after the position is neutralized.\n        </p>\n      </TipInfo>\n      {neutralizeType === NeutralizeType.Avatar ? (\n        <NeutralizeButton disabled={disabledAction} onClick={onNeutralize}>\n          Neutralize\n        </NeutralizeButton>\n      ) : (\n        <>\n          {approveStatus ? (\n            <NeutralizeButton disabled={disabledAction} onClick={onNeutralize}>\n              Neutralize\n            </NeutralizeButton>\n          ) : (\n            <NeutralizeButton disabled={approveStatus} onClick={onApprove}>\n              Approve\n            </NeutralizeButton>\n          )}\n        </>\n      )}\n    </>\n  )\n}\n\nexport default NeutralizeComp\n","import {useEffect, useState} from \"react\";\nimport {getContract} from \"utils/web3React\";\nimport PositionABI from 'config/abi/Position.json';\nimport {useAppSelector} from \"../state\";\n\nexport default function usePosContract(active,signer) {\n  const [contract,setContract] = useState(null);\n  const currentCpt = useAppSelector(state=> state.collateralManage.currentCPT)\n\n  useEffect(()=>{\n    if (active && signer && currentCpt && Number(currentCpt.position)) {\n      const _contract = getContract(signer, PositionABI, currentCpt.position);\n      setContract(_contract)\n    }\n  }, [active, currentCpt, signer])\n\n  return contract\n}\n","import React, { useCallback, useMemo, useState } from 'react'\nimport Methods from 'components/Methods'\n\nimport { Approve } from 'components/CommonComponent'\nimport useToast from 'hooks/useToast'\nimport DataWrapper from 'components/DataWrapper'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport { useComputedIndexAction, usePositionInfo, usePositionAction } from 'hooks/news/usePoistion'\nimport { AvatarIcon, GuaranteeIcon } from 'components/uikit'\nimport { TransactionSubmittedInfo, TransactionSuccessInfo } from 'components/TransactionInfo'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport Logo from 'components/Logo'\n\n\nfunction AddGuaranteeFromAvatar(props) {\n  const { approveStatus, onApprove, walletTokenBalance } = props\n  const [transferVal, setTransferVal] = useState<number>(0)\n  const [isDisabled, setDisabled] = useState(false)\n  const { toastSuccess, toastError, toastInfo } = useToast()\n  const { collateralIndex, currentPosition, currentPositionTokenInfo } = usePositionInfo()\n  const { onUpdatePrepaidInterest, newDisplayPrepaidInterestCoverage } = useComputedIndexAction()\n  const { handleUpdatePosition, onAddPrepaidInterest } = usePositionAction()\n  const leftBalance = useMemo(() => {\n    return toLargeUnits(\n      currentPositionTokenInfo.allowedTokens?.balances[currentPosition.mintTokenInfo.settlementCurrency.symbol] ?? 0,\n      currentPosition.mintTokenInfo.settlementCurrency.decimals,\n      true,\n    ) as number\n  }, [currentPosition.mintTokenInfo.settlementCurrency, currentPositionTokenInfo.allowedTokens?.balances])\n\n  const changeTransferVal = useCallback(\n    (e, type) => {\n      const numberVal = type === 0 ? Number(e.target.value) : leftBalance\n      const _transferAmount = toSmallUnits(\n        TokenUtils.formatTokenAmount(numberVal, currentPosition.mintTokenInfo.settlementCurrency.decimals),\n        currentPosition.mintTokenInfo.settlementCurrency.decimals,\n      )\n      if (numberVal > leftBalance || numberVal <= 0 || _transferAmount.isZero()) {\n        setDisabled(true)\n      } else {\n        setDisabled(false)\n      }\n      setTransferVal(type === 0 ? e.target.value : numberVal)\n      onUpdatePrepaidInterest(numberVal)\n    },\n    [currentPosition.mintTokenInfo.settlementCurrency.decimals, leftBalance, onUpdatePrepaidInterest],\n  )\n  const onSubmit = useCallback(async () => {\n    try {\n      if (!transferVal || (transferVal > leftBalance && transferVal <= 0)) {\n        toastError(ToastTitle.failed, 'Please enter a valid amount')\n        return\n      }\n      setDisabled(true)\n      const txInfo = await onAddPrepaidInterest(transferVal)\n      toastInfo(\n        ToastTitle.submited,\n        <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n      )\n      const result = await txInfo.wait()\n      if (result) {\n        toastSuccess(\n          ToastTitle.success,\n          <TransactionSuccessInfo content=\"Settlement added successfully\" txHash={txInfo.hash} />,\n        )\n        setDisabled(false)\n        setTransferVal(0)\n        onUpdatePrepaidInterest(0)\n        await handleUpdatePosition()\n      }\n    } catch (error) {\n      setDisabled(false)\n    }\n  }, [\n    transferVal,\n    leftBalance,\n    onAddPrepaidInterest,\n    toastInfo,\n    toastSuccess,\n    handleUpdatePosition,\n    onUpdatePrepaidInterest,\n    toastError,\n  ])\n\n  return (\n    <>\n      <Methods\n        SelectIcon={AvatarIcon}\n        options={[\n          {\n            token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            balance: walletTokenBalance ? walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol] : 0,\n            symbol: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            icon: ()=> <Logo imgprops={{\n              style: {marginRight: 10}\n            }} token={currentPosition.mintTokenInfo.settlementCurrency.logo} symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol} />,\n            address:  currentPosition.mintTokenInfo.settlementCurrency.address,\n            rightOptionList: [\n              {\n                token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n                symbol: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n                icon: () => <Logo imgprops={{\n                  style: {marginRight: 10}\n                }} token={currentPosition.mintTokenInfo.settlementCurrency.logo} symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol} />,\n                address:  currentPosition.mintTokenInfo.settlementCurrency.address,\n                balance: collateralIndex.prepaidInterest,\n              },\n            ],\n          },\n        ]}\n        rightBalance={collateralIndex.prepaidInterest}\n        leftBalance={leftBalance}\n        rightSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        selectedSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        RightIcon={GuaranteeIcon}\n        leftInputValue={transferVal}\n        rightInputValue={transferVal}\n        selectInput={(e) => {\n          changeTransferVal(e, 0)\n        }}\n        onMax={() => {\n          changeTransferVal({}, 1)\n        }}\n      />\n      <DataWrapper\n        data={[\n          // The Collateral Ratio has not changed\n          [DataIndexName.CollateralRatio, collateralIndex.displayRatio, collateralIndex.displayRatio],\n\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      <Approve\n        style={{ boxShadow: 'none' }}\n        disabled={!approveStatus || isDisabled || !(transferVal > 0)}\n        onClick={approveStatus ? onSubmit : onApprove}\n      >\n        {approveStatus ? 'Submit' : 'Approve'}\n      </Approve>\n    </>\n  )\n}\n\nexport default AddGuaranteeFromAvatar\n","import React from 'react'\nimport { Typography } from '@mui/material/'\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails } from 'components/CommonComponent'\nimport usePanel from 'hooks/usePanel'\nimport NeutralizeComp from 'views/Mint/components/NeutralizeComp'\nimport { useWeb3React } from 'web3-react-core'\nimport AddGuaranteeFromWallet from './AddGuaranteeFromWallet'\nimport AddGuaranteeFromAvatar from './AddGuaranteeFromAvatar'\nimport useHashPowerToken from '../../../hooks/useHashPowerToken'\n\nexport default function CustomizedAccordions(props) {\n  const { approveStatus, onApprove } = props\n  const { active, chainId, account } = useWeb3React()\n  const { walletTokenBalance } = useHashPowerToken()\n  const { expanded, handleChange } = usePanel()\n  return (\n    <Wrapper>\n      <Title>Improve Prepaid Interest Coverage</Title>\n      <Accordion id=\"panel3\" expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Add asset from my wallet to Prepaid Interest</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel3' && (\n            <AddGuaranteeFromWallet\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel4\" expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 2. Transfer asset from Collateral to Prepaid Interest</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel4' && (\n            <AddGuaranteeFromAvatar\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel5\" expanded={expanded === 'panel5'} onChange={handleChange('panel5')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 3. Neutralize outstanding debt</Typography>\n        </AccordionSummary>\n        <AccordionDetails>{expanded === 'panel5' && <NeutralizeComp />}</AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport { Typography } from '@mui/material/'\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails } from 'components/CommonComponent'\nimport { useWeb3React } from 'web3-react-core'\nimport usePanel from 'hooks/usePanel'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport AddGuaranteeFromWallet from './AddGuaranteeFromWallet'\nimport AddCurrencyToAvatar from './AddCurrencyToAvatar'\nimport NetralizeComp from '../../Mint/components/NeutralizeComp'\n\nexport default function ImproveCollateralRatio(props) {\n  const { expanded, handleChange } = usePanel()\n  const { approveStatus, onApprove } = props\n  const { walletTokenBalance } = useHashPowerToken()\n  const { active, chainId, account } = useWeb3React()\n  return (\n    <Wrapper>\n      <Title>Improve Collateral Ratio</Title>\n      <Accordion id=\"panel7\" expanded={expanded === 'panel7'} onChange={handleChange('panel7')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Add asset from my wallet to Prepaid Interest</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel7' && (\n            <AddGuaranteeFromWallet\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel8\" expanded={expanded === 'panel8'} onChange={handleChange('panel8')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 2. Add asset from my wallet to Collateral</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel8' && (\n            <AddCurrencyToAvatar\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel9\" expanded={expanded === 'panel9'} onChange={handleChange('panel9')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 3. Neutralize outstanding debt</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel9' && <NetralizeComp />}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { IconButton, Typography } from '@mui/material/'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\nimport AddIcon from '@mui/icons-material/Add'\nimport uuid from 'uuid/dist/v4'\nimport Methods from 'components/Methods'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Approve,\n  FlexWrap,\n  Title,\n  Wrapper,\n} from 'components/CommonComponent'\nimport DataWrapper from 'components/DataWrapper'\nimport usePanel from 'hooks/usePanel'\nimport { useWeb3React } from 'web3-react-core'\nimport { styled } from '@mui/material/styles'\nimport PositionABI from 'config/abi/Position.json'\nimport { AvatarIcon, Button, DeleteIcon, DroppableIcon } from 'components/uikit'\nimport { getContract } from 'utils/web3React'\nimport { utils } from 'ethers'\nimport useSystemParams from 'hooks/useSystemParams'\nimport contracts from 'config/constants/contracts'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport useToast from 'hooks/useToast'\nimport { useComputedIndexAction, usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport Logo from 'components/Logo'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { findPath, getSwapQuote } from 'config/constants/pool'\nimport { SupportedTokens } from 'config/constants/tokenConfig'\nimport { TransactionSubmittedInfo, TransactionSuccessInfo } from 'components/TransactionInfo'\n\nconst AddBtn = styled(Button)`\n  box-shadow: none !important;\n  width: 34px !important;\n  height: 28px !important;\n  padding: 0 !important;\n  background: linear-gradient(90deg, #62c3f7 0%, #7ae9f1 100%) !important;\n  border-radius: 6px !important;\n  svg {\n    color: #000;\n    width: 16px;\n  }\n`\n\nconst { ActionUser, ActionMulticall } = contracts\nconst ActionUserInterface = new utils.Interface(ActionUser.abi)\nconst ActionMulticallInterface = new utils.Interface(ActionMulticall.abi)\nconst onDragEnd = (result, columns, setColumns, setIsSubmit) => {\n  if (!result.destination) return\n  const { source, destination } = result\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId]\n    const destColumn = columns[destination.droppableId]\n    const sourceItems = [...sourceColumn.items]\n    const destItems = [...destColumn.items]\n    const [removed] = sourceItems.splice(source.index, 1)\n    destItems.splice(destination.index, 0, removed)\n    setColumns([...destColumn, destItems])\n  } else {\n    const copiedItems = [...columns]\n    const [removed] = copiedItems.splice(source.index, 1)\n    copiedItems.splice(destination.index, 0, removed)\n    if (copiedItems.map((it) => it.input > 0).includes(false)) {\n      setIsSubmit(true)\n    } else {\n      setIsSubmit(false)\n    }\n    setColumns(copiedItems)\n  }\n}\n\nconst TradingThrough: React.FC<{\n  onApprove: (callback: (state: boolean) => void) => void\n  approveStatus: boolean\n}> = (props) => {\n  const { onApprove, approveStatus } = props\n  const { chainId } = useWeb3React()\n  const { toastInfo, toastError, toastSuccess } = useToast()\n  const { signer, tokenPools } = useSystemParams()\n  const [columns, setColumns] = useState<\n    {\n      id: string\n      input: number\n      output: number\n      inputToken: {\n        token: SupportedTokens\n        balance: number\n        decimals: number\n        icon: React.FC<JSX.Element>\n        rightOptionList: {\n          token: SupportedTokens\n          balance: number\n          decimals: number\n          icon: React.FC<JSX.Element>\n        }[]\n      }\n      outputToken: { token: SupportedTokens; balance: number; decimals: number; icon: React.FC<JSX.Element> }\n    }[]\n  >([])\n  const [isSubmitStatus, setIsSubmit] = useState(true)\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n  const {\n    onUpdateTotalCollateralValue,\n    newDisplayCollateralRatio,\n    newCollateralRatio,\n    newDisplayPrepaidInterestCoverage,\n  } = useComputedIndexAction()\n  const { handleUpdatePosition } = usePositionAction()\n  const { currentPositionTokenInfo, collateralIndex, currentPosition } = usePositionInfo()\n\n  const tokenList = useMemo<\n    {\n      token: SupportedTokens\n      balance: number\n      decimals: number\n      icon: React.FC<JSX.Element>\n      rightOptionList: {\n        token: SupportedTokens\n        balance: number\n        decimals: number\n        icon: React.FC<JSX.Element>\n      }[]\n    }[]\n  >(() => {\n    if (currentPositionTokenInfo?.tokenPrice) {\n      const { allowedTokens } = currentPositionTokenInfo\n      const list = Object.values(allowedTokens.tokens).map((it) => {\n        const balance =\n          (allowedTokens?.balances &&\n            (toLargeUnits(allowedTokens?.balances[it.symbol] || 0, it.decimals, true) as number)) ||\n          0\n        return {\n          decimals: it.decimals,\n          token: it.symbol,\n          balance,\n          icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={it.logo} symbol={it.symbol} />,\n          rightOptionList: [],\n        }\n      })\n      return list.map((item) => {\n        const rightOptionList = list.filter((it) => it.token !== item.token)\n        return {\n          ...item,\n          rightOptionList: rightOptionList.length ? rightOptionList : [item],\n        }\n      })\n    }\n    return []\n  }, [currentPositionTokenInfo])\n  const addMethods = useCallback(() => {\n    setColumns((state) => {\n      const data = [\n        ...state,\n        {\n          id: uuid(),\n          input: 0,\n          output: 0,\n          inputToken: tokenList[0],\n          outputToken: tokenList[0].rightOptionList[0],\n        },\n      ]\n      if (data.map((it) => it.input > 0).includes(false)) {\n        setIsSubmit(true)\n      } else {\n        setIsSubmit(false)\n      }\n      return data\n    })\n  }, [tokenList])\n  const initColumns = useCallback(() => {\n    if (tokenList.length) {\n      setColumns((state) => {\n        if (state.length) {\n          return state\n        }\n        return [\n          {\n            id: uuid(),\n            input: 0,\n            output: 0,\n            inputToken: tokenList[0],\n            outputToken: tokenList[0].rightOptionList[0],\n          },\n        ]\n      })\n    }\n  }, [tokenList])\n  const onSubmit = useCallback(async () => {\n    const posContract = getContract(signer, PositionABI, currentPosition.positionAddress)\n    try {\n      if (posContract) {\n        const isSubmit = columns.filter((it) => it.input <= 0)\n        if (isSubmit.length) {\n          toastError(ToastTitle.failed, 'Please enter a valid amount')\n          return\n        }\n\n        setIsSubmit(true)\n        const _params = columns.map((it) => {\n          const inputAmount = toSmallUnits(String(it.input), it.inputToken.decimals)\n          const outputAmount = toSmallUnits(String(it.output), it.outputToken.decimals)\n          const { tokenAddressPath } = findPath({\n            chainId,\n            from: it.inputToken.token,\n            to: it.outputToken.token,\n          })\n\n          return [\n            ActionUser.address[chainId],\n            ActionUserInterface.encodeFunctionData('swapExactTokensForTokens', [\n              inputAmount,\n              outputAmount,\n              tokenAddressPath,\n              '999999999999999',\n            ]),\n          ]\n        })\n        const dataMulti = ActionMulticallInterface.encodeFunctionData('multicall', [_params])\n        const transaction = await posContract.delegateCall(ActionMulticall.address[chainId], dataMulti)\n        if (transaction.hash) {\n          toastInfo(\n            ToastTitle.submited,\n            <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={transaction.hash} />,\n          )\n        }\n        const result = await transaction.wait()\n        if (result) {\n          setIsSubmit(true)\n          onUpdateTotalCollateralValue(0)\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSuccessInfo content=\"The transaction has been successfully.\" txHash={transaction.hash} />,\n          )\n          try {\n            await handleUpdatePosition()\n            initColumns()\n          } catch (error) {\n            console.error('handleUpdatePosition>>>>', error)\n          }\n        }\n      }\n    } catch (error: any) {\n      setIsSubmit(false)\n      toastError(\n        'Failed',\n        <FlexWrap style={{ flexDirection: 'column' }}>\n          <p\n            style={{\n              wordBreak: 'break-all',\n            }}\n          >\n            {error.reason}\n          </p>\n        </FlexWrap>,\n      )\n    }\n  }, [\n    signer,\n    currentPosition.positionAddress,\n    columns,\n    chainId,\n    toastError,\n    toastInfo,\n    onUpdateTotalCollateralValue,\n    toastSuccess,\n    handleUpdatePosition,\n    initColumns,\n  ])\n\n  useEffect(() => {\n    initColumns()\n  }, [initColumns])\n  const onChangeInputAmount = useCallback(\n    (\n      e,\n      item: {\n        id: string\n        input: number\n        output: number\n        inputToken: {\n          token: SupportedTokens\n          balance: number\n          decimals: number\n          icon: React.FC<JSX.Element>\n          rightOptionList: {\n            token: SupportedTokens\n            balance: number\n            decimals: number\n            icon: React.FC<JSX.Element>\n          }[]\n        }\n        outputToken: { token: SupportedTokens; balance: number; decimals: number; icon: React.FC<JSX.Element> }\n      },\n    ) => {\n      const value = TokenUtils.formatTokenAmount(Number(e.target.value), item.inputToken.decimals)\n      if (Number(value) > Number.MAX_SAFE_INTEGER) {\n        setIsSubmit(true)\n        return\n      }\n      const res =\n        getSwapQuote(\n          chainId,\n          item.inputToken.token,\n          item.outputToken.token,\n          toSmallUnits(value, item.inputToken.decimals),\n          tokenPools,\n        ) || 0\n      setColumns((state) => {\n        const data = state.map((it) => {\n          const _item = {\n            ...it,\n            input: it.id === item.id ? e.target.value : it.input,\n            output: it.id === item.id ? (toLargeUnits(res, item.outputToken.decimals, true) as number) : it.output,\n          }\n          return _item\n        })\n\n        const actionValSum = data.reduce((acc, curr) => {\n          const next = { ...acc }\n          if (Object.prototype.hasOwnProperty.call(next, curr.inputToken.token)) {\n            next[curr.inputToken.token] += Number(curr.input)\n          } else {\n            next[curr.inputToken.token] = Number(curr.input)\n          }\n          return next\n        }, {} as Record<SupportedTokens, number>)\n\n        if (data.map((it) => it.input > 0 && it.output > 0 && it.input <= it.inputToken.balance).includes(false)) {\n          setIsSubmit(true)\n        } else if (\n          value.indexOf('.') !== -1 &&\n          String(value).slice(value.indexOf('.') + 1).length > item.inputToken.decimals\n        ) {\n          setIsSubmit(true)\n        } else {\n          setIsSubmit(false)\n        }\n\n        if (data.map((it) => it.input > 0).includes(false)) {\n          setIsSubmit(true)\n        } else if (actionValSum[item.inputToken.token] > item.inputToken.balance) {\n          setIsSubmit(true)\n        } else {\n          setIsSubmit(false)\n        }\n        return data\n      })\n    },\n    [chainId, tokenPools],\n  )\n  const onChangeToken = useCallback(\n    (selected, id, type) => {\n      setColumns((state) => {\n        return state.map((item) => {\n          if (item.id === id) {\n            const data = { ...item, [type]: selected }\n            if (data.input) {\n              const res = getSwapQuote(\n                chainId,\n                data.inputToken.token,\n                data.outputToken.token,\n                toSmallUnits(\n                  TokenUtils.formatTokenAmount(data.input, data.inputToken.decimals),\n                  data.inputToken.decimals,\n                ),\n                tokenPools,\n              )\n              data.output = toLargeUnits(res, data.outputToken.decimals, true) as number\n            }\n            return data\n          }\n          return item\n        })\n      })\n    },\n    [chainId, tokenPools],\n  )\n  const onExchange = useCallback((record, index) => {\n    setColumns((state) => {\n      return state.map((item, i) => {\n        if (i === index) {\n          const data: {\n            token: SupportedTokens\n            balance: number\n            decimals: number\n            icon: React.FC<JSX.Element>\n            rightOptionList: {\n              token: SupportedTokens\n              balance: number\n              decimals: number\n              icon: React.FC<JSX.Element>\n            }[]\n          } = {\n            ...item.outputToken,\n            rightOptionList: [],\n          }\n          data.rightOptionList = [...item.inputToken.rightOptionList]\n          data.rightOptionList.push(item.inputToken)\n          data.rightOptionList = data.rightOptionList.filter((it) => it.token !== item.outputToken.token)\n          const target = {\n            ...item,\n            outputToken: item.inputToken,\n            inputToken: { ...data, balance: item.outputToken.balance },\n            input: 0,\n            output: 0,\n          }\n          return { ...target }\n        }\n        return item\n      })\n    })\n  }, [])\n\n  useEffect(() => {\n    const { tokenPrice } = currentPositionTokenInfo\n    if (tokenPrice) {\n      const poolPath = columns.map((it) => ({\n        from: it.inputToken.token,\n        to: it.outputToken.token,\n        fromDecimals: it.inputToken.decimals,\n        toDecimals: it.outputToken.decimals,\n        inputValue: Number(it.input),\n        outputValue: Number(it.output),\n      }))\n      let total = 0\n      poolPath.forEach((item) => {\n        total -=\n          item.inputValue *\n          (toLargeUnits(\n            tokenPrice[item.from].price,\n            currentPosition.mintTokenInfo.settlementCurrency.decimals,\n            true,\n          ) as number)\n        total +=\n          item.outputValue *\n          (toLargeUnits(\n            tokenPrice[item.to].price,\n            currentPosition.mintTokenInfo.settlementCurrency.decimals,\n            true,\n          ) as number)\n      })\n      onUpdateTotalCollateralValue(total)\n    }\n  }, [\n    columns,\n    currentPosition.mintTokenInfo.settlementCurrency.decimals,\n    currentPositionTokenInfo,\n    onUpdateTotalCollateralValue,\n  ])\n  return (\n    <>\n      <DragDropContext onDragEnd={(result) => onDragEnd(result, columns, setColumns, setIsSubmit)}>\n        <Droppable droppableId=\"droppableId\">\n          {(provided) => {\n            return (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                {columns.map((item, index) => {\n                  return (\n                    <Draggable key={item.id} draggableId={item.id} index={index} isDragDisabled={index === 0}>\n                      {(provideds) => {\n                        const amountOut =\n                          (tokenPools.length &&\n                            getSwapQuote(\n                              chainId,\n                              item.inputToken.token,\n                              item.outputToken.token,\n                              toSmallUnits(\n                                TokenUtils.formatTokenAmount(item.input, item.inputToken.decimals) || '1',\n                                item.inputToken.decimals,\n                              ),\n                              tokenPools,\n                            )) ||\n                          0\n                        const price = toLargeUnits(amountOut, item.outputToken.decimals, true) as number\n                        const unitAmountOut = price / (Number(item.input) || 1)\n\n                        const priceStr = TokenUtils.formatFourDecimals(unitAmountOut)\n                        return (\n                          <div\n                            ref={provideds.innerRef}\n                            {...provideds.draggableProps}\n                            {...provideds.dragHandleProps}\n                            style={{\n                              display: 'flex',\n                              alignItems: 'center',\n                              userSelect: 'none',\n                              margin: '0 0 8px 0',\n                              ...provideds.draggableProps.style,\n                              position: 'static',\n                            }}\n                          >\n                            <div style={{ width: '100%', position: 'relative', paddingRight: index <= 0 ? 58 : 0 }}>\n                              <Methods\n                                SelectIcon={AvatarIcon}\n                                leftInputValue={item.input}\n                                rightInputValue={item.output}\n                                isExchange\n                                onExchange={() => {\n                                  onExchange(item, index)\n                                }}\n                                options={tokenList}\n                                leftSelectValue={item.inputToken.token}\n                                leftBalance={item.inputToken.balance}\n                                rightSelectValue={item.outputToken.token}\n                                rightBalance={item.outputToken.balance}\n                                rightOptions={item.inputToken.rightOptionList}\n                                selectedBalance={100}\n                                leftDisableStatus={[false, false]}\n                                RightIcon={AvatarIcon}\n                                rightDisableStatus={[false, true]}\n                                selectInput={(e) => {\n                                  onChangeInputAmount(e, item)\n                                }}\n                                leftChange={(selected) => {\n                                  onChangeToken(selected, item.id, 'inputToken')\n                                }}\n                                rightChange={(selected) => {\n                                  onChangeToken(selected, item.id, 'outputToken')\n                                }}\n                                onMax={() => {\n                                  onChangeInputAmount({ target: { value: item.inputToken.balance } }, item)\n                                }}\n                                leftSymbol={item.inputToken.token}\n                                rightSymbol={item.outputToken.token}\n                              />\n                              <p\n                                style={{\n                                  position: 'absolute',\n                                  bottom: 0,\n                                  right: index <= 0 ? 73 : 15,\n                                  color: 'rgba(0, 0, 0, 0.5)',\n                                  fontSize: 12,\n                                }}\n                              >\n                                {`${1} ${item.inputToken.token}`} ≈ {`${priceStr} ${item.outputToken.token}`}\n                              </p>\n                            </div>\n                            {index > 0 ? (\n                              <>\n                                <IconButton\n                                  onClick={() => {\n                                    const data = [...columns]\n                                    data.splice(index, 1)\n                                    if (data.map((it) => it.input > 0).includes(false)) {\n                                      setIsSubmit(true)\n                                    } else {\n                                      setIsSubmit(false)\n                                    }\n                                    setColumns(data)\n                                  }}\n                                  style={{ cursor: 'pointer', marginTop: 8, marginLeft: 10, padding: 0 }}\n                                >\n                                  <DeleteIcon />\n                                </IconButton>\n                                <IconButton style={{ marginTop: 8, marginLeft: 8, padding: 0 }}>\n                                  <DroppableIcon style={{ fill: 'none' }} />\n                                </IconButton>\n                              </>\n                            ) : null}\n                          </div>\n                        )\n                      }}\n                    </Draggable>\n                  )\n                })}\n                {provided.placeholder}\n              </div>\n            )\n          }}\n        </Droppable>\n      </DragDropContext>\n      <AddBtn onClick={addMethods}>\n        <AddIcon />\n      </AddBtn>\n      <DataWrapper\n        data={[\n          [\n            DataIndexName.CollateralRatio,\n            collateralIndex.displayRatio,\n            `${\n              !(newCollateralRatio === 0 || newCollateralRatio === Number.POSITIVE_INFINITY) ? '≈' : ''\n            } ${newDisplayCollateralRatio}`,\n          ],\n\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={isSubmitStatus} onClick={onSubmit}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nexport default function CustomizedAccordions(props) {\n  const { onApprove, approveStatus } = props\n  const { expanded, handleChange } = usePanel()\n  return (\n    <Wrapper>\n      <Title>Trading through Collateral</Title>\n      <Accordion id=\"panel12\" expanded={expanded === 'panel12'} onChange={handleChange('panel12')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Trading through Collateral</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel12' && <TradingThrough onApprove={onApprove} approveStatus={approveStatus} />}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Typography, Input } from '@mui/material/'\nimport Wallet from 'components/Menu/icons/Wallet'\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails, Approve } from 'components/CommonComponent'\nimport usePanel from 'hooks/usePanel'\nimport { styled } from '@mui/material/styles'\nimport { AvatarIcon, ExchangeArrow, GuaranteeIcon } from 'components/uikit'\nimport { useWeb3React } from 'web3-react-core'\nimport Select from 'components/Select'\nimport DataWrapper from 'components/DataWrapper'\nimport useSystemParams from 'hooks/useSystemParams'\nimport usePosContract from 'hooks/usePosContract'\nimport contracts from 'config/constants/contracts'\nimport { useTransfer } from 'hooks/useManager'\nimport useToast from 'hooks/useToast'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport { useComputedIndexAction, usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport Logo from 'components/Logo'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { chainConfigs, commonTokens, valueToKeyMap } from 'config/constants/tokenConfig'\nimport { getSwapQuote } from 'config/constants/pool'\nimport { TransactionSubmittedInfo, TransactionSuccessInfo } from 'components/TransactionInfo'\nimport { ethers } from 'ethers'\nimport PositionABI from 'config/abi/Position.json'\n\nconst MethodsWrap = styled('div')`\n  .balance_info {\n    display: flex;\n    align-content: center;\n    padding: 0 12px;\n    margin-bottom: 6px;\n    .label {\n      color: #000;\n      font-size: 14px;\n      font-family: PingFangSC-Medium, sans-serif;\n    }\n    span {\n      font-family: PingFangSC-Medium, sans-serif;\n      font-weight: 400;\n      font-size: 12px;\n      line-height: 17px;\n      color: rgba(0, 0, 0, 0.5);\n      margin-left: 7px;\n    }\n  }\n  .content {\n    display: flex;\n    height: 50px;\n    background: rgba(255, 255, 255, 0.4);\n    border: 1px solid rgba(207, 216, 226, 0.5);\n    box-sizing: border-box;\n    border-radius: 11px;\n    padding: 0 12px;\n    .select_custom {\n      margin: 0;\n      padding: 0;\n      border: none;\n      background: unset;\n      width: 200px;\n      flex-shrink: 0;\n    }\n    .select_custom:nth-of-type(2) {\n      width: 130px;\n    }\n    .MuiInput-root,\n    .MuiInput-input {\n      text-align: right;\n      width: 100%;\n      border: none;\n      &:before,\n      &:after {\n        display: none;\n      }\n    }\n    .MuiInput-input {\n      padding: 0 8px;\n      border-left: 1px solid rgba(207, 216, 226, 0.5) !important;\n\n      &::-webkit-inner-spin-button {\n        display: none;\n      }\n    }\n  }\n  .func {\n    font-size: 12px;\n    line-height: 17px;\n    color: #6ed6f3;\n    text-align: right;\n    padding: 0 20px;\n    margin-top: 3px;\n    cursor: pointer;\n    user-select: none;\n  }\n`\n\nenum AccountType {\n  'MyWallet' = 'My Wallet',\n  'Standard' = 'Collateral',\n  'Settlement' = 'Prepaid Interest',\n}\n\nconst accountCategoryList = [\n  {\n    type: AccountType.MyWallet,\n    token: 'My Wallet',\n    id: 'd04155c3-eb41-4c44-b28d-67bb2d515904',\n    icon: Wallet,\n  },\n  {\n    type: AccountType.Settlement,\n    token: 'Prepaid Interest',\n    icon: GuaranteeIcon,\n    id: 'edebd20e-18a1-4bc8-a869-9b44537d810c',\n  },\n  {\n    type: AccountType.Standard,\n    token: 'Collateral',\n    icon: AvatarIcon,\n    id: '763c1484-3fd3-4044-b8b5-3c261947f414',\n  },\n]\n\nconst { ActionUser } = contracts\n\nconst ActionUserInterface = new ethers.utils.Interface(ActionUser.abi)\nconst getTokenDecimals = (symbol: string) => {\n  const key = valueToKeyMap[symbol]\n  return commonTokens[key].decimals\n}\n\nexport default function GeneralTransfer(props) {\n  const { approveStatus, onApprove } = props\n  const [gDisStatus, setGDisStatus] = useState(true)\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n\n  const { signer, tokenPools } = useSystemParams()\n  const { walletTokenBalance, setRefresh } = useHashPowerToken()\n  const [trading, setTrading] = useState(false)\n  const { toastInfo, toastSuccess, toastError } = useToast()\n\n  const { currentPosition, currentPositionTokenInfo, collateralIndex } = usePositionInfo()\n  const {\n    onUpdateCollateralValue,\n    onUpdatePrepaidInterest,\n    newDisplayCollateralRatio,\n    newDisplayPrepaidInterestCoverage,\n    newCollateralRatio,\n    newPrepaidInterestCoverage,\n  } = useComputedIndexAction()\n  const { handleUpdatePosition } = usePositionAction()\n\n  const [actionData, setActionData] = useState([\n    {\n      accountType: AccountType.MyWallet,\n      tokenType: currentPosition.mintTokenInfo.symbol,\n      transferVal: 0,\n      id: '1fee1a14-b8b3-4b73-b2be-1817a6d228ec',\n      tokenSelectDisabled: false,\n      list: [...accountCategoryList],\n      token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n      decimals: currentPosition.mintTokenInfo.settlementCurrency.decimals,\n    },\n    {\n      accountType: AccountType.Standard,\n      tokenType: currentPosition.mintTokenInfo.symbol,\n      transferVal: 0,\n      id: '25897dcf-e843-4630-a5e1-309dc10cb1e5',\n      tokenSelectDisabled: true,\n      list: [...accountCategoryList],\n      token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n      decimals: currentPosition.mintTokenInfo.settlementCurrency.decimals,\n    },\n  ])\n\n  const avatarAssetList = useMemo(() => {\n    if (currentPositionTokenInfo.allowedTokens) {\n      const { balances, tokens } = currentPositionTokenInfo.allowedTokens\n      console.log('tokens', tokens)\n      return Object.keys(balances).reduce((acc, key) => {\n        console.log('key', key)\n        return {\n          ...acc,\n          [key]: tokens[key] ? (toLargeUnits(balances[key], tokens[key].decimals, true) as number) : 0,\n        }\n      }, {})\n    }\n    return Object.keys(valueToKeyMap).reduce((acc, key) => {\n      return {\n        ...acc,\n        [key]: 0,\n      }\n    }, {})\n  }, [currentPositionTokenInfo.allowedTokens])\n\n  const tokenList = useMemo(() => {\n    if (currentPositionTokenInfo.allowedTokens) {\n      const { tokens } = currentPositionTokenInfo.allowedTokens\n      return Object.keys(tokens).map((key) => {\n        return {\n          token: key,\n          decimals: tokens[key].decimals,\n          address: tokens[key].address,\n          icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={tokens[key].logo} symbol={key} />,\n        }\n      })\n    }\n    return []\n  }, [currentPositionTokenInfo.allowedTokens])\n\n  const transfer = useTransfer()\n  const { expanded, handleChange } = usePanel()\n  const { chainId, account } = useWeb3React()\n\n  const onChangeVal = useCallback(({ target }, record) => {\n    const { value } = target\n    setActionData((state) => {\n      const data = state.map((item) => ({ ...item, transferVal: value }))\n      return data\n    })\n  }, [])\n\n  const onSubmit = useCallback(async () => {\n    setTrading(true)\n\n    let data = null\n    let isTransfer = false\n    const transferTransactions = []\n    const [transferData, recviceTarget] = actionData\n    const { tokenType: tokenSymbol, accountType, transferVal } = transferData\n    const transferDecimals = getTokenDecimals(tokenSymbol)\n    const transferAmount = toSmallUnits(TokenUtils.formatTokenAmount(transferVal, transferDecimals), transferDecimals)\n    const tokenAddress = chainConfigs[chainId].tokens[valueToKeyMap[tokenSymbol]].address\n    if (transferAmount.isZero()) {\n      return\n    }\n\n    const handleResult = async (txInfo) => {\n      const result = await txInfo.wait()\n      if (result) {\n        toastSuccess(\n          ToastTitle.success,\n          <TransactionSuccessInfo content=\"The transaction has been successfully.\" txHash={result.hash} />,\n        )\n        setTrading(false)\n        setGDisStatus(true)\n        onChangeVal({ target: { value: 0 } }, null)\n        await handleUpdatePosition()\n      }\n    }\n\n    const handleError = ({ message, reason }) => {\n      toastError('Failed', `${reason || message}`)\n      setTrading(false)\n    }\n\n    const handleAllSettled = (results) => {\n      console.log('results :>> ', results)\n      setTrading(false)\n      results.forEach((result) => {\n        if (result.status === 'rejected') {\n          toastError(ToastTitle.failed, result.reason?.reason || result.reason?.message)\n        } else {\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSuccessInfo\n              content=\"The transaction has been successfully.\"\n              txHash={result.value.transactionHash}\n            />,\n          )\n          setRefresh((state) => !state)\n        }\n      })\n    }\n\n    const submitTransaction = async (_data: string) => {\n      try {\n        const positionContract = new ethers.Contract(currentPosition.positionAddress, PositionABI, signer)\n        const txInfo = await positionContract.delegateCall(ActionUser.address[chainId], _data)\n        if (txInfo) {\n          toastInfo(\n            ToastTitle.submited,\n            <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n          )\n          await handleResult(txInfo)\n        }\n      } catch (error) {\n        handleError(error as any)\n      }\n    }\n\n    if (accountType === AccountType.MyWallet) {\n      if (recviceTarget.accountType === AccountType.Settlement) {\n        data = ActionUserInterface.encodeFunctionData('addGuarantee', [transferAmount, false])\n      } else if (recviceTarget.accountType === AccountType.Standard) {\n        transferTransactions.push(transfer(account, tokenAddress, currentPosition.positionAddress, transferAmount))\n        isTransfer = true\n      }\n    } else if (accountType === AccountType.Standard) {\n      if (recviceTarget.accountType === AccountType.MyWallet) {\n        data = ActionUserInterface.encodeFunctionData('withdrawAsset', [tokenAddress, account, transferAmount])\n      } else if (recviceTarget.accountType === AccountType.Settlement) {\n        data = ActionUserInterface.encodeFunctionData('addGuarantee', [transferAmount, true])\n      }\n    } else if (accountType === AccountType.Settlement) {\n      if (recviceTarget.accountType === AccountType.MyWallet) {\n        data = ActionUserInterface.encodeFunctionData('moveGuarantee', [account, transferAmount])\n      } else if (recviceTarget.accountType === AccountType.Standard) {\n        data = ActionUserInterface.encodeFunctionData('moveGuarantee', [\n          currentPosition.positionAddress,\n          transferAmount,\n        ])\n      }\n    }\n\n    if (!isTransfer && data) {\n      await submitTransaction(data)\n    } else {\n      Promise.allSettled(transferTransactions)\n        .then(handleAllSettled)\n        .catch((e) => {\n          console.log('e :>> ', e)\n          toastError(ToastTitle.failed, e.reason)\n          setTrading(false)\n        })\n    }\n  }, [\n    actionData,\n    chainId,\n    toastSuccess,\n    onChangeVal,\n    handleUpdatePosition,\n    toastError,\n    setRefresh,\n    currentPosition.positionAddress,\n    signer,\n    toastInfo,\n    transfer,\n    account,\n  ])\n\n  useEffect(() => {\n    const [send, recive] = actionData\n    switch (send.accountType) {\n      case AccountType.MyWallet:\n        if (recive.accountType === AccountType.Settlement) {\n          onUpdatePrepaidInterest(send.transferVal)\n        } else {\n          onUpdateCollateralValue({\n            symbol: send.tokenType as any,\n            value: Number(send.transferVal),\n          })\n        }\n        break\n      case AccountType.Standard:\n        if (recive.accountType === AccountType.MyWallet) {\n          const value = Number(send.transferVal)\n          onUpdateCollateralValue({\n            symbol: send.tokenType as any,\n            value: value ? Number(`-${value}`) : value,\n          })\n        } else {\n          const value = Number(send.transferVal)\n          onUpdateCollateralValue({\n            symbol: send.tokenType as any,\n            value: value ? Number(`-${value}`) : value,\n          })\n          onUpdatePrepaidInterest(send.transferVal)\n        }\n        break\n      case AccountType.Settlement:\n        if (recive.accountType === AccountType.MyWallet) {\n          const value = Number(send.transferVal)\n          onUpdatePrepaidInterest(value ? Number(`-${value}`) : value)\n        } else {\n          const value = Number(send.transferVal)\n          onUpdatePrepaidInterest(value ? Number(`-${value}`) : value)\n          onUpdateCollateralValue({\n            symbol: send.tokenType as any,\n            value: Number(send.transferVal),\n          })\n        }\n        break\n      default:\n        console.log(1)\n    }\n  }, [actionData, onUpdateCollateralValue, onUpdatePrepaidInterest])\n\n  const onChangeAccount = useCallback(\n    (val, record, i) => {\n      setActionData((state) => {\n        const data = state.map((item) => ({\n          ...item,\n          accountType: item.id === record.id ? val : item.accountType,\n          tokenType:\n            val === AccountType.Settlement ? currentPosition.mintTokenInfo.settlementCurrency.symbol : item.tokenType,\n          transferVal: Number(),\n        }))\n        if (i === 0) {\n          data[1].list = accountCategoryList.filter((it) => it.type !== data[0].accountType)\n          data[0].tokenSelectDisabled = data[0].accountType === AccountType.Settlement\n        }\n        return data\n      })\n    },\n    [currentPosition.mintTokenInfo.settlementCurrency.symbol],\n  )\n\n  const onChangeToken = useCallback(\n    (val, __index) => {\n      setActionData((state) => {\n        const nextState = state.map((it) => ({ ...it, tokenType: val, transferVal: Number() }))\n\n        if (val !== currentPosition.mintTokenInfo.settlementCurrency.symbol) {\n          nextState[1].list = nextState[1].list.filter((it) => it.type !== AccountType.Settlement)\n        } else {\n          const settlement = accountCategoryList.find((it) => it.type === AccountType.Settlement)\n          const _index = nextState[1].list.findIndex((it) => it.type === AccountType.Settlement)\n          if (!(_index > -1)) {\n            nextState[1].list.push(settlement)\n          }\n        }\n        return nextState\n      })\n    },\n    [currentPosition.mintTokenInfo.settlementCurrency.symbol],\n  )\n\n  const onMax = useCallback(\n    (record) => {\n      setActionData((state) => {\n        const data = [...state]\n        /* \n          1. wallet send to collateral //// add collateral（transfer）   Total assets increase, prepaid interest remains unchanged, margin ratio increases, and the number of days covered by prepaid interest remains the same.\n          2. wallet send to prepaid interest       // addGuarantee｜    Total assets increase, prepaid interest increases, margin ratio increases, and the number of days covered by prepaid interest remains the same.\n          3. collateral send to wallet //           withdrawAsset｜     Total assets decrease, prepaid interest remains unchanged, margin ratio decreases, and the number of days covered by prepaid interest remains the same.\n          4. collateral send to prepaid interest // addGuarantee |      Total assets remain unchanged, prepaid interest increases, margin ratio remains unchanged, and the number of days covered by prepaid interest increases.\n          5. prepaid interest send to wallet /// moveGuarantee |        Total assets decrease, prepaid interest decreases, margin ratio decreases, and the number of days covered by prepaid interest decreases.\n          6. prepaid interest send to collateral /// add collateral ||  Total assets remain unchanged, prepaid interest decreases, margin ratio remains unchanged, and the number of days covered by prepaid interest decreases.\n          */\n        const { settlementCurrency } = currentPosition.mintTokenInfo\n        const { shortBalanceValue, estimatedDailyDebt, collateralValue } = currentPosition.positionStatus\n        const tokenTypeDecimals = getTokenDecimals(record.tokenType)\n        if (record.accountType === AccountType.MyWallet) {\n          const balance = walletTokenBalance[record.tokenType] || 0\n          data[0].transferVal = balance\n          if (data[1].accountType === AccountType.Standard) {\n            data[1].transferVal = balance + avatarAssetList[record.tokenType]\n          }\n          if (data[1].accountType === AccountType.Settlement) {\n            data[1].transferVal = balance + collateralIndex.prepaidInterest\n          }\n          // data[1].transferVal = balance\n        } else if (record.accountType === AccountType.Standard) {\n          const collateralAssets = avatarAssetList[record.tokenType] || 0\n          const maxActionTotalAssets = Number(\n            TokenUtils.formatTokenAmount(1.2 * Number(toLargeUnits(shortBalanceValue, settlementCurrency.decimals)), 0),\n          )\n          if (collateralAssets > 0) {\n            if (maxActionTotalAssets === 0) {\n              data[0].transferVal = collateralAssets\n              if (data[1].accountType === AccountType.MyWallet) {\n                data[1].transferVal = collateralAssets + walletTokenBalance[record.tokenType]\n              }\n              if (data[1].accountType === AccountType.Settlement) {\n                data[1].transferVal = collateralAssets + collateralIndex.prepaidInterest\n              }\n              return data\n            }\n            const maxCollateralTransfer = maxActionTotalAssets - collateralIndex.prepaidInterest\n            if (data[1].accountType === AccountType.Settlement) {\n              // If the calculated maximum value exceeds the asset value, use the asset value instead.\n              if (maxCollateralTransfer > collateralAssets) {\n                data[0].transferVal = collateralAssets\n                // data[1].transferVal = collateralAssets\n              } else {\n                data[0].transferVal = maxCollateralTransfer\n                // data[1].transferVal = maxCollateralTransfer\n              }\n            }\n            if (data[1].accountType === AccountType.MyWallet) {\n              const amountOutPrice = getSwapQuote(\n                chainId,\n                record.tokenType,\n                settlementCurrency.symbol,\n                toSmallUnits(collateralAssets, tokenTypeDecimals),\n                tokenPools,\n              )\n              const otherTokenWbtc = collateralValue.sub(amountOutPrice)\n              const actionCurrentMaxValue =\n                maxCollateralTransfer - Number(toLargeUnits(otherTokenWbtc, settlementCurrency.decimals))\n\n              const amountInCurrentMaxValue = getSwapQuote(\n                chainId,\n                settlementCurrency.symbol,\n                record.tokenType,\n                toSmallUnits(\n                  TokenUtils.formatTokenAmount(actionCurrentMaxValue, settlementCurrency.decimals),\n                  settlementCurrency.decimals,\n                ),\n                tokenPools,\n              )\n              // Calculate the maximum operable value for the current cryptocurrency.\n              const maxTransterCurrentToken = toLargeUnits(amountInCurrentMaxValue, tokenTypeDecimals, true) as number\n              // If the calculated maximum value exceeds the asset value, use the asset value.\n              if (maxTransterCurrentToken > collateralAssets) {\n                data[0].transferVal = collateralAssets\n                // data[1].transferVal = collateralAssets\n              } else if (maxTransterCurrentToken > 0) {\n                data[0].transferVal = Math.floor(collateralAssets - maxTransterCurrentToken)\n                // data[1].transferVal = Math.floor(collateralAssets - maxTransterCurrentToken)\n              } else {\n                data[0].transferVal = collateralAssets\n                // data[1].transferVal = collateralAssets\n              }\n            }\n            if (data[1].accountType === AccountType.MyWallet) {\n              data[1].transferVal = data[0].transferVal + walletTokenBalance[record.tokenType]\n            }\n            if (data[1].accountType === AccountType.Settlement) {\n              data[1].transferVal = data[0].transferVal + collateralIndex.prepaidInterest\n            }\n          }\n        } else if (record.accountType === AccountType.Settlement) {\n          if (data[1].accountType === AccountType.MyWallet) {\n            const maxPrepaidInterest =\n              20 * Number(toLargeUnits(estimatedDailyDebt.toNumber(), settlementCurrency.decimals))\n            const maxActionPrepaidInterest = collateralIndex.prepaidInterest - maxPrepaidInterest\n\n            if (maxActionPrepaidInterest > 0) {\n              data[0].transferVal = Number(\n                TokenUtils.formatTokenAmount(maxActionPrepaidInterest, settlementCurrency.decimals),\n              )\n            }\n          }\n          if (data[1].accountType === AccountType.Standard) {\n            const maxPrepaidInterest =\n              20 * Number(toLargeUnits(estimatedDailyDebt.toNumber(), settlementCurrency.decimals))\n            const maxActionPrepaidInterest = collateralIndex.prepaidInterest - maxPrepaidInterest\n            if (maxActionPrepaidInterest > 0) {\n              data[0].transferVal = maxActionPrepaidInterest\n            }\n          }\n          if (data[1].accountType === AccountType.MyWallet) {\n            data[1].transferVal = data[0].transferVal + walletTokenBalance[record.tokenType]\n          }\n          if (data[1].accountType === AccountType.Standard) {\n            data[1].transferVal = data[0].transferVal + avatarAssetList[record.tokenType]\n          }\n        }\n        data[1].transferVal = Number(TokenUtils.formatFourDecimals(data[1].transferVal))\n        return data\n      })\n    },\n    [\n      avatarAssetList,\n      chainId,\n      collateralIndex,\n      currentPosition.mintTokenInfo,\n      currentPosition.positionStatus,\n      tokenPools,\n      walletTokenBalance,\n    ],\n  )\n\n  useEffect(() => {\n    setActionData((state) => {\n      return [\n        state[0],\n        {\n          ...state[1],\n          list: accountCategoryList.filter((it) => it.type !== state[0].accountType),\n        },\n      ]\n    })\n  }, [])\n\n  useEffect(() => {\n    if (trading) {\n      setGDisStatus(true)\n      return\n    }\n    const [left] = actionData\n    const { decimals } = left\n    if (!left || !decimals) return\n    let leftBalance = 0\n    const { transferVal } = left\n    const transferAmout = toSmallUnits(\n      TokenUtils.formatTokenAmount(transferVal, commonTokens[valueToKeyMap[left.tokenType]].decimals),\n      commonTokens[valueToKeyMap[left.tokenType]].decimals,\n    )\n    if (transferAmout.isZero()) {\n      setGDisStatus(true)\n      return\n    }\n    if (left.accountType === AccountType.MyWallet) {\n      leftBalance = walletTokenBalance[left.tokenType] || 0\n    }\n    if (left.accountType === AccountType.Settlement || left.accountType === AccountType.Standard) {\n      if (left.accountType === AccountType.Settlement) {\n        // if ()\n        const { interestGuaranteed } = currentPosition.positionStatus\n        if (transferAmout.gt(interestGuaranteed)) {\n          setGDisStatus(true)\n          return\n        }\n      }\n      if (left.accountType === AccountType.Standard) {\n        const val = avatarAssetList[left.tokenType] || 0\n        if (transferVal > val) {\n          setGDisStatus(true)\n          return\n        }\n      }\n      if (newCollateralRatio < 120 || newPrepaidInterestCoverage < 20) {\n        setGDisStatus(true)\n      } else {\n        setGDisStatus(false)\n      }\n      return\n    }\n\n    if (left.transferVal <= 0 || left.transferVal > leftBalance || trading) {\n      setGDisStatus(true)\n    } else {\n      setGDisStatus(false)\n    }\n  }, [\n    actionData,\n    avatarAssetList,\n    currentPosition.positionStatus,\n    newCollateralRatio,\n    newPrepaidInterestCoverage,\n    trading,\n    walletTokenBalance,\n  ])\n\n  return (\n    <Wrapper>\n      <Title>General Transfer</Title>\n      <Accordion id=\"panel15\" expanded={expanded === 'panel15'} onChange={handleChange('panel15')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Freestyle Transfer</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {actionData.map((item, index) => {\n            let avatarAssetBalance = (avatarAssetList && avatarAssetList[item.tokenType]) || 0\n            let walletAssetBalance = (walletTokenBalance && walletTokenBalance[item.tokenType]) || 0\n            if (String(avatarAssetBalance).includes('.')) {\n              avatarAssetBalance = TokenUtils.formatFourDecimals(avatarAssetBalance)\n            }\n\n            if (String(walletAssetBalance).includes('.')) {\n              walletAssetBalance = TokenUtils.formatFourDecimals(walletAssetBalance)\n            }\n\n            return (\n              <div key={item.id}>\n                <MethodsWrap>\n                  <div className=\"balance_info\">\n                    <span className=\"label\">Balance: </span>\n                    {item.accountType === AccountType.Standard && (\n                      <span>\n                        {avatarAssetBalance} {item.tokenType}\n                      </span>\n                    )}\n                    {item.accountType === AccountType.MyWallet && (\n                      <span>\n                        {walletAssetBalance} {item.tokenType}\n                      </span>\n                    )}\n                    {item.accountType === AccountType.Settlement && (\n                      <span>\n                        {TokenUtils.formatFourDecimals(collateralIndex.prepaidInterest)}{' '}\n                        {currentPosition.mintTokenInfo.settlementCurrency.symbol}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"content\">\n                    <Select\n                      options={item.list}\n                      onChange={(val) => {\n                        onChangeAccount(val, item, index)\n                      }}\n                      selectValue={item.accountType}\n                    />\n                    <Select\n                      options={tokenList}\n                      onChange={(val) => {\n                        onChangeToken(val, index)\n                      }}\n                      selectValue={item.tokenType}\n                      selectDisabled={index === 1 ? true : item.tokenSelectDisabled}\n                    />\n                    <Input\n                      value={item.transferVal}\n                      type=\"number\"\n                      onChange={(event) => {\n                        const inputValue = event.target.value\n                        let formattedValue = ''\n                        const cleanedValue = inputValue.replace(/[^\\d.]/g, '')\n                        if (cleanedValue.includes('.')) {\n                          const parts = cleanedValue.split('.')\n                          parts[1] = parts[1]?.slice(0, commonTokens[valueToKeyMap[item.tokenType]].decimals)\n                          formattedValue = parts.join('.')\n                        } else {\n                          formattedValue = cleanedValue\n                        }\n                        if (Number(formattedValue) > 100000000) {\n                          formattedValue = '100000000'\n                        }\n                        onChangeVal({ target: { value: formattedValue } }, item)\n                      }}\n                      disabled={index === 1}\n                    />\n                  </div>\n\n                  <div hidden={index === 1} className=\"func\">\n                    <span\n                      onClick={() => {\n                        onMax(item)\n                      }}\n                      onKeyUp={() => null}\n                      tabIndex={0}\n                      role=\"button\"\n                    >\n                      Max\n                    </span>\n                  </div>\n                </MethodsWrap>\n\n                {index === 0 ? (\n                  <div style={{ display: 'flex', alignItems: 'center', height: 30, justifyContent: 'center' }}>\n                    <ExchangeArrow\n                      onClick={() => {\n                        setActionData((state) => {\n                          const list1 = state[0]\n                          const list2 = state[1]\n                          const data = state.reverse()\n                          return data.map((it, i) => ({\n                            ...it,\n                            list:\n                              i === 0\n                                ? list1.list\n                                : accountCategoryList.filter((ele) => ele.type !== list2.accountType),\n                            tokenSelectDisabled: i === 0 ? list1.tokenSelectDisabled : list2.tokenSelectDisabled,\n                          }))\n                        })\n                      }}\n                      style={{ fill: 'none', transform: 'rotate(90deg)', cursor: 'pointer', width: 22 }}\n                    />\n                  </div>\n                ) : null}\n              </div>\n            )\n          })}\n          <DataWrapper\n            data={[\n              [DataIndexName.CollateralRatio, collateralIndex.displayRatio, newDisplayCollateralRatio],\n              [\n                DataIndexName.PrepaidInterestCoverage,\n                collateralIndex.displayCoverage,\n                newDisplayPrepaidInterestCoverage,\n              ],\n            ]}\n          />\n          {approveStatus ? (\n            <Approve style={{ boxShadow: 'none' }} disabled={gDisStatus} onClick={onSubmit}>\n              Submit\n            </Approve>\n          ) : (\n            <Approve\n              style={{ boxShadow: 'none' }}\n              disabled={approveBtnStatus}\n              onClick={() => {\n                onApprove((state) => {\n                  setApproveBtnStatus(state)\n                })\n              }}\n            >\n              Approve\n            </Approve>\n          )}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","/* eslint-disable no-nested-ternary */\nimport React, { MutableRefObject, useCallback, useEffect, useMemo, useState } from 'react'\nimport { useWeb3React } from 'web3-react-core'\nimport { Link, withRouter } from 'react-router-dom'\nimport { styled } from '@mui/material/styles'\nimport { Grid } from '@mui/material'\nimport Slide from 'components/Slide'\nimport Select from 'components/Select'\nimport Card from 'components/Card'\nimport { ArrowLine, Fbtc20Icon } from 'components/uikit'\nimport { FlexWrap, ScrollWrapper } from 'components/CommonComponent'\nimport CopyToClipboard from 'components/uikit/components/WalletModal/CopyToClipboard'\nimport { useApprove, useCheckApprove } from 'hooks/useApprove'\nimport useToast from 'hooks/useToast'\nimport Assets from 'assets'\nimport SubTitle from 'components/SubTitle'\nimport { TokenUtils, toLargeUnits } from 'utils/transformHelper'\nimport { usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport Logo from 'components/Logo'\nimport { mintTokenChainConfigs, MintTokenKey } from 'config/constants/mintToken'\nimport { SupportedChainId } from 'config/constants/chains'\nimport { isSupportedChainId } from 'utils/web3React'\nimport { Infinite, ToastTitle } from 'config/constants/contants'\nimport { TransactionSuccessInfo } from 'components/TransactionInfo'\nimport { LiquidationThresholdValue } from '../../../config/constants/thresholdValue'\nimport Title from './Title'\nimport BeforeMintAction from './BeforeMintAction'\nimport WithdrawCollateral from './WithdrawCollateral'\nimport ImproveGuaranteeDays from './ImproveGuaranteeDays'\nimport ImproveCollateralRatio from './ImproveCollateralRatio'\nimport TradingThroughAvatar from './TradingThroughAvatar'\nimport GeneralTransfer from './GeneralTransfer'\nimport usePanel from '../../../hooks/usePanel'\n\nconst Box = styled('div')`\n  box-sizing: border-box;\n  margin-top: 18px;\n  padding-right: 44px;\n  overflow: auto;\n\n  & > .MuiGrid-root {\n    min-width: 1024px;\n  }\n\n  .account_panel {\n    height: calc(100vh - 189px);\n    padding-bottom: 100px;\n    overflow: auto;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n\n  .asset_info {\n    padding: 0;\n    margin-top: 26px;\n  }\n`\nconst CardWrap = styled(Card)`\n  position: relative;\n  padding: 23px 0;\n  display: flex;\n  margin-bottom: 20px;\n\n  .avatar_info {\n    .avatar {\n      font-family: PingFangSC-Regular, sans-serif;\n      font-size: 12px;\n      line-height: 17px;\n      color: #000000;\n\n      & + svg {\n        margin-left: 10px;\n      }\n    }\n  }\n\n  .token_item {\n    justify-content: space-between;\n    align-items: center;\n    padding: 16px 0;\n\n    svg {\n      margin-right: 10px;\n\n      & + span {\n        margin-top: 5px;\n      }\n    }\n\n    .balance {\n      font-family: PingFangSC-Regular, sans-serif;\n\n      span:first-of-type {\n        font-size: 14px;\n        line-height: 20px;\n      }\n\n      span:last-of-type {\n        font-size: 12px;\n        line-height: 17px;\n        color: #747879;\n      }\n    }\n  }\n`\nconst TipPanel = styled('div')`\n  width: 50%;\n  padding: 0 30px 0 40px;\n  display: flex;\n  justify-content: space-between;\n\n  font-family: PingFangSC-Semibold, sans-serif;\n\n  > div {\n    width: calc(100% - 50px);\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 0.2px;\n    height: 70%;\n    background-color: #2da3ff;\n  }\n\n  h2 {\n    font-family: PingFangSC-Semibold, sans-serif;\n    font-weight: 550;\n    font-size: 1rem;\n    line-height: 22px;\n    color: #000000;\n  }\n\n  .num {\n    font-family: PingFangSC-Semibold, sans-serif;\n    font-weight: 550;\n    font-size: 50px;\n    line-height: 1;\n    color: #6ed6f3;\n    display: flex;\n    align-items: flex-end;\n    margin-bottom: 20px;\n    margin-top: 15px;\n    width: 100%;\n\n    span {\n      font-family: PingFangSC-Regular, sans-serif;\n      display: block;\n      max-width: 80%;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    sub {\n      margin-bottom: 5px;\n      font-size: 20px;\n      font-weight: 500;\n    }\n  }\n\n  .tip {\n    font-size: 12px;\n    line-height: 17px;\n    color: rgba(0, 0, 0, 0.5);\n  }\n\n  .num.guarantee {\n    color: #efd71e;\n  }\n`\nconst TipWrap = styled(CardWrap)`\n  padding: 23px 0 !important;\n`\n\nconst CollateralInfoWrap = styled('div')`\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.4);\n  box-shadow: 0 4px 27px rgba(0, 0, 0, 0.03);\n  border-radius: 8px;\n  margin-bottom: 20px;\n  .m_title {\n    font-size: 22px;\n    line-height: 31px;\n    font-weight: 500;\n    font-family: PingFangSC-Medium, sans-serif;\n    margin-bottom: 13px;\n  }\n  .list {\n    background: rgba(42, 161, 255, 0.07);\n    border-radius: 8px;\n    padding: 16px 16px 0;\n    margin-bottom: 18px;\n  }\n  .item {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    svg {\n      margin-right: 10px;\n    }\n    .item_title {\n      font-size: 18px;\n      font-family: PingFangSC-Semibold, sans-serif;\n      font-weight: 550;\n      line-height: 25px;\n      display: flex;\n      align-items: center;\n      margin-bottom: 20px;\n      img {\n        width: 24px;\n        margin-right: 10px;\n      }\n    }\n    .icon_symbol {\n      display: flex;\n      align-items: center;\n      font-family: PingFangSC-Medium, sans-serif;\n      font-weight: 500;\n      font-size: 14px;\n    }\n    span {\n      font-family: PingFangSC-Regular, sans-serif;\n      font-size: 14px;\n    }\n    &.currency {\n      padding: 22px 0;\n      border-top: 0.5px solid rgba(0, 0, 0, 0.13);\n    }\n    &.item_head {\n      padding-bottom: 14px;\n      span {\n        font-family: PingFangSC-Medium, sans-serif;\n        font-weight: 500;\n        font-size: 12px;\n        line-height: 17px;\n        color: rgba(0, 0, 0, 0.6);\n      }\n    }\n    .balance span {\n      line-height: 20px;\n      &:last-of-type {\n        opacity: 0.5;\n      }\n    }\n  }\n  .avatar .currency {\n    padding: 15px 0;\n  }\n  .avatar_address {\n    display: flex;\n    align-items: center;\n    padding-left: 16px;\n    line-height: 17px;\n    * {\n      font-size: 12px;\n      font-weight: normal !important;\n      color: #000 !important;\n      font-family: PingFangSC-Regular, sans-serif !important;\n    }\n  }\n\n  .asset_list_title {\n    font-family: PingFangSC-Medium, sans-serif;\n    font-weight: 500;\n    font-size: 22px;\n    line-height: 22px;\n    color: #000000;\n    margin-bottom: 22px;\n  }\n  .outstandingDebt {\n    span {\n      font-size: 14px;\n    }\n    div {\n      font-family: PingFangSC-Medium, sans-serif;\n      font-weight: 500;\n      margin-bottom: 5px;\n      svg {\n        margin-right: 10px;\n      }\n    }\n    span:last-of-type {\n      font-family: PingFangSC-Regular, sans-serif;\n      font-weight: 400;\n    }\n  }\n`\nconst getValueColor = (value: number) =>\n  value * 1 >= 400 ? 'rgb(29, 202, 218)' : value * 1 > 200 ? 'rgb(255, 204, 4)' : 'rgb(255, 99, 8)'\n\nfunction Manage() {\n  const oBox: MutableRefObject<any> = React.useRef()\n  const { expanded } = usePanel()\n  const [approveStatus, setApproveStatus] = useState(false)\n\n  const { currentPosition, currentPositionTokenInfo, currentMintToken } = usePositionInfo()\n  const { handleChangeCurrentPosition } = usePositionAction()\n  const { account, chainId } = useWeb3React()\n  const { toastSuccess, toastError, toastWarning } = useToast()\n  // change manager\n  const onChange = useCallback(\n    (val) => {\n      handleChangeCurrentPosition(val)\n    },\n    [handleChangeCurrentPosition],\n  )\n  const { handleApprove } = useApprove(account, currentPosition?.mintTokenInfo.settlementCurrency.address)\n  const { onCheckApprove } = useCheckApprove()\n  const checkApprove = useCallback(async () => {\n    if (currentPosition && currentPosition.isEnable) {\n      const txInfo = await onCheckApprove(\n        account,\n        currentPosition.mintTokenInfo.settlementCurrency.address,\n        currentPosition.positionAddress,\n      )\n      if (txInfo && txInfo._hex > 0) {\n        setApproveStatus(true)\n      } else {\n        setApproveStatus(false)\n      }\n      return txInfo\n    }\n    return 0\n  }, [account, currentPosition, onCheckApprove])\n\n  const onApprove = useCallback(\n    async (callback?) => {\n      if (currentPosition && currentPosition.isEnable) {\n        try {\n          if (callback) {\n            callback(true)\n          }\n          const info = await handleApprove(currentPosition.positionAddress)\n          if (info.hash) {\n            const result = await info.wait()\n            if (result) {\n              checkApprove().then((approveTransactionInfo) => {\n                if (callback) {\n                  callback(false)\n                }\n                if (approveTransactionInfo._hex > 0) {\n                  setApproveStatus(true)\n                  toastSuccess(\n                    ToastTitle.success,\n                    <TransactionSuccessInfo txHash={result.transactionHash} content=\"The approve has been successfully\" />,\n                  )\n                } else {\n                  setApproveStatus(false)\n                  toastWarning('Approve Warning', 'Approval is zero. You will not be able to perform any transactions.')\n                }\n              })\n            }\n          }\n        } catch (err: any) {\n          if (callback) {\n            callback(false)\n          }\n          toastError(ToastTitle.failed, `${err.reason}`)\n        }\n      }\n    },\n    [currentPosition, handleApprove, checkApprove, toastSuccess, toastWarning, toastError],\n  )\n\n  const collateralRatio = useMemo(() => {\n    if (currentPosition && currentPosition.collateralRatio) {\n      if (currentPosition.collateralRatio === Number.POSITIVE_INFINITY) {\n        return `+${Infinite}`\n      }\n      if (currentPosition.collateralRatio === Number.NEGATIVE_INFINITY) {\n        return `-${Infinite}`\n      }\n      return TokenUtils.formatTokenAmount(currentPosition.collateralRatio, 2)\n    }\n    return '0'\n  }, [currentPosition])\n  const prepaidInterestCoverage = useMemo(() => {\n    if (currentPosition && currentPosition.prepaidInterestCoverage) {\n      if (currentPosition.prepaidInterestCoverage === Number.POSITIVE_INFINITY) {\n        return '+∞'\n      }\n      return TokenUtils.formatTokenAmount(currentPosition.prepaidInterestCoverage, 0)\n    }\n    return '0'\n  }, [currentPosition])\n  const prepaidInterest = useMemo(() => {\n    if (currentPosition) {\n      const pi = toLargeUnits(\n        currentPosition.positionStatus.interestGuaranteed\n          .sub(currentPosition.positionStatus.obligation)\n          .sub(currentPosition.positionStatus.epochDebt)\n          .sub(currentPosition.positionStatus.estimatedObligationToday),\n        currentPosition.mintTokenInfo.settlementCurrency.decimals,\n      )\n      return TokenUtils.formatTokenAmount(Number(pi), 4)\n    }\n    return 0\n  }, [currentPosition])\n\n  useEffect(() => {\n    checkApprove()\n    if (expanded && Number(expanded) !== -1) {\n      if (oBox && expanded !== 'panel1' && expanded !== 'panel2') {\n        setTimeout(() => {\n          const panel = document.querySelector(`#${expanded}`)\n\n          if (panel) {\n            panel.scrollIntoView()\n          }\n        }, 500)\n      }\n    }\n  }, [checkApprove, currentPosition, expanded])\n\n  const allowedAssets = useMemo(() => {\n    if (!currentPositionTokenInfo) {\n      return null\n    }\n    const currentTokenPrice = currentPositionTokenInfo.tokenPrice\n    const currentAllowedTokens = currentPositionTokenInfo.allowedTokens\n    const currentAllowedTokenBalance = currentPositionTokenInfo.allowedTokens?.balances\n    const usdt = currentPositionTokenInfo.WBTCToUSD\n    return Object.values(currentAllowedTokens.tokens).map((tokenInfo) => (\n      <div className=\"item currency\" key={tokenInfo.symbol}>\n        <div className=\"icon_symbol\">\n          <Logo\n            token={tokenInfo.logo}\n            symbol={tokenInfo.symbol}\n            imgprops={{\n              style: {\n                marginRight: 10,\n              },\n            }}\n          />\n          {tokenInfo.symbol}\n        </div>\n        <FlexWrap className=\"balance\" style={{ flexDirection: 'column', alignItems: 'flex-end' }}>\n          <span>\n            {(currentAllowedTokenBalance &&\n              toLargeUnits(currentAllowedTokenBalance[tokenInfo.symbol], tokenInfo.decimals)) ||\n              0}\n          </span>\n          <span>\n            ≈ $\n            {(currentAllowedTokenBalance &&\n              TokenUtils.formatCurrencyTwoDecimals(\n                (Number(currentAllowedTokenBalance[tokenInfo.symbol]) *\n                  Number(currentTokenPrice[tokenInfo.symbol]?.price) *\n                  usdt) /\n                  10 ** currentPosition.mintTokenInfo.settlementCurrency.decimals,\n              )) ||\n              0}\n          </span>\n        </FlexWrap>\n      </div>\n    ))\n  }, [currentPosition, currentPositionTokenInfo])\n\n  const mintTokens = useMemo(() => {\n    if (isSupportedChainId(chainId)) {\n      const _tokens = mintTokenChainConfigs[chainId as SupportedChainId].tokens\n      return Object.keys(mintTokenChainConfigs[chainId as SupportedChainId].tokens).map((key) => {\n        return {\n          token: _tokens[key as MintTokenKey].symbol,\n          address: _tokens[key as MintTokenKey].address,\n          decimals: _tokens[key as MintTokenKey].decimals,\n          icon: () => (\n            <Logo\n              imgprops={{ style: { marginRight: 10 } }}\n              token={_tokens[key as MintTokenKey].logo}\n              symbol={_tokens[key as MintTokenKey].symbol}\n            />\n          ),\n        }\n      })\n    }\n    return []\n  }, [chainId])\n\n  return (\n    <>\n      <Title style={{ marginBottom: 4 }}>Collateral Management</Title>\n      <SubTitle>\n        Make sure the collateral ratio is higher than the Liquidation Ratio, and the Prepaid Interest Coverage is higher\n        than the Liquidation Threshold.\n      </SubTitle>\n      <Select isGroup={false} options={mintTokens} selectValue={currentMintToken} onChange={onChange} />\n      <Box>\n        {!currentPosition?.isEnable ? (\n          <Link to=\"/collateral\" style={{ color: '#2AA1FF' }}>\n            Please enable the collateral first\n            <ArrowLine />{' '}\n          </Link>\n        ) : (\n          <Grid key={currentMintToken} container spacing={2.5}>\n            <Grid item xs={8}>\n              <ScrollWrapper ref={oBox}>\n                <TipWrap>\n                  <TipPanel>\n                    <div title={`Collateral Ratio: ${Number(collateralRatio) > 0 ? `${collateralRatio}%`: collateralRatio}`}>\n                      <h2>Collateral Ratio</h2>\n                      {!currentPosition.collateralRatio ? (\n                        <p className=\"tip\" style={{ lineHeight: '85px' }}>\n                          Add collateral before mint\n                        </p>\n                      ) : (\n                        <p className=\"num\">\n                          {currentPosition.collateralRatio ? (\n                            <>\n                              <span\n                                style={{\n                                  color: getValueColor(currentPosition?.collateralRatio),\n                                }}\n                              >\n                                {collateralRatio}\n                              </span>\n                              {currentPosition?.collateralRatio === Number.POSITIVE_INFINITY ? null : (\n                                <sub\n                                  style={{\n                                    color: getValueColor(currentPosition?.collateralRatio),\n                                  }}\n                                >\n                                  %\n                                </sub>\n                              )}\n                            </>\n                          ) : (\n                            <span\n                              style={{\n                                color: 'rgb(255, 99, 8)',\n                              }}\n                            >\n                              0\n                            </span>\n                          )}\n                        </p>\n                      )}\n                      <p className=\"tip\">Liquidation Ratio：{LiquidationThresholdValue.ratio}%</p>\n                    </div>\n                    <Slide\n                      style={{ height: '100%' }}\n                      value={\n                        currentPosition.isEnable && collateralRatio !== '0'\n                          ? (currentPosition?.collateralRatio - 100) / 5\n                          : 0\n                      }\n                    />\n                  </TipPanel>\n                  <TipPanel>\n                    <div title={`Prepaid Interest Coverage: ${prepaidInterestCoverage} days`}>\n                      <h2>Prepaid Interest Coverage</h2>\n                      {!currentPosition.prepaidInterestCoverage ? (\n                        <p className=\"tip\" style={{ lineHeight: '85px' }}>\n                          Add collateral before mint\n                        </p>\n                      ) : (\n                        <p className=\"num guarantee\">\n                          {currentPosition.prepaidInterestCoverage ? (\n                            <>\n                              <sub\n                                style={{\n                                  color: getValueColor(currentPosition.prepaidInterestCoverage),\n                                }}\n                              >\n                                ≈\n                              </sub>\n                              <span\n                                style={{\n                                  color: getValueColor(currentPosition.prepaidInterestCoverage),\n                                }}\n                              >\n                                {prepaidInterestCoverage}\n                              </span>\n                              {currentPosition.prepaidInterestCoverage === Number.POSITIVE_INFINITY ? null : (\n                                <sub\n                                  style={{\n                                    color: getValueColor(currentPosition.prepaidInterestCoverage),\n                                  }}\n                                >\n                                  days\n                                </sub>\n                              )}\n                            </>\n                          ) : (\n                            <span\n                              style={{\n                                color: 'rgb(255, 99, 8)',\n                              }}\n                            >\n                              0\n                            </span>\n                          )}\n                        </p>\n                      )}\n                      <p className=\"tip\">Liquidation Threshold: {LiquidationThresholdValue.days} days</p>\n                      {/*   <p className='tip'>Min. Mint Guarantee days: {Constants.minMintGDays} days</p>\n                       */}{' '}\n                    </div>\n                    <Slide style={{ height: '100%' }} value={currentPosition.prepaidInterestCoverage / 5} />\n                  </TipPanel>\n                </TipWrap>\n                {/* collateral info */}\n                <BeforeMintAction onApprove={onApprove} approveStatus={approveStatus} />\n                <ImproveGuaranteeDays onApprove={onApprove} approveStatus={approveStatus} />\n                <ImproveCollateralRatio onApprove={onApprove} approveStatus={approveStatus} />\n                <TradingThroughAvatar onApprove={onApprove} approveStatus={approveStatus} />\n                <WithdrawCollateral onApprove={onApprove} approveStatus={approveStatus} />\n                <GeneralTransfer onApprove={onApprove} approveStatus={approveStatus} />\n                {/*\n                <ImproveCollateralRatio/>\n                <WithdrawCollateral managerInfo={managerData} guaranteeBalance={guaranteeBalance}/>\n                */}\n              </ScrollWrapper>\n            </Grid>\n            <Grid item xs={4} className=\"account_panel\">\n              <CollateralInfoWrap>\n                <h3 className=\"m_title\">Total Collateral</h3>\n                <div className=\"list guarantee\">\n                  <div className=\"item\">\n                    <h4 className=\"item_title\">\n                      <img src={Assets.PrepaidInterest} alt=\"\" />\n                      Prepaid Interest\n                    </h4>\n                  </div>\n                  <div className=\"item currency\">\n                    <span className=\"icon_symbol\">\n                      <Logo\n                        token={currentPosition?.mintTokenInfo.settlementCurrency.logo}\n                        symbol={currentPosition?.mintTokenInfo.settlementCurrency.symbol}\n                      />\n                      <span\n                        style={{\n                          marginLeft: '10px',\n                        }}\n                      >\n                        {currentPosition?.mintTokenInfo.settlementCurrency.symbol}\n                      </span>\n                    </span>\n                    <span>{prepaidInterest}</span>\n                  </div>\n                </div>\n                <div className=\"list avatar\" style={{ marginBottom: 12 }}>\n                  <div className=\"item\">\n                    <h4 className=\"item_title\">\n                      <img src={Assets.Collateral} alt=\"\" />\n                      Collateral\n                    </h4>\n                  </div>\n                  <div className=\"item item_head\">\n                    <span>Ticker</span>\n                    <span>Holdings - In Collateral</span>\n                  </div>\n                  {allowedAssets}\n                </div>\n                <div className=\"avatar_address\">\n                  <span>Collateral Account Address: &nbsp;&nbsp;</span>{' '}\n                  <CopyToClipboard toCopy={currentPosition?.positionAddress || ''}>\n                    {currentPosition\n                      ? `${currentPosition?.positionAddress.slice(0, 6)}...${currentPosition?.positionAddress.slice(\n                          -6,\n                        )}`\n                      : ''}\n                  </CopyToClipboard>\n                </div>\n              </CollateralInfoWrap>\n              <CollateralInfoWrap>\n                <h3 className=\"asset_list_title\">My Outstanding Debt</h3>\n                <FlexWrap className=\"outstandingDebt\" style={{ alignItems: 'center', justifyContent: 'space-between' }}>\n                  <FlexWrap style={{ alignItems: 'center' }}>\n                    <Fbtc20Icon className=\"icon\" />\n                    {currentPosition?.mintTokenInfo.symbol}\n                  </FlexWrap>\n                  <span>\n                    {TokenUtils.formatFourDecimals(\n                      Number(toLargeUnits(currentPosition.balance, currentPosition.mintTokenInfo.decimals)),\n                    )}\n                  </span>\n                </FlexWrap>\n              </CollateralInfoWrap>\n              <CollateralInfoWrap style={{ padding: 30 }}>\n                <img src={Assets.CollateralManage} style={{ width: '100%' }} alt=\"\" />\n              </CollateralInfoWrap>\n            </Grid>\n          </Grid>\n        )}\n      </Box>\n    </>\n  )\n}\n\nexport default withRouter(Manage)\n","import React from 'react';\nimport Manage from \"./components/manage\";\n\nfunction ManagerPage() {\n  return (\n    <Manage/>\n  );\n}\n\nexport default ManagerPage;\n","import React from 'react'\n\nexport default function Logo(props: { token: string; symbol: string; imgprops?: React.ImgHTMLAttributes<HTMLImageElement> }) {\n  return <img {...props.imgprops} style={{width: 22, height: 22, ...props.imgprops?.style}} src={props.token} alt={props.symbol}  />\n}\n","import React from \"react\";\nimport {useAppDispatch, useAppSelector} from \"../state\";\nimport {toggleStatus} from \"../state/CollateralManage/actions\";\n\nexport default function usePanel(){\n  const expanded = useAppSelector((state)=> state.collateralManage.expanded)\n  const dispatch = useAppDispatch()\n  const handleChange = (panel: string):(event: React.SyntheticEvent, newExpanded: boolean)=>void => {\n    return (event: React.SyntheticEvent, newExpanded: boolean) => {\n      dispatch(toggleStatus({expanded:newExpanded ? panel : '-1'}))\n    }\n  }\n  const setExpanded = (panel?: string) => {\n    dispatch(toggleStatus({expanded:panel || '-1'}))\n  }\n  return {expanded,handleChange,setExpanded}\n}\n","import React from 'react'\nimport { styled } from '@mui/material/styles'\n\nconst Wrapper = styled('div')`\n  background: #def1ff;\n  border-radius: 14px;\n  padding: 13px 22px;\n  margin: 20px 0;\n\n  table {\n    width: 100%;\n  }\n\n  td {\n    font-family: PingFangSC-Regular, sans-serif;\n    font-weight: 400;\n    font-size: 12px;\n    padding: 5px 0;\n  }\n\n  .label {\n    text-align: left;\n    width: 30%;\n  }\n\n  .from,\n  .to {\n    width: 35%;\n    line-height: 17px;\n    text-align: right;\n  }\n\n  .to {\n    font-family: PingFangSC-Medium, sans-serif;\n    font-weight: 500;\n    color: #000;\n  }\n\n  .borderTop {\n    border-top: 0.5px solid rgba(0, 0, 0, 0.12);\n  }\n`\n\n/*\n\nconst data = [\n  ['Collateral Ratio', 100, 200],\n  ['Collateral Ratio', 100, 200],\n  ['Collateral Ratio', 100, 200],\n]\n\n*/\n\nfunction DataWrapper(props) {\n  const { data } = props\n  return (\n    <Wrapper>\n      <table>\n        <tbody>\n          <tr>\n            <td className=\"from\" colSpan={2}>\n              From\n            </td>\n            <td className=\"to\">To</td>\n          </tr>\n          {data.map((item) => (\n            <tr className={item[3] ? 'borderTop' : ''} key={item[0]}>\n              <td className=\"label\">{item[0]}</td>\n              <td className=\"from\">{item[1]}</td>\n              <td className=\"to\">{item[2]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Wrapper>\n  )\n}\n\nexport default DataWrapper\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { styled } from '@mui/material/styles'\nimport { PoolProps } from 'config/constants/types'\nimport { TokenUtils } from 'utils/transformHelper'\nimport Select from '../Select'\nimport { ExchangeArrow, RoundArrow } from '../uikit'\nimport { FlexWrap } from '../CommonComponent'\n\nconst SelectWrap = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: static !important;\n`\n\nconst GroupWrap = styled('div')`\n  display: flex;\n  flex-direction: column;\n  width: calc(100% / 2 - 25px);\n\n  p {\n    height: 28px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 15px;\n    box-sizing: border-box;\n\n    span {\n      font-size: 12px;\n      line-height: 17px;\n      color: rgba(0, 0, 0, 0.5);\n    }\n  }\n\n  .maxBtn {\n    height: 21px;\n    align-items: flex-end;\n  }\n`\n\nexport const IconWrap = styled('strong')`\n  display: block;\n  width: 20px;\n  height: 20px;\n  background: #c4c4c4;\n  line-height: 20px;\n  text-align: center;\n  border-radius: 50%;\n`\n\nexport interface MethodsProps {\n  options: PoolProps[] // selectIcon\n  selectValue: number // current selected\n  onMax?: (arg1: PoolProps) => void // to max action\n  selectedSymbol: string // selected symbol\n  SelectIcon: React.FC // leftTop icon\n  RightIcon: React.FC // right icon\n  leftInputValue?: number | null // left input value\n  rightInputValue?: number // right input value\n  rightBalance: number // right balance\n  rightSymbol: string // right symbol\n  rightOptions: PoolProps[] // options list\n  selectInput?: (arg1: React.SyntheticEvent) => void\n  leftBalance?: any\n}\n\nexport default function Index(props) {\n  const {\n    options,\n    leftBalance,\n    isExchange,\n    onExchange,\n    onMax,\n    selectInput,\n    rightSelectInput,\n    SelectIcon,\n    RightIcon,\n    leftInputValue,\n    rightInputValue,\n    rightBalance,\n    rightDisableStatus,\n    leftChange,\n    rightChange,\n    leftDisableStatus = [false, false],\n    leftSelectValue,\n    rightSelectValue,\n    rightOptions,\n    leftSymbol,\n    rightSymbol,\n    rightNumberIsShow = true,\n    leftDesc,\n    rightDesc,\n  } = props\n  // rightDisableStatus[1] true selectDisabled\n  // rightDisableStatus[2] true inputDisabled\n\n  const [currentSelected, setVal] = useState(options && options.length ? options[0] : {})\n  const [rightList, setRightList] = useState(options && options.length ? options[0].rightOptionList : [])\n  const [rightVal, setRightVal] = useState(rightList ? rightList[0] : {})\n\n\n  useEffect(() => {\n    if (options && options.length && leftSelectValue && rightSelectValue) {\n      setVal(options.filter((it) => it.token === leftSelectValue)[0] || options[0])\n      setRightList(options[0].rightOptionList)\n      setRightVal(options[0].rightOptionList.filter((it) => it.token === rightSelectValue)[0] || options[0].rightOptionList[0])\n    }\n  }, [leftSelectValue, options, rightSelectValue])\n\n  const displayValues = useMemo(() => {\n    const _rightBalance = rightBalance || rightVal && rightVal.balance || 0;\n    const _leftBalance = leftBalance || currentSelected.balance || 0;\n    return {\n      right: {\n        orignalBalance: _rightBalance,\n        balance: TokenUtils.formatFourDecimals(_rightBalance),\n        symbol: rightSymbol || (rightVal && Object.keys(rightVal) ? rightVal.token : 'WBTC'),\n      },\n      left: {\n        orignalBalance: _leftBalance,\n        balance: TokenUtils.formatFourDecimals(_leftBalance),\n        symbol: leftSymbol || currentSelected.token || 'WBTC',\n      },\n    }\n  }, [currentSelected, leftBalance, leftSymbol, rightBalance, rightSymbol, rightVal])\n  return (\n    <>\n      <SelectWrap>\n        <GroupWrap>\n          <p title={`${displayValues.left.symbol} Balance: ${displayValues.left.orignalBalance}`}>\n            <SelectIcon />\n            <span className=\"balance\">\n              {displayValues.left.balance} {displayValues.left.symbol}\n            </span>\n          </p>\n          <Select\n            key={1}\n            selectValue={leftSelectValue || currentSelected.token}\n            allDisabled={!leftDisableStatus || (leftDisableStatus[0] && leftDisableStatus[1])}\n            inputDisabled={!leftDisableStatus || leftDisableStatus[1]}\n            selectDisabled={!leftDisableStatus || leftDisableStatus[0]}\n            onChange={(val) => {\n              const selected = options.filter((it) => it.token === val)[0]\n              setRightList(selected.rightOptionList)\n              setRightVal(selected.rightOptionList[0])\n              setVal(selected)\n              if (leftChange) {\n                leftChange(selected)\n              }\n            }}\n            selectInput={selectInput}\n            actionValue={leftInputValue}\n            options={options}\n            groupStyle={{ width: '100%' }}\n            isGroup\n          />\n          <FlexWrap style={{ justifyContent: 'space-between', alignItems: 'center' }}>\n            {leftDesc && leftDesc}\n            <p dir=\"rtl\" style={{ width: '100%' }} className=\"maxBtn\">\n              <span\n                onClick={() => {\n                  if (onMax) {\n                    onMax(currentSelected)\n                  }\n                }}\n                onKeyUp={() => null}\n                tabIndex={0}\n                role=\"button\"\n                style={{ cursor: 'pointer', color: '#6ED6F3', fontSize: '0.75rem', userSelect: 'none' }}\n              >\n                Max\n              </span>\n            </p>\n          </FlexWrap>\n        </GroupWrap>\n        {isExchange ? (\n          <ExchangeArrow onClick={onExchange} style={{ fill: 'none', cursor: 'pointer', width: 22, marginTop: 8 }} />\n        ) : (\n          <RoundArrow style={{ fill: 'none', width: 22, marginTop: 8 }} />\n        )}\n\n        <GroupWrap>\n          <p title={rightNumberIsShow ? `${displayValues.right.symbol} Balance: ${displayValues.right.orignalBalance}` : ''}>\n            <RightIcon />\n            {rightNumberIsShow ? (\n              <span className=\"balance\">\n                {displayValues.right.balance}{\" \"}\n                {displayValues.right.symbol}\n              </span>\n            ) : null}\n          </p>\n          <Select\n            key={2}\n            selectValue={rightSelectValue || (rightVal ? rightVal.token : 'WBTC')}\n            options={rightOptions || rightList}\n            actionValue={rightInputValue}\n            groupStyle={{ width: '100%' }}\n            isGroup\n            allDisabled={!rightDisableStatus || (rightDisableStatus[0] && rightDisableStatus[1])}\n            inputDisabled={!rightDisableStatus || rightDisableStatus[1]}\n            selectDisabled={!rightDisableStatus || rightDisableStatus[0]}\n            selectInput={rightSelectInput}\n            onChange={(val) => {\n              if (currentSelected) {\n                const selected = currentSelected.rightOptionList.filter((it) => it.token === val)[0]\n                if (rightChange) {\n                  rightChange(selected)\n                }\n                setRightVal(selected)\n              } else {\n                const selected = options[0].filter((it) => it.token === val)[0]\n                if (rightChange) {\n                  rightChange(selected)\n                }\n                setRightVal(selected)\n              }\n            }}\n          />\n          <FlexWrap style={{ justifyContent: 'space-between', alignItems: 'center' }}>\n            {rightDesc && rightDesc}\n            <p dir=\"rtl\" style={{ width: '100%' }} className=\"maxBtn\" />\n          </FlexWrap>\n        </GroupWrap>\n      </SelectWrap>\n    </>\n  )\n}\n","import { useWeb3React } from 'web3-react-core'\nimport { useCallback } from 'react'\nimport { ethers } from 'ethers'\nimport { getContract, getSigner } from 'utils/web3React'\nimport ERC20 from 'config/abi/erc20.json'\nimport useSystemParams from './useSystemParams'\n\nexport function useCheckApprove() {\n  const { active } = useWeb3React()\n  const {signer} = useSystemParams()\n\n  const handleApprove = useCallback(\n    async (account: string, spender: string, target: string) => {\n      if (active) {\n        try {\n          // TODO rpc url should be from the chainId\n\n          // const { signer } = getProviderAndSigner(INFURA_NETWORK_URLS[SupportedChainId.BLAST_SEPPLIA], account, SupportedChainId.BLAST_SEPPLIA)\n          const contract = getContract(signer, ERC20, spender)\n          if (contract) {\n            const allowance = await contract.allowance(account, target)\n            return allowance\n          }\n        } catch (error) {\n          console.error('Failed to check approval', error)\n          return null\n        }\n      }\n      return null\n    },\n    [active, signer],\n  )\n\n  return { onCheckApprove: handleApprove }\n}\n\n\n\n\nexport function useApprove(owner, spender) {\n  const { active, library, chainId } = useWeb3React()\n\n  const handleApprove = useCallback(\n    async (target) => {\n      if (active && chainId) {\n        const signer = getSigner(library, owner)\n\n        const contract = getContract(signer, ERC20, spender && typeof spender === 'object' ? spender[chainId] : spender)\n\n        if (contract) {\n          return contract.approve(target, ethers.constants.MaxUint256)\n        }\n      }\n      return null\n    },\n    [active, chainId, library, owner, spender],\n  )\n\n  return { handleApprove }\n}\n","export const MintThresholdValue = {\n  days: 20,\n  ratio: 120,\n}\n\nexport const LiquidationThresholdValue = {\n  days: 10,\n  ratio: 110,\n}\n\nexport const ShortThresholdValue = {\n  days: 20,\n  ratio: 120,\n}\n","import { styled } from '@mui/material/styles'\n\nconst Title = styled('h1')`\n  font-family: 'Heebo Medium';\n  font-style: normal;\n  font-weight: 500;\n  font-size: 32px;\n  line-height: 47px;\n  margin-bottom: 14px;\n  color: #000000;\n`\n\nexport default Title\n"],"sourceRoot":""}