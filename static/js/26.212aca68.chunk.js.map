{"version":3,"sources":["views/History/Obligation.tsx","components/Table/icon/SortIcon.tsx","components/Table/Table.tsx"],"names":["Box","styled","_templateObject","_taggedTemplateLiteral","TableCard","Card","_templateObject2","columns","id","numeric","disablePadding","isSort","label","OutStandingHistory","_jsxs","children","_jsx","BTitle","Table","dataSource","pagiation","Svg","svg","SortIcon","_ref","order","width","height","viewBox","fill","xmlns","d","StyledTableCell","TableCell","concat","tableCellClasses","head","border","color","body","fontSize","borderBottom","StyledTableRow","TableRow","cursor","BoxWrapper","descendingComparator","a","b","orderBy","getComparator","stableSort","array","comparator","stabilizedThis","map","el","index","sort","EnhancedTableHead","props","onRequestSort","isMyPage","TableHead","headCell","style","paddingLeft","sortDirection","TableSortLabel","active","direction","onClick","property","event","IconComponent","fontFamily","component","marginLeft","EnhancedTable","content","pagination","rowClick","pages","selectKey","setOrder","React","useState","setOrderBy","selected","setSelected","page","setPage","rowsPerPage","setRowsPerPage","handleClick","useCallback","row","dataSourceDom","length","labelId","hover","role","tabIndex","slice","textAlign","colSpan","rowSpan","TableContainer","sx","minWidth","handleRequestSort","console","log","TableBody","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onChangePage","onRowsPerPageChange","parseInt","target","value"],"mappings":"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","file":"static/js/26.212aca68.chunk.js","sourcesContent":["import React from 'react'\nimport { styled } from '@mui/material/styles'\nimport { BTitle } from 'components/CommonComponent'\nimport Card from 'components/Card'\nimport Table from 'components/Table'\n\nconst Box = styled('div')`\n  box-sizing: border-box;\n  margin-top: 26px;\n  padding-right: 44px;\n  height: 80%;\n  overflow: scroll;\n  padding-bottom: 20px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst TableCard = styled(Card)`\n  margin-bottom: 20px;\n  padding: 8px;\n  margin-top: 30px;\n`\n\nconst columns = [\n  {\n    id: 'date',\n    numeric: false,\n    disablePadding: true,\n    isSort: true,\n    label: 'Date',\n  },\n  {\n    id: 'ticker',\n    numeric: false,\n    disablePadding: true,\n    isSort: true,\n    label: 'Ticker',\n  },\n  {\n    id: 'obligationRecords',\n    numeric: true,\n    disablePadding: false,\n    isSort: true,\n    label: 'Interest Paid Records',\n  },\n]\n\nfunction OutStandingHistory() {\n  return (\n    <Box>\n      <BTitle>Interest Paid History</BTitle>\n      <TableCard>\n        <Table dataSource={[]} columns={columns} pagiation={false} />\n      </TableCard>\n    </Box>\n  )\n}\n\nexport default OutStandingHistory\n","import React from 'react';\nimport styled from 'styled-components'\n\nconst Svg = styled.svg`\n  font-size: 14px;\n  width: 10px;\n  height: 5px;\n  display: block;\n`\n\nfunction SortIcon({order}) {\n  return (\n    <span>\n        <Svg width=\"6\" height=\"4\" viewBox=\"0 0 6 4\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path\n    d=\"M0.284084 3.2146L4.81473 3.2146C5.03791 3.2146 5.17182 3.06953 5.06023 2.95794C4.89284 2.77939 2.89534 0.692616 2.79491 0.592183C2.67216 0.458272 2.40434 0.480591 2.29274 0.592183C2.21463 0.670297 0.161333 2.83519 0.0385814 2.95794C-0.0730109 3.08069 0.0720592 3.20344 0.284084 3.2146Z\"\n    fill={order === 'asc'? '#ccc' :' #7d7d7d'}/>\n  </Svg>\n  <Svg  width=\"6\" height=\"4\" viewBox=\"0 0 6 4\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path\n    d=\"M4.81626 0.7854H0.285613C0.0624289 0.7854 -0.0714817 0.930471 0.0401105 1.04206C0.207499 1.22061 2.205 3.30738 2.30543 3.40782C2.42818 3.54173 2.69601 3.51941 2.8076 3.40782C2.88571 3.3297 4.93901 1.16481 5.06176 1.04206C5.17335 0.919311 5.02828 0.79656 4.81626 0.7854Z\"\n    fill={order === 'desc'? '#ccc' :' #7d7d7d'}/>\n  </Svg>\n\n    </span>\n  );\n}\n\nexport default SortIcon;\n","import React, { useCallback } from 'react'\nimport { styled } from '@mui/material/styles'\nimport {\n  Box,\n  Table,\n  TableRow,\n  TableSortLabel,\n  TableBody,\n  TableContainer,\n  TableHead,\n  TablePagination,\n} from '@mui/material'\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell'\nimport { uniq } from 'lodash'\nimport SortIcon from './icon/SortIcon'\n\nexport const StyledTableCell = styled(TableCell)(() => ({\n  [`&.${tableCellClasses.head}`]: {\n    border: 'none',\n    color: 'rgba(0, 0, 0, 0.5)',\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n    borderBottom: '1px solid #E2E8EE',\n  },\n}))\nexport const StyledTableRow = styled(TableRow)(() => ({\n  cursor: 'pointer',\n  // hide last border\n  '&:last-child td, &:last-child th': {\n    fontSize: 14,\n    borderBottom: '1px solid rgba(226, 232, 238, 1)',\n  },\n}))\n\nconst BoxWrapper = styled(Box)`\n  height: 80%;\n  overflow: scroll;\n  &::-webkit-scrollbar,\n  .MuiTableContainer-root::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n\ntype Order = 'asc' | 'desc'\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy)\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number])\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0])\n    if (order !== 0) {\n      return order\n    }\n    return a[1] - b[1]\n  })\n  return stabilizedThis.map((el) => el[0])\n}\n\nfunction EnhancedTableHead(props) {\n  const { order, orderBy, onRequestSort, columns, isMyPage = false } = props\n  const createSortHandler = (property) => (event: React.MouseEvent<unknown>) => {\n    onRequestSort(event, property)\n  }\n\n  return (\n    <TableHead>\n      <TableRow>\n        {columns.map((headCell, index) => (\n          <StyledTableCell\n            style={{ paddingLeft: index === 0 && isMyPage && 0 }}\n            key={headCell.id}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            {!headCell.isSort ? (\n              <TableSortLabel\n                active={orderBy === headCell.id}\n                direction={orderBy === headCell.id ? order : 'asc'}\n                IconComponent={null}\n                style={{\n                  color: 'rgba(0,0,0,.5)',\n                  fontFamily: 'PingFangSC-Regular, sans-serif',\n                }}\n              >\n                {headCell.label}\n                {orderBy === headCell.id ? (\n                  <Box component=\"span\" style={{ marginLeft: 4 }}>\n                    {/* {order === 'desc' ? 'sorted descending' : 'sorted ascending'} */}\n                    <SortIcon order={order} />\n                  </Box>\n                ) : null}\n              </TableSortLabel>\n            ) : (\n              <TableSortLabel\n                active={orderBy === headCell.id}\n                direction={orderBy === headCell.id ? order : 'asc'}\n                onClick={createSortHandler(headCell.id)}\n                IconComponent={null}\n                style={{\n                  color: 'rgba(0,0,0,.5)',\n                  fontFamily: 'PingFangSC-Regular, sans-serif',\n                }}\n              >\n                {headCell.label}\n                {orderBy === headCell.id ? (\n                  <Box component=\"span\" style={{ marginLeft: 4 }}>\n                    {/* {order === 'desc' ? 'sorted descending' : 'sorted ascending'} */}\n                    <SortIcon order={order} />\n                  </Box>\n                ) : null}\n              </TableSortLabel>\n            )}\n          </StyledTableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  )\n}\n\nexport default function EnhancedTable(props) {\n  const { dataSource, columns, content, pagination, rowClick, isMyPage, pages, selectKey } = props\n\n  const [order, setOrder] = React.useState<Order>('desc')\n  const [orderBy, setOrderBy] = React.useState(columns[0].id)\n  const [selected, setSelected] = React.useState<readonly string[]>([])\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(10)\n\n  const handleRequestSort = (event: React.MouseEvent<unknown>, property) => {\n    console.log('p :>> ', property);\n    const isAsc = orderBy === property && order === 'asc'\n    setOrder(isAsc ? 'desc' : 'asc')\n    setOrderBy(property)\n  }\n  const handleClick = useCallback(\n    (event, row) => {\n      // const selectedIndex = selected.indexOf(name)\n      // let newSelected: readonly string[] = []\n\n      // if (selectedIndex === -1) {\n      //   newSelected = newSelected.concat(selected, name)\n      // } else if (selectedIndex === 0) {\n      //   newSelected = newSelected.concat(selected.slice(1))\n      // } else if (selectedIndex === selected.length - 1) {\n      //   newSelected = newSelected.concat(selected.slice(0, -1))\n      // } else if (selectedIndex > 0) {\n      //   newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1))\n      // }\n      // console.log('object :>> ', uniq(newSelected));\n      // setSelected(uniq(newSelected))\n\n      if (rowClick) {\n        rowClick(event, row)\n      }\n    },\n    [rowClick],\n  )\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n    if (pagination && props.onChangePage) {\n      props.onChangePage(newPage);\n    }\n  }\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const dataSourceDom = React.useCallback(() => {\n    if (dataSource && dataSource.length && pagination) {\n      if (pages) {\n        return stableSort(dataSource, getComparator(order, orderBy))\n          .map((row, index) => {\n            const labelId = `enhanced-table-checkbox-${index}`\n            return (\n              <StyledTableRow\n                hover\n                onClick={(event) => handleClick(event, row)}\n                role=\"checkbox\"\n                tabIndex={-1}\n                key={`row_${labelId}`}\n              >\n                {content(row, index, labelId)}\n              </StyledTableRow>\n            )\n          })\n      }\n      return stableSort(dataSource, getComparator(order, orderBy))\n        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n        .map((row, index) => {\n          const labelId = `enhanced-table-checkbox-${index}`\n          return (\n            <StyledTableRow\n              hover\n              onClick={(event) => handleClick(event, row)}\n              role=\"checkbox\"\n              tabIndex={-1}\n              key={`row_${labelId}`}\n            >\n              {content(row, index, labelId)}\n            </StyledTableRow>\n          )\n        })\n    }\n    if (dataSource && dataSource.length && !pagination) {\n      return stableSort(dataSource, getComparator(order, orderBy)).map((row, index) => {\n        const labelId = `enhanced-table-checkbox-${index}`\n        return (\n          <StyledTableRow\n            hover\n            onClick={(event) => handleClick(event, row)}\n            role=\"checkbox\"\n            tabIndex={-1}\n            key={`row_${labelId}`}\n          >\n            {content(row, index, labelId)}\n          </StyledTableRow>\n        )\n      })\n    }\n    return (\n      <StyledTableRow>\n        <StyledTableCell style={{ textAlign: 'center' }} colSpan={columns.length} rowSpan={3}>\n          No data\n        </StyledTableCell>\n      </StyledTableRow>\n    )\n  }, [columns.length, content, dataSource, handleClick, order, orderBy, page, pages, pagination, rowsPerPage])\n  return (\n    <BoxWrapper>\n      <TableContainer>\n        <Table sx={{ minWidth: 1400 }} aria-labelledby=\"tableTitle\">\n          <EnhancedTableHead\n            order={order}\n            orderBy={orderBy}\n            onRequestSort={handleRequestSort}\n            columns={columns}\n            isMyPage={isMyPage}\n          />\n          <TableBody>\n            {dataSourceDom()}\n            {/* {dataSource && dataSource.length && pagination ? (\n              stableSort(dataSource, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const labelId = `enhanced-table-checkbox-${index}`\n                  return (\n                    <StyledTableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.ticker)}\n                      role=\"checkbox\"\n                      tabIndex={-1}\n                      key={row.ticker}\n                    >\n                      {content(row, index, labelId)}\n                    </StyledTableRow>\n                  )\n                })\n            ) : dataSource && dataSource.length && !pagination ? (\n              stableSort(dataSource, getComparator(order, orderBy)).map((row, index) => {\n                const labelId = `enhanced-table-checkbox-${index}`\n                return (\n                  <StyledTableRow\n                    hover\n                    onClick={(event) => handleClick(event, row.ticker)}\n                    role=\"checkbox\"\n                    tabIndex={-1}\n                    key={row.ticker}\n                  >\n                    {content(row, index, labelId)}\n                  </StyledTableRow>\n                )\n              })\n            ) : (\n              <StyledTableRow>\n                <StyledTableCell style={{ textAlign: 'center' }} colSpan={columns.length} rowSpan={3}>\n                  No data\n                </StyledTableCell>\n              </StyledTableRow>\n            )} */}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {pagination ? (\n        <TablePagination\n          rowsPerPageOptions={[10]}\n          component=\"div\"\n          count={pages || (dataSource && dataSource.length) || 0}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      ) : null}\n    </BoxWrapper>\n  )\n}\n"],"sourceRoot":""}