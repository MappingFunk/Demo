{"version":3,"sources":["components/Slide/index.tsx","components/SubTitle.tsx","views/Collateral/components/AddGuaranteeFromWallet.tsx","views/Collateral/components/AddCurrencyToAvatar.tsx","views/Collateral/components/BeforeMintAction.tsx","views/Collateral/components/WithdrawCollateral.tsx","views/Mint/components/NeutralizeComp.tsx","views/Collateral/components/AddGuaranteeFromAvatar.tsx","views/Collateral/components/ImproveGuaranteeDays.tsx","views/Collateral/components/ImproveCollateralRatio.tsx","views/Collateral/components/TradingThroughAvatar.tsx","views/Collateral/components/GeneralTransfer.tsx","views/Collateral/components/manage.tsx","views/Collateral/ManagerPage.tsx","components/Logo.tsx","hooks/usePanel.ts","components/DataWrapper/index.tsx","components/Methods/index.tsx","hooks/useApprove.ts","config/constants/thresholdValue.ts","views/Collateral/components/Title.tsx"],"names":["PrettoSlider","styled","Slider","props","color","height","width","background","opacity","border","bottom","value","boxShadow","transform","position","left","zIndex","borderRadius","lineHeight","fontSize","padding","backgroundColor","transformOrigin","display","CustomizedSlider","_jsx","valueLabelDisplay","orientation","defaultValue","disabled","Content","_templateObject","_taggedTemplateLiteral","SubTitle","children","AddGuaranteeFromWallet","walletTokenBalance","approveStatus","onApprove","transferVal","setTransferVal","useState","isDisabled","setDisabled","toastSuccess","toastError","toastInfo","useToast","approveBtnStatus","setApproveBtnStatus","currentPosition","collateralIndex","usePositionInfo","onUpdatePrepaidInterest","newDisplayCollateralRatio","newDisplayPrepaidInterestCoverage","useComputedIndexAction","handleUpdatePosition","onAddPrepaidInterest","usePositionAction","changeTransferVal","useCallback","e","type","numberVal","Number","target","mintTokenInfo","settlementCurrency","symbol","_transferAmount","toSmallUnits","TokenUtils","formatTokenAmount","decimals","isZero","onSubmit","async","ToastTitle","failed","txInfo","submited","TransactionSubmittedInfo","content","txHash","hash","wait","success","TransactionSuccessInfo","_jsxs","_Fragment","Methods","SelectIcon","Wallet","options","token","balance","icon","Logo","imgprops","style","marginRight","logo","address","rightOptionList","prepaidInterest","rightBalance","leftBalance","rightSymbol","selectedSymbol","RightIcon","src","Assets","PrepaidInterest","alt","leftInputValue","rightInputValue","selectInput","onMax","DataWrapper","data","DataIndexName","CollateralRatio","displayRatio","PrepaidInterestCoverage","displayCoverage","Approve","onClick","state","AddCurrencyToAvatar","account","chainId","submitStatus","setSubmitStatus","currentPositionTokenInfo","onUpdateCollateralValue","transfer","useTransfer","tradingList","useMemo","allowedTokens","Array","from","Object","values","tokens","map","item","toLargeUnits","balances","selectIndex","setSelectIndex","leftSelectedToken","length","rightSelectedToken","onTransfer","console","log","tx","chainConfigs","positionAddress","formatDecimalString","String","commonTokens","transactionHash","reason","rightOptions","leftSelectValue","rightSelectValue","_ref","_transferVal","leftChange","selected","_index","findIndex","AvatarIcon","TipWrap","IconWrap","BeforeMintAction","useHashPowerToken","expanded","handleChange","usePanel","active","useWeb3React","Wrapper","Title","Accordion","id","onChange","AccordionSummary","Typography","AccordionDetails","ActionUser","contracts","ActionUserInterface","utils","Interface","abi","WidrawFromPrepaidInterestToWallet","actionDisable","setActionDisable","trading","setTrading","transferAmount","setTransferAmount","signer","useSystemParams","newPrepaidInterestCoverage","newCollateralRatio","minCollateralValue","onGuaranteeCurrencyToWallet","encodeFunctionData","toString","positionContract","ethers","Contract","PositionABI","delegateCall","useEffect","val","concat","isNaN","pimin","positionStatus","estimatedDailyDebt","toNumber","pi","formatFourDecimals","GuaranteeIcon","rightSelectedValue","selectValue","selectedBalance","WidrawFromCollateralToWallet","tokenPools","setLeftSelectedToken","SupportedTokens","WBTC","setRightSelectedToken","transferAmountVal","withdrawAssetParams","keys","current","activeToken","find","it","unitPrice","getSwapQuote","minCollateralValueTokenPrice","WithdrawCollateral","SelectGroup","Tip","_templateObject2","Func","_templateObject3","NeutralizeButton","Button","_templateObject4","SelectTypeWrap","_templateObject5","TipInfo","_templateObject6","RED","NeutralizeType","fbtc20mint","NeutralizeComp","setRefresh","setApproveStatus","disabledAction","setDisabledAction","neutralizeAmount","setNeutralizeAmount","neutralizeType","setNeutralizeType","currentMintToken","onUpdateNeutralizeValue","newNeutralizeFee","newEstimatedDailyDebt","handleApprove","useApprove","onCheckApprove","useCheckApprove","info","message","settlementCurrencyValues","formatUnits","checkApprove","isEnable","_hex","onChangeNeutralizeAmount","_decimals","formattedValue","actionVal","debt","isValueWithinBounds","isWalletValueValid","isCollateralValueValid","isValueValid","transferValue","isFinalValueValid","onNeutralize","Select","groupStyle","actionValue","isGroup","dir","ButtonBase","Math","min","className","onKeyUp","tabIndex","role","WalletIcon","Avatar","cellSpacing","cellPadding","colSpan","viewBox","fill","xmlns","d","fillRule","clipRule","AddGuaranteeFromAvatar","_currentPositionToken3","_currentPositionToken","_currentPositionToken2","error","CustomizedAccordions","ImproveCollateralRatio","NetralizeComp","AddBtn","ActionMulticall","ActionMulticallInterface","TradingThrough","columns","setColumns","isSubmitStatus","setIsSubmit","onUpdateTotalCollateralValue","tokenList","tokenPrice","list","filter","addMethods","uuid","input","output","inputToken","outputToken","includes","initColumns","reload","arguments","undefined","posContract","getContract","_params","inputAmount","tokenAddressPath","findPath","to","dataMulti","transaction","FlexWrap","flexDirection","wordBreak","onChangeInputAmount","MAX_SAFE_INTEGER","res","actionValSum","reduce","acc","curr","next","prototype","hasOwnProperty","call","indexOf","slice","onChangeToken","onExchange","record","index","i","push","poolPath","fromDecimals","toDecimals","inputValue","outputValue","total","forEach","price","DragDropContext","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","items","destItems","removed","splice","copiedItems","Droppable","provided","droppableProps","ref","innerRef","Draggable","draggableId","isDragDisabled","provideds","amountOut","unitAmountOut","priceStr","draggableProps","dragHandleProps","alignItems","userSelect","margin","paddingRight","isExchange","leftDisableStatus","rightDisableStatus","rightChange","leftSymbol","right","IconButton","cursor","marginTop","marginLeft","DeleteIcon","DroppableIcon","placeholder","AddIcon","POSITIVE_INFINITY","MethodsWrap","AccountType","accountCategoryList","MyWallet","Settlement","Standard","getTokenDecimals","key","valueToKeyMap","GeneralTransfer","gDisStatus","setGDisStatus","actionData","setActionData","accountType","tokenType","tokenSelectDisabled","avatarAssetList","onChangeVal","isTransfer","transferTransactions","transferData","recviceTarget","tokenSymbol","transferDecimals","tokenAddress","handleAllSettled","results","_result$reason","_result$reason2","status","then","submitTransaction","_data","handleResult","_ref2","handleError","Promise","allSettled","catch","send","recive","onChangeAccount","__index","nextState","settlement","shortBalanceValue","collateralValue","tokenTypeDecimals","collateralAssets","maxActionTotalAssets","maxCollateralTransfer","amountOutPrice","otherTokenWbtc","sub","actionCurrentMaxValue","amountInCurrentMaxValue","maxTransterCurrentToken","floor","maxPrepaidInterest","maxActionPrepaidInterest","transferAmout","interestGuaranteed","gt","avatarAssetBalance","walletAssetBalance","selectDisabled","Input","event","cleanedValue","replace","_parts$","parts","split","join","hidden","justifyContent","ExchangeArrow","list1","list2","reverse","ele","Box","CardWrap","Card","TipPanel","CollateralInfoWrap","getValueColor","withRouter","oBox","React","useRef","handleChangeCurrentPosition","toastWarning","callback","approveTransactionInfo","err","collateralRatio","Infinite","NEGATIVE_INFINITY","prepaidInterestCoverage","obligation","epochDebt","estimatedObligationToday","setTimeout","panel","document","querySelector","scrollIntoView","allowedAssets","currentTokenPrice","currentAllowedTokens","currentAllowedTokenBalance","usdt","WBTCToUSD","tokenInfo","_currentTokenPrice$to","formatCurrencyTwoDecimals","mintTokens","isSupportedChainId","_tokens","mintTokenChainConfigs","marginBottom","Grid","container","spacing","xs","ScrollWrapper","title","LiquidationThresholdValue","ratio","Slide","days","ImproveGuaranteeDays","TradingThroughAvatar","Collateral","CopyToClipboard","toCopy","Fbtc20Icon","CollateralManage","Link","ArrowLine","ManagerPage","Manage","_props$imgprops","useAppSelector","collateralManage","dispatch","useAppDispatch","newExpanded","toggleStatus","setExpanded","SelectWrap","GroupWrap","Index","rightSelectInput","rightNumberIsShow","leftDesc","rightDesc","currentSelected","setVal","rightList","setRightList","rightVal","setRightVal","displayValues","_rightBalance","_leftBalance","orignalBalance","allDisabled","inputDisabled","RoundArrow","spender","contract","ERC20","allowance","owner","library","getSigner","approve","constants","MaxUint256","ShortThresholdValue"],"mappings":"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","file":"static/js/15.d8e4fbd1.chunk.js","sourcesContent":["import * as React from 'react'\nimport Slider from '@mui/material/Slider'\nimport { styled } from '@mui/material/styles'\n\nconst PrettoSlider = styled(Slider)((props) => {\n  return () => ({\n    color: '#52af77',\n    height: 320,\n    width: 6,\n    '& .MuiSlider-rail': {\n      background: 'linear-gradient(180deg, #1DCADA, #FFCC04 40%, #FF6308)',\n      opacity: '1',\n    },\n    '& .MuiSlider-track': {\n      border: 'none',\n      background: 'transparent',\n      // background:'linear-gradient(90deg, #FF4D00 0%, #FF730D 31.52%, #FFBD12 44.08%, #FFD900 97.25%)',\n    },\n    '& .MuiSlider-thumb': {\n      // eslint-disable-next-line no-nested-ternary\n      bottom: props.value === 0 ? '2px !important' : props.value > 100 ? 'calc(100% - 2px) !important' : '',\n      height: 6,\n      width: 6,\n      boxShadow: '0px 8px 10px rgba(0, 0, 0, 0.25)',\n      background: '#fff',\n      transform: 'translate(-24px,50%)',\n      // background:'linear-gradient(90deg, #FF4D00 0%, #FF730D 31.52%, #FFBD12 44.08%, #FFD900 97.25%)',\n      border: '2px solid #000',\n      '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n        boxShadow: 'inherit',\n      },\n      '&:before': {\n        position: 'absolute',\n        left: 2,\n        zIndex: -1,\n        width: 20,\n        height: 2,\n        background: '#000',\n        borderRadius: 1,\n      },\n    },\n    '& .MuiSlider-valueLabel': {\n      lineHeight: 1.2,\n      fontSize: 12,\n      background: 'unset',\n      padding: 0,\n      width: 32,\n      height: 32,\n      borderRadius: '50% 50% 50% 0',\n      backgroundColor: '#52af77',\n      transformOrigin: 'left',\n      transform: 'translate(50%, -100%) rotate(-90deg) scale(0)',\n      '&:before': { display: 'none' },\n      '&.MuiSlider-valueLabelOpen': {\n        display: 'none',\n        transform: 'translate(50%, -100%) rotate(-90deg) scale(1)',\n      },\n      '& > *': {\n        transform: 'rotate(45deg)',\n      },\n    },\n  })\n})\n\nexport default function CustomizedSlider(props) {\n  return (\n    <PrettoSlider\n      valueLabelDisplay=\"auto\"\n      aria-label=\"pretto slider\"\n      orientation=\"vertical\"\n      defaultValue={90}\n      disabled\n      {...props}\n    />\n  )\n}\n","import React from 'react'\nimport { styled } from '@mui/material/styles'\n\nconst Content = styled('p')`\n  font-family: 'Heebo Regular', serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 21px;\n  color: rgba(0, 0, 0, 0.5);\n`\nfunction SubTitle(props) {\n  const { children } = props\n  return <Content {...props}>{children}</Content>\n}\n\nexport default SubTitle\n","import React, { useCallback, useState } from 'react'\nimport Methods from 'components/Methods'\nimport { Approve } from 'components/CommonComponent'\nimport tokens, { poolData } from 'config/constants/tokens'\nimport useToast from 'hooks/useToast'\nimport Assets from 'assets'\nimport Wallet from 'components/Menu/icons/Wallet'\nimport DataWrapper from 'components/DataWrapper'\nimport { TokenUtils, toSmallUnits } from 'utils/transformHelper'\nimport { useComputedIndexAction, usePositionInfo, usePositionAction } from 'hooks/news/usePoistion'\nimport { TransactionSubmittedInfo, TransactionSuccessInfo } from 'components/TransactionInfo'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport Logo from 'components/Logo'\n\nfunction AddGuaranteeFromWallet(props) {\n  const { walletTokenBalance, approveStatus, onApprove } = props\n  const [transferVal, setTransferVal] = useState<number>(0)\n  const [isDisabled, setDisabled] = useState(false)\n  const { toastSuccess, toastError, toastInfo } = useToast()\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n\n  const { currentPosition, collateralIndex } = usePositionInfo()\n  const { onUpdatePrepaidInterest, newDisplayCollateralRatio, newDisplayPrepaidInterestCoverage } =\n    useComputedIndexAction()\n  const { handleUpdatePosition, onAddPrepaidInterest } = usePositionAction()\n\n  const changeTransferVal = useCallback(\n    (e, type) => {\n      const numberVal = type === 0 ? Number(e.target.value) : walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]\n      const _transferAmount = toSmallUnits(\n        TokenUtils.formatTokenAmount(numberVal, currentPosition.mintTokenInfo.settlementCurrency.decimals),\n        currentPosition.mintTokenInfo.settlementCurrency.decimals,\n      )\n      if (numberVal > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol] || numberVal <= 0 || _transferAmount.isZero()) {\n        setDisabled(true)\n      } else {\n        setDisabled(false)\n      }\n      onUpdatePrepaidInterest(numberVal)\n      setTransferVal(type === 0 ? e.target.value : numberVal)\n    },\n    [currentPosition.mintTokenInfo.settlementCurrency.decimals, currentPosition.mintTokenInfo.settlementCurrency.symbol, onUpdatePrepaidInterest, walletTokenBalance],\n  )\n\n  const onSubmit = useCallback(async () => {\n    try {\n      if (!transferVal || (transferVal <= 0 && transferVal > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol])) {\n        toastError(ToastTitle.failed, 'Please enter a valid amount')\n        return\n      }\n      setDisabled(true)\n      const txInfo = await onAddPrepaidInterest(transferVal, false)\n      toastInfo(\n        ToastTitle.submited,\n        <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n      )\n      const result = await txInfo.wait()\n      if (result) {\n        toastSuccess(\n          ToastTitle.success,\n          <TransactionSuccessInfo content=\"Settlement added successfully\" txHash={txInfo.hash} />,\n        )\n        setDisabled(false)\n        setTransferVal(0)\n        onUpdatePrepaidInterest(0)\n        await handleUpdatePosition()\n      }\n    } catch (e: any) {\n      \n      setDisabled(false)\n    }\n  }, [transferVal, walletTokenBalance, currentPosition.mintTokenInfo.settlementCurrency.symbol, onAddPrepaidInterest, toastInfo, toastError, toastSuccess, onUpdatePrepaidInterest, handleUpdatePosition])\n\n  return (\n    <>\n      <Methods\n        SelectIcon={Wallet}\n        options={[\n          {\n            token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            balance: walletTokenBalance ? walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol] : 0,\n            symbol: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            icon: ()=> <Logo imgprops={{\n              style: {marginRight: 10}\n            }} token={currentPosition.mintTokenInfo.settlementCurrency.logo} symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol} />,\n            address:  currentPosition.mintTokenInfo.settlementCurrency.address,\n            rightOptionList: [\n              {\n                token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n                symbol: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n                icon: () => <Logo imgprops={{\n                  style: {marginRight: 10}\n                }} token={currentPosition.mintTokenInfo.settlementCurrency.logo} symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol} />,\n                address:  currentPosition.mintTokenInfo.settlementCurrency.address,\n                balance: collateralIndex.prepaidInterest,\n              },\n            ],\n          },\n        ]}\n        rightBalance={collateralIndex.prepaidInterest}\n        leftBalance={walletTokenBalance ? walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol] : 0}\n        rightSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        selectedSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        RightIcon={() => <img src={Assets.PrepaidInterest} style={{ width: 20 }} alt=\"\" />}\n        leftInputValue={transferVal}\n        rightInputValue={transferVal}\n        selectInput={(e) => {\n          changeTransferVal(e, 0)\n        }}\n        onMax={() => {\n          changeTransferVal({}, 1)\n        }}\n      />\n      <DataWrapper\n        data={[\n          [DataIndexName.CollateralRatio, collateralIndex.displayRatio, newDisplayCollateralRatio],\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={isDisabled || transferVal <= 0} onClick={onSubmit}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nexport default AddGuaranteeFromWallet\n","import React, { useCallback, useMemo, useState } from 'react'\nimport tokens from 'config/constants/tokens'\nimport Methods from 'components/Methods'\nimport Wallet from 'components/Menu/icons/Wallet'\nimport { AvatarIcon } from 'components/uikit'\nimport { Approve, IconWrap, TipWrap } from 'components/CommonComponent'\nimport { useTransfer } from 'hooks/useManager'\nimport DataWrapper from 'components/DataWrapper'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { useComputedIndexAction, usePositionInfo, usePositionAction } from 'hooks/news/usePoistion'\nimport Logo from 'components/Logo'\nimport { chainConfigs, commonTokens, SupportedChainId, tokenKey } from 'config/constants/tokenConfig'\nimport useToast from 'hooks/useToast'\nimport { TransactionSuccessInfo } from 'components/TransactionInfo'\n\nfunction AddCurrencyToAvatar(props) {\n  const { onApprove, approveStatus, account, chainId, walletTokenBalance } = props\n\n  const [transferVal, setTransferVal] = useState(0)\n  const [submitStatus, setSubmitStatus] = useState(true)\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n\n  const { toastError, toastSuccess } = useToast()\n  const { currentPosition, currentPositionTokenInfo, collateralIndex } = usePositionInfo()\n  const { onUpdateCollateralValue, newDisplayCollateralRatio, newDisplayPrepaidInterestCoverage } =\n    useComputedIndexAction()\n  const { handleUpdatePosition } = usePositionAction()\n  const transfer = useTransfer()\n\n  const tradingList = useMemo(() => {\n    const { allowedTokens } = currentPositionTokenInfo\n    const tokenList = Array.from(Object.values(allowedTokens.tokens)).map((item) => {\n      return {\n        ...item,\n        token: item.symbol,\n        icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={item.logo} symbol={item.symbol} />,\n        balance: walletTokenBalance[item.symbol],\n        rightOptionList: [\n          {\n            ...item,\n            token: item.symbol,\n            icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={item.logo} symbol={item.symbol} />,\n            balance: toLargeUnits(allowedTokens.balances[item.symbol], item.decimals),\n          },\n        ],\n      }\n    })\n    return tokenList\n  }, [currentPositionTokenInfo, walletTokenBalance])\n  const [selectIndex, setSelectIndex] = useState<number>(0)\n\n  const leftSelectedToken = useMemo(() => {\n    return (\n      (tradingList.length && tradingList[selectIndex]) || {\n        ...currentPosition.mintTokenInfo.settlementCurrency,\n        balance: walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol],\n      }\n    )\n  }, [currentPosition.mintTokenInfo.settlementCurrency, selectIndex, tradingList, walletTokenBalance])\n  const rightSelectedToken = useMemo(() => {\n    return (\n      (tradingList.length && tradingList[selectIndex].rightOptionList[0]) || {\n        ...currentPosition.mintTokenInfo.settlementCurrency,\n        balance: toLargeUnits(\n          currentPositionTokenInfo.allowedTokens.balances[currentPosition.mintTokenInfo.settlementCurrency.symbol],\n          currentPosition.mintTokenInfo.settlementCurrency.decimals,\n        ),\n      }\n    )\n  }, [\n    currentPosition?.mintTokenInfo.settlementCurrency,\n    currentPositionTokenInfo?.allowedTokens.balances,\n    selectIndex,\n    tradingList,\n  ])\n  const onTransfer = useCallback(async () => {\n    try {\n      setSubmitStatus(true)\n      console.log('transferVal :>> ', transferVal);\n      const tx = await transfer(\n        account,\n        chainConfigs[chainId as SupportedChainId].tokens[leftSelectedToken.symbol].address,\n        currentPosition?.positionAddress,\n        toSmallUnits(\n          TokenUtils.formatDecimalString(String(transferVal), commonTokens[leftSelectedToken.symbol].decimals),\n          commonTokens[leftSelectedToken.symbol].decimals,\n        ),\n      )\n      if (tx) {\n        setSubmitStatus(false)\n        setTransferVal(0)\n        toastSuccess(ToastTitle.success, <TransactionSuccessInfo content='Collateral added successfully.' txHash={tx.transactionHash} />)\n        onUpdateCollateralValue({\n          symbol: leftSelectedToken.symbol as tokenKey,\n          value: 0,\n        })\n        await handleUpdatePosition()\n      }\n    } catch (e: any) {\n      toastError(ToastTitle.failed, e?.reason)\n      setSubmitStatus(false)\n    }\n  }, [\n    transfer,\n    account,\n    leftSelectedToken,\n    chainId,\n    currentPosition,\n    transferVal,\n    toastSuccess,\n    onUpdateCollateralValue,\n    handleUpdatePosition,\n    toastError,\n  ])\n  return (\n    <>\n      <Methods\n        options={tradingList}\n        rightOptions={tradingList}\n        leftInputValue={transferVal}\n        leftBalance={leftSelectedToken.balance}\n        leftSelectValue={leftSelectedToken.symbol}\n        rightInputValue={transferVal}\n        rightBalance={rightSelectedToken.balance}\n        rightSelectValue={rightSelectedToken.symbol}\n        SelectIcon={Wallet}\n        selectInput={({ target }) => {\n          setTransferVal(target.value)\n          if (target.value > 0 && target.value <= leftSelectedToken.balance) {\n            const _transferVal = toSmallUnits(\n              TokenUtils.formatTokenAmount(target.value, leftSelectedToken.decimals),\n              leftSelectedToken.decimals,\n            )\n            setSubmitStatus(_transferVal.isZero())\n          } else {\n            setSubmitStatus(true)\n          }\n\n          onUpdateCollateralValue({\n            symbol: leftSelectedToken.symbol as tokenKey,\n            value: target.value,\n          })\n        }}\n        leftChange={(selected) => {\n          const _index = tradingList.findIndex((item) => item.symbol === selected.symbol)\n          setSelectIndex(_index)\n          setTransferVal(0)\n          onUpdateCollateralValue({\n            symbol: selected.symbol,\n            value: 0,\n          })\n        }}\n        onMax={() => {\n          if (walletTokenBalance) {\n            if (leftSelectedToken.balance) {\n              setTransferVal(leftSelectedToken.balance)\n              onUpdateCollateralValue({\n                symbol: leftSelectedToken.symbol as tokenKey,\n                value: leftSelectedToken.balance,\n              })\n              if (leftSelectedToken.balance > 0) {\n                setSubmitStatus(false)\n              }\n            }\n          }\n        }}\n        RightIcon={AvatarIcon}\n      />\n      <DataWrapper\n        data={[\n          [DataIndexName.CollateralRatio, collateralIndex.displayRatio, newDisplayCollateralRatio],\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      <TipWrap>\n        <IconWrap style={{ background: '#FF7D00', color: '#fff' }}>!</IconWrap>\n        <p>\n          Add asset to Collateral won’t effect the Prepaid Interest Coverage, so you might need to add the specific\n          asset in method 1 first.\n        </p>\n      </TipWrap>\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={submitStatus || transferVal <= 0} onClick={onTransfer}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nexport default AddCurrencyToAvatar\n","import React from 'react'\nimport { Typography } from '@mui/material/'\nimport { useWeb3React } from 'web3-react-core'\nimport usePanel from 'hooks/usePanel'\n\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails } from 'components/CommonComponent'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport AddGuaranteeFromWallet from './AddGuaranteeFromWallet'\nimport AddCurrencyToAvatar from './AddCurrencyToAvatar'\n\nexport default function BeforeMintAction(props) {\n  const { approveStatus, onApprove } = props\n  const { walletTokenBalance } = useHashPowerToken()\n  const { expanded, handleChange } = usePanel()\n  const { active, chainId, account } = useWeb3React()\n\n  return (\n    <Wrapper>\n      <Title>Add collateral before mint</Title>\n      <Accordion id=\"panel1\" expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Add asset from my wallet to Prepaid Interest</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel1' && (\n            <AddGuaranteeFromWallet\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel2\" expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 2. Add asset from my wallet to Collateral</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel2' && (\n            <AddCurrencyToAvatar\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Typography } from '@mui/material/'\nimport Wallet from 'components/Menu/icons/Wallet'\nimport Methods from 'components/Methods'\nimport { useWeb3React } from 'web3-react-core'\nimport { AvatarIcon, GuaranteeIcon } from 'components/uikit'\nimport DataWrapper from 'components/DataWrapper'\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails, Approve } from 'components/CommonComponent'\nimport usePanel from 'hooks/usePanel'\n// import tokens from 'config/constants/tokens'\nimport useToast from 'hooks/useToast'\nimport contracts from 'config/constants/contracts'\nimport { ethers, utils } from 'ethers'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport useSystemParams from 'hooks/useSystemParams'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport { useComputedIndexAction, usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport PositionABI from 'config/abi/Position.json'\nimport Logo from 'components/Logo'\nimport { chainConfigs, SupportedChainId, SupportedTokens, TokenConfig } from 'config/constants/tokenConfig'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { TransactionSubmittedInfo } from 'components/TransactionInfo'\nimport { getSwapQuote } from 'config/constants/pool'\n\nconst { ActionUser } = contracts\nconst ActionUserInterface = new utils.Interface(ActionUser.abi)\nconst WidrawFromPrepaidInterestToWallet = (props: { approveStatus: boolean; onApprove: any }) => {\n  const { approveStatus, onApprove } = props\n  const [actionDisable, setActionDisable] = useState(true)\n  const { chainId, account } = useWeb3React()\n  const { currentPosition, collateralIndex } = usePositionInfo()\n  const [trading, setTrading] = useState(false)\n  const [transferAmount, setTransferAmount] = useState<number>(0)\n  const { toastError, toastSuccess, toastInfo } = useToast()\n  const { walletTokenBalance } = useHashPowerToken()\n  const { signer } = useSystemParams()\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n  const {\n    onUpdatePrepaidInterest,\n    newDisplayCollateralRatio,\n    newPrepaidInterestCoverage,\n    newCollateralRatio,\n    newDisplayPrepaidInterestCoverage,\n    minCollateralValue,\n  } = useComputedIndexAction()\n\n  const { handleUpdatePosition } = usePositionAction()\n  const onGuaranteeCurrencyToWallet = useCallback(async () => {\n    try {\n      setTrading(true)\n      const data = ActionUserInterface.encodeFunctionData('moveGuarantee', [\n        account,\n        toSmallUnits(transferAmount.toString(), currentPosition.mintTokenInfo.settlementCurrency.decimals),\n      ])\n      const positionContract = new ethers.Contract(currentPosition.positionAddress, PositionABI, signer)\n      const txInfo = await positionContract.delegateCall(ActionUser.address[chainId], data)\n      if (txInfo) {\n        setTransferAmount(0)\n        toastInfo(\n          ToastTitle.submited,\n          <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n        )\n        const result = await txInfo.wait()\n        if (result) {\n          setTrading(false)\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSubmittedInfo content=\"The transactions was successful\" txHash={txInfo.hash} />,\n          )\n          await handleUpdatePosition()\n        }\n      }\n    } catch (e: any) {\n      setTrading(false)\n      toastError(ToastTitle.failed, e?.reason)\n    }\n  }, [\n    account,\n    chainId,\n    currentPosition.mintTokenInfo.settlementCurrency.decimals,\n    currentPosition.positionAddress,\n    handleUpdatePosition,\n    signer,\n    toastError,\n    toastInfo,\n    toastSuccess,\n    transferAmount,\n  ])\n\n  const onInput = (e) => {\n    setTransferAmount(e.target.value)\n  }\n  useEffect(() => {\n    if (\n      newCollateralRatio < 120 ||\n      newPrepaidInterestCoverage < 20 ||\n      transferAmount <= 0 ||\n      transferAmount > (collateralIndex.prepaidInterest as number) ||\n      trading\n    ) {\n      setActionDisable(true)\n    } else {\n      setActionDisable(false)\n    }\n  }, [collateralIndex.prepaidInterest, newCollateralRatio, newPrepaidInterestCoverage, trading, transferAmount])\n\n  useEffect(() => {\n    if (transferAmount >= 0) {\n      const val = transferAmount >= 0 ? Number(`-${transferAmount}`) : 0\n      onUpdatePrepaidInterest(Number.isNaN(val) ? 0 : val)\n    } else {\n      onUpdatePrepaidInterest(0)\n    }\n  }, [onUpdatePrepaidInterest, transferAmount])\n\n  const tradingList = useMemo(() => {\n    return [\n      {\n        decimals: currentPosition.mintTokenInfo.settlementCurrency.decimals,\n        token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n        balance: collateralIndex.prepaidInterest,\n        icon: () => (\n          <Logo\n            imgprops={{ style: { marginRight: 10 } }}\n            token={currentPosition.mintTokenInfo.settlementCurrency.logo}\n            symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n          />\n        ),\n        rightOptionList: [\n          {\n            decimals: currentPosition.mintTokenInfo.settlementCurrency.decimals,\n            token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            balance: walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol],\n            icon: () => (\n              <Logo\n                imgprops={{ style: { marginRight: 10 } }}\n                token={currentPosition.mintTokenInfo.settlementCurrency.logo}\n                symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n              />\n            ),\n          },\n        ],\n      },\n    ]\n  }, [collateralIndex, currentPosition, walletTokenBalance])\n\n  return (\n    <>\n      <Methods\n        selectInput={onInput}\n        onMax={() => {\n          const pimin = 20 * currentPosition.positionStatus.estimatedDailyDebt.toNumber()\n          const pi = Number(\n            TokenUtils.formatTokenAmount(\n              Number(collateralIndex.prepaidInterest) -\n                (toLargeUnits(pimin, currentPosition.mintTokenInfo.settlementCurrency.decimals, true) as number),\n              currentPosition.mintTokenInfo.settlementCurrency.decimals,\n            ),\n          )\n          if (pi > 0 && minCollateralValue >= 0) {\n            if (pi > minCollateralValue) {\n              setTransferAmount(Number(TokenUtils.formatFourDecimals(minCollateralValue)))\n            } else {\n              setTransferAmount(Number(TokenUtils.formatFourDecimals(pi)))\n            }\n          } else {\n            setTransferAmount(0)\n          }\n        }}\n        SelectIcon={GuaranteeIcon}\n        options={tradingList}\n        leftBalance={collateralIndex.prepaidInterest}\n        rightBalance={walletTokenBalance && walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]}\n        rightSelectedValue={42}\n        rightSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        selectValue={42}\n        selectedBalance={100}\n        selectedSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        leftInputValue={transferAmount}\n        rightInputValue={transferAmount}\n        RightIcon={Wallet}\n      />\n      <DataWrapper\n        data={[\n          ['Collateral Ratio', collateralIndex.displayRatio, newDisplayCollateralRatio],\n          ['Prepaid Interest Coverage', collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={actionDisable} onClick={onGuaranteeCurrencyToWallet}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nconst WidrawFromCollateralToWallet: React.FC<{\n  approveStatus: boolean\n  onApprove: (callback: (state: boolean) => void) => void\n}> = (props) => {\n  const { chainId, account } = useWeb3React()\n  const { approveStatus, onApprove } = props\n  const { signer } = useSystemParams()\n  const { walletTokenBalance } = useHashPowerToken()\n  const [transferAmount, setTransferAmount] = useState<number>(0)\n  const { tokenPools } = useSystemParams()\n\n  const [leftSelectedToken, setLeftSelectedToken] = useState<\n    { balance: number; token: SupportedTokens } & Omit<TokenConfig, 'logo'>\n  >({\n    balance: 0,\n    token: SupportedTokens.WBTC,\n    decimals: 8,\n    address: '',\n    symbol: SupportedTokens.WBTC,\n  })\n  const [rightSelectedToken, setRightSelectedToken] = useState<\n    { balance: number; token: SupportedTokens } & Omit<TokenConfig, 'logo'>\n  >({\n    balance: 0,\n    token: SupportedTokens.WBTC,\n    decimals: 8,\n    address: '',\n    symbol: SupportedTokens.WBTC,\n  })\n  const [actionDisable, setActionDisable] = useState(true)\n\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n\n  const { currentPosition, currentPositionTokenInfo, collateralIndex } = usePositionInfo()\n  const {\n    onUpdateCollateralValue,\n    newDisplayCollateralRatio,\n    newCollateralRatio,\n    newDisplayPrepaidInterestCoverage,\n    minCollateralValue,\n  } = useComputedIndexAction()\n  const { handleUpdatePosition } = usePositionAction()\n  const { toastError, toastSuccess, toastInfo } = useToast()\n  const [trading, setTrading] = useState(false)\n\n  useEffect(() => {\n    if (leftSelectedToken) {\n      const val = toSmallUnits(\n        TokenUtils.formatTokenAmount(transferAmount, leftSelectedToken.decimals),\n        leftSelectedToken.decimals,\n      )\n      if (!val.isZero() && transferAmount <= leftSelectedToken.balance && !trading) {\n        setActionDisable(false)\n      } else {\n        setActionDisable(true)\n      }\n      if (newCollateralRatio <= 120) {\n        setActionDisable(true)\n      }\n    }\n  }, [leftSelectedToken, transferAmount, trading, newCollateralRatio])\n\n  useEffect(() => {\n    const transferAmountVal = Number(`-${transferAmount}`)\n    onUpdateCollateralValue({\n      symbol: leftSelectedToken.token as any,\n      value: Number.isNaN(transferAmountVal) ? 0 : transferAmountVal,\n    })\n  }, [leftSelectedToken, onUpdateCollateralValue, transferAmount])\n\n  const onTransfer = useCallback(async () => {\n    setTrading(true)\n    setActionDisable(true)\n    if (transferAmount <= 0) {\n      setTrading(false)\n      toastError(ToastTitle.failed, 'Please enter a valid amount')\n      return\n    }\n    const withdrawAssetParams = ActionUserInterface.encodeFunctionData('withdrawAsset', [\n      chainConfigs[chainId as SupportedChainId].tokens[leftSelectedToken.token].address,\n      account,\n      toSmallUnits(\n        TokenUtils.formatTokenAmount(transferAmount, leftSelectedToken.decimals),\n        leftSelectedToken.decimals,\n      ),\n    ])\n    try {\n      const positionContract = new ethers.Contract(currentPosition.positionAddress, PositionABI, signer)\n      const txInfo = await positionContract.delegateCall(ActionUser.address[chainId], withdrawAssetParams)\n      if (txInfo.hash) {\n        toastInfo(\n          ToastTitle.submited,\n          <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n        )\n        const result = await txInfo.wait()\n        if (result) {\n          setTrading(false)\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSubmittedInfo content=\"The transactions was successful\" txHash={txInfo.hash} />,\n          )\n          setTransferAmount(0)\n          await handleUpdatePosition()\n        }\n      }\n    } catch (e: any) {\n      setTrading(false)\n      toastError(ToastTitle.failed, e?.reason)\n    }\n  }, [\n    leftSelectedToken,\n    chainId,\n    account,\n    transferAmount,\n    currentPosition.positionAddress,\n    signer,\n    toastInfo,\n    toastSuccess,\n    handleUpdatePosition,\n    toastError,\n  ])\n\n  const onMax = (type) => {\n    const { settlementCurrency } = currentPosition.mintTokenInfo\n    if (type === 1) {\n      if (leftSelectedToken.token === settlementCurrency.symbol) {\n        if (minCollateralValue < leftSelectedToken.balance) {\n          setTransferAmount(Number(TokenUtils.formatFourDecimals(minCollateralValue)))\n        } else {\n          setTransferAmount(Number(TokenUtils.formatFourDecimals(leftSelectedToken.balance)))\n        }\n      } else {\n        const unitPrice = getSwapQuote(\n          chainId,\n          leftSelectedToken.token,\n          settlementCurrency.symbol,\n          toSmallUnits(\n            TokenUtils.formatTokenAmount(minCollateralValue, settlementCurrency.decimals),\n            settlementCurrency.decimals,\n          ),\n          tokenPools,\n        )\n        const minCollateralValueTokenPrice = toLargeUnits(unitPrice, leftSelectedToken.decimals, true) as number\n        if (minCollateralValueTokenPrice < leftSelectedToken.balance) {\n          setTransferAmount(Number(TokenUtils.formatFourDecimals(minCollateralValueTokenPrice)))\n        } else {\n          setTransferAmount(Number(TokenUtils.formatFourDecimals(leftSelectedToken.balance)))\n        }\n      }\n    }\n  }\n\n  const tradingList = useMemo(() => {\n    const { allowedTokens } = currentPositionTokenInfo\n    if (allowedTokens.tokens) {\n      return Object.keys(allowedTokens.tokens).map((item) => {\n        const token = allowedTokens.tokens[item as SupportedTokens]\n        const current = {\n          icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={token.logo} symbol={token.symbol} />,\n          token: token.symbol,\n          balance: toLargeUnits(allowedTokens.balances[item as SupportedTokens], token.decimals, true) as number,\n          decimals: token.decimals,\n          address: token.address,\n        }\n        return {\n          ...current,\n          rightOptionList: [\n            {\n              ...current,\n              balance: walletTokenBalance[item as SupportedTokens] as number,\n            },\n          ],\n        }\n      })\n    }\n    return []\n  }, [currentPositionTokenInfo, walletTokenBalance])\n\n  useEffect(() => {\n    const activeToken =\n      (tradingList.find((it) => it.token === currentPosition.mintTokenInfo.settlementCurrency.symbol) as any) ||\n      (tradingList[0] as any)\n    setLeftSelectedToken(activeToken)\n    setRightSelectedToken(activeToken)\n  }, [currentPosition.mintTokenInfo.settlementCurrency.symbol, tradingList])\n\n  return (\n    <>\n      <Methods\n        rightOptions={[rightSelectedToken]}\n        SelectIcon={AvatarIcon}\n        options={tradingList}\n        // leftSelectValue={leftSelectedToken ? leftSelectedToken.token : ''}\n        // rightSelectValue={rightSelectedToken ? rightSelectedToken.token : ''}\n        leftInputValue={transferAmount}\n        rightInputValue={transferAmount}\n        leftChange={(selected) => {\n          setLeftSelectedToken(selected)\n          setRightSelectedToken(selected.rightOptionList[0])\n          setTransferAmount(0)\n        }}\n        selectInput={(e) => {\n          setTransferAmount(e.target.value)\n          if (e.target.value > 0 && e.target.value <= leftSelectedToken.balance) {\n            setActionDisable(false)\n          } else {\n            setActionDisable(true)\n          }\n        }}\n        onMax={() => {\n          onMax(1)\n        }}\n        RightIcon={Wallet}\n      />\n      <DataWrapper\n        data={[\n          [DataIndexName.CollateralRatio, collateralIndex.displayRatio, newDisplayCollateralRatio],\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={actionDisable} onClick={onTransfer}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nexport default function WithdrawCollateral(props) {\n  const { expanded, handleChange } = usePanel()\n  return (\n    <Wrapper>\n      <Title>Withdraw Collateral</Title>\n      <Accordion id=\"panel13\" expanded={expanded === 'panel13'} onChange={handleChange('panel13')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Withdraw asset from Collateral to my wallet</Typography>\n        </AccordionSummary>\n        <AccordionDetails>{expanded === 'panel13' && <WidrawFromCollateralToWallet {...props} />}</AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel14\" expanded={expanded === 'panel14'} onChange={handleChange('panel14')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 2. Withdraw asset from Prepaid Interest to my wallet</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel14' && <WidrawFromPrepaidInterestToWallet {...props} />}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { styled } from '@mui/material/styles'\nimport { useWeb3React } from 'web3-react-core'\nimport { ButtonBase } from '@mui/material'\nimport { ethers, utils } from 'ethers'\nimport Select from 'components/Select'\nimport WalletIcon from 'components/Menu/icons/Wallet'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport useSystemParams from 'hooks/useSystemParams'\nimport PositionABI from 'config/abi/Position.json'\nimport useToast from 'hooks/useToast'\nimport { useApprove, useCheckApprove } from 'hooks/useApprove'\nimport contracts from 'config/constants/contracts'\nimport { AvatarIcon, Button } from 'components/uikit'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport { useComputedIndexAction, usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { TransactionSuccessInfo } from 'components/TransactionInfo'\nimport Logo from 'components/Logo'\n\nconst SelectGroup = styled('div')`\n  button.MuiSelectUnstyled-root {\n    width: 200px;\n  }\n\n  div.MuiInput-root {\n    width: calc(100% - 200px) !important;\n  }\n\n  div.topFunc {\n    display: flex;\n    align-items: center;\n    padding: 5px 10px;\n\n    span {\n      margin-left: 10px;\n      font-size: 12px;\n      color: rgba(0, 0, 0, 0.5);\n    }\n  }\n`\nconst Tip = styled('div')`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 18px;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 17px;\n  color: rgba(0, 0, 0, 0.5);\n  background: #def1ff;\n  border-radius: 14px;\n  padding: 16px 19px 11px;\n  p span:first-of-type {\n    margin-right: 10px;\n  }\n\n  & + p {\n    font-weight: 400;\n    font-size: 12px;\n    line-height: 17px;\n    color: #000000;\n    margin-bottom: 30px;\n  }\n\n  .info_panel {\n    width: 100%;\n    text-align: right;\n    .footer {\n      border-top: 0.5px solid rgba(0, 0, 0, 0.12);\n    }\n    td {\n      font-family: PingFangSC-Regular, sans-serif;\n      font-weight: 400;\n      font-size: 12px;\n      padding: 5px 0;\n    }\n    .label {\n      text-align: left;\n      width: 30%;\n    }\n    .from,\n    .to {\n      width: 35%;\n      line-height: 17px;\n    }\n    .to {\n      font-family: PingFangSC-Medium, sans-serif;\n      font-weight: 500;\n      color: #000;\n    }\n  }\n`\nconst Func = styled('div')`\n  padding: 10px 20px 5px;\n\n  button {\n    color: #2aa1ff;\n  }\n`\n\nconst NeutralizeButton = styled(Button)`\n  background: linear-gradient(90deg, #61c2f7 0%, #7ae9f0 100%);\n  border-radius: 20px !important;\n  box-shadow: none !important;\n  line-height: 46px !important;\n  height: 46px !important;\n  display: block !important;\n  margin: 30px auto 0 !important;\n  width: 30% !important;\n  color: #000;\n`\n\nconst SelectTypeWrap = styled('div')`\n  h3 {\n    font-size: 16px;\n    font-family: PingFangSC-Medium, sans-serif;\n    margin-bottom: 16px;\n  }\n  .content {\n    display: flex;\n  }\n  .item_wrap {\n    min-width: 200px;\n    padding: 1px;\n    border-radius: 14px;\n    overflow: hidden;\n    margin-right: 16px;\n    background: #e3e8ed;\n    cursor: pointer;\n    user-select: none;\n    span {\n      font-family: PingFangSC-Regular, sans-serif;\n      color: rgba(0, 0, 0, 0.5);\n      font-size: 12px;\n      line-height: 17px;\n      &:first-of-type {\n        margin-right: 30px;\n      }\n    }\n    &.active {\n      padding: 2px;\n      background: linear-gradient(270deg, #7ae9f0 0%, #61c3f7 100%);\n      span {\n        color: #000;\n      }\n    }\n  }\n  .item {\n    border-radius: 12px;\n    //border: 2px solid #E3E8ED;\n    //border-image: linear-gradient(#7AE9F0 , #61C3F7) 30 30;\n    padding: 14px 14px 9px 10px;\n    background: #fff;\n    width: 100%;\n    height: 100%;\n    //box-sizing: border-box;\n    h4 {\n      font-family: PingFangSC-Semibold, sans-serif;\n      font-weight: 550;\n      display: flex;\n      align-items: center;\n      line-height: 20px;\n      font-size: 14px;\n      margin-bottom: 22px;\n      svg {\n        margin-right: 8.5px;\n      }\n    }\n    p {\n      display: flex;\n      justify-content: space-between;\n    }\n  }\n`\n\nconst TipInfo = styled('div')`\n  display: flex;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.03);\n  border-radius: 8px;\n  padding: 16px 20px;\n  p {\n    line-height: 20px;\n    font-size: 14px;\n    font-family: PingFangSC-Regular, sans-serif;\n    margin-left: 16px;\n    color: rgba(0, 0, 0, 0.5);\n  }\n`\n\nconst RED = 'red'\n\nenum NeutralizeType {\n  Wallet = 'wallet',\n  Avatar = 'avatar',\n}\n\nconst { ActionUser: fbtc20mint } = contracts\nfunction NeutralizeComp() {\n  const { setRefresh, walletTokenBalance } = useHashPowerToken()\n  const { signer } = useSystemParams()\n  const { active, chainId, account } = useWeb3React()\n  const [approveStatus, setApproveStatus] = useState(false)\n  const [disabledAction, setDisabledAction] = useState(true)\n  const [neutralizeAmount, setNeutralizeAmount] = useState(0)\n  // const posContract = usePosContract(active, signer)\n  const [neutralizeType, setNeutralizeType] = useState<NeutralizeType>(NeutralizeType.Wallet)\n\n  const { toastSuccess, toastError, toastInfo } = useToast()\n  const { currentMintToken, currentPosition, currentPositionTokenInfo, collateralIndex } = usePositionInfo()\n  const {\n    onUpdateNeutralizeValue,\n    newNeutralizeFee,\n    newDisplayCollateralRatio,\n    newDisplayPrepaidInterestCoverage,\n    newEstimatedDailyDebt,\n  } = useComputedIndexAction()\n\n  const { handleUpdatePosition } = usePositionAction()\n\n  const { handleApprove } = useApprove(account, currentPosition?.mintTokenInfo.address)\n  const { onCheckApprove } = useCheckApprove()\n\n  const onApprove = useCallback(async () => {\n    try {\n      const info = await handleApprove(currentPosition?.positionAddress)\n      setApproveStatus(true)\n      if (info.hash) {\n        toastInfo(\n          ToastTitle.submited,\n          <TransactionSuccessInfo txHash={info.hash} content=\"The approve has been submitted\" />,\n        )\n        const result = await info.wait()\n\n        if (result) {\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSuccessInfo txHash={info.hash} content=\"The approve has been successfully\" />,\n          )\n        }\n      }\n    } catch ({ message }: any) {\n      setApproveStatus(false)\n      toastError(ToastTitle.failed, `${message}`)\n    }\n  }, [handleApprove, currentPosition?.positionAddress, toastInfo, toastSuccess, toastError])\n\n  const settlementCurrencyValues = useMemo(() => {\n    const settlementCurrency = currentPosition?.mintTokenInfo.settlementCurrency\n    if (currentPositionTokenInfo?.allowedTokens) {\n      return {\n        [settlementCurrency.symbol]:  Number(TokenUtils.formatDecimalString(utils.formatUnits(\n          currentPositionTokenInfo.allowedTokens.balances[settlementCurrency.symbol],\n          settlementCurrency.decimals,\n        ) as any, 4)),\n        [currentMintToken]: Number(TokenUtils.formatDecimalString(utils.formatUnits(\n          currentPositionTokenInfo.allowedTokens.balances[currentPosition.mintTokenInfo.symbol],\n          currentPosition.mintTokenInfo.decimals,\n        ) as any, 4)),\n      }\n    }\n    return {\n      [settlementCurrency.symbol]: 0,\n      [currentMintToken]: 0,\n    }\n  }, [currentMintToken, currentPosition, currentPositionTokenInfo])\n\n  const checkApprove = useCallback(async () => {\n    if (currentPosition.isEnable) {\n      const txInfo = await onCheckApprove(\n        account,\n        currentPosition.mintTokenInfo.address,\n        currentPosition.positionAddress,\n      )\n      setApproveStatus(txInfo && txInfo._hex > 0)\n    }\n  }, [account, currentPosition, onCheckApprove])\n\n  const onChangeNeutralizeAmount = useCallback(\n    ({ target }) => {\n      const { value } = target\n      const { mintTokenInfo, balance } = currentPosition\n      const _decimals = mintTokenInfo.decimals\n\n      setNeutralizeAmount(value)\n\n      const formattedValue = value ? Number(`-${value}`) : 0\n      const actionVal = Number(TokenUtils.formatTokenAmount(formattedValue, _decimals))\n      onUpdateNeutralizeValue(actionVal)\n\n      const debt = toLargeUnits(balance, _decimals)\n      const isValueWithinBounds = value > 0 && value <= debt\n\n      const isWalletValueValid = isValueWithinBounds && value <= walletTokenBalance[currentMintToken]\n      const isCollateralValueValid = isValueWithinBounds && value <= settlementCurrencyValues[currentMintToken]\n\n      const isValueValid = neutralizeType === NeutralizeType.Wallet ? isWalletValueValid : isCollateralValueValid\n\n      setDisabledAction(!isValueValid)\n\n      if (value > 0) {\n        const transferValue = toSmallUnits(TokenUtils.formatTokenAmount(value, _decimals), _decimals)\n\n        const isFinalValueValid = isValueValid && !transferValue.isZero()\n        setDisabledAction(!isFinalValueValid)\n      }\n    },\n    [\n      onUpdateNeutralizeValue,\n      settlementCurrencyValues,\n      currentMintToken,\n      walletTokenBalance,\n      neutralizeType,\n      currentPosition,\n    ],\n  )\n\n  const onNeutralize = useCallback(async () => {\n    if (!disabledAction) {\n      const interf = new utils.Interface(fbtc20mint.abi)\n      const data = interf.encodeFunctionData('neutralizetBalance', [\n        toSmallUnits(\n          TokenUtils.formatTokenAmount(neutralizeAmount, currentPosition.mintTokenInfo.decimals),\n          currentPosition.mintTokenInfo.decimals,\n        ),\n        neutralizeType === NeutralizeType.Wallet,\n      ])\n      try {\n        const positionContract = new ethers.Contract(currentPosition.positionAddress, PositionABI, signer)\n        const info = await positionContract.delegateCall(fbtc20mint.address[chainId], data)\n        if (info) {\n          setDisabledAction(true)\n          setNeutralizeAmount(0)\n          toastInfo(\n            ToastTitle.success,\n            <TransactionSuccessInfo txHash={info.hash} content=\"Waiting for confirmation\" />,\n          )\n          const result = await info.wait()\n          if (result) {\n            setRefresh((state) => !state)\n            toastSuccess(\n              ToastTitle.success,\n              <TransactionSuccessInfo txHash={info.hash} content=\"The transaction has been successfully\" />,\n            )\n            await handleUpdatePosition()\n            setDisabledAction(true)\n            onUpdateNeutralizeValue(0)\n          }\n        }\n      } catch (e: any) {\n        toastError(ToastTitle.failed, e?.reason || e?.message)\n      }\n    }\n  }, [\n    chainId,\n    currentPosition.mintTokenInfo.decimals,\n    currentPosition.positionAddress,\n    disabledAction,\n    handleUpdatePosition,\n    neutralizeAmount,\n    neutralizeType,\n    onUpdateNeutralizeValue,\n    setRefresh,\n    signer,\n    toastError,\n    toastInfo,\n    toastSuccess,\n  ])\n\n  useEffect(() => {\n    checkApprove()\n  }, [checkApprove])\n  \n  return (\n    <>\n      <SelectGroup>\n        <Select\n          selectValue={currentMintToken}\n          groupStyle={{ width: '100%' }}\n          options={[\n            {\n              ...currentPosition?.mintTokenInfo,\n              icon: () => (\n                <Logo\n                  imgprops={{ style: { marginRight: 10 } }}\n                  token={currentPosition?.mintTokenInfo.logo}\n                  symbol={currentMintToken}\n                />\n              ),\n              token: currentPosition.mintTokenInfo.symbol,\n            },\n          ]}\n          actionValue={neutralizeAmount}\n          selectInput={onChangeNeutralizeAmount}\n          isGroup\n        />\n        <Func dir=\"rtl\">\n          <ButtonBase\n            onClick={() => {\n              const debt = toLargeUnits(currentPosition.balance, currentPosition.mintTokenInfo.decimals)\n              if (neutralizeType === NeutralizeType.Wallet) {\n                const value = Math.min(Number(walletTokenBalance[currentMintToken]), Number(debt))\n                onChangeNeutralizeAmount({ target: { value } })\n              } else {\n                const value = Math.min(Number(settlementCurrencyValues[currentMintToken]), Number(debt))\n                onChangeNeutralizeAmount({ target: { value } })\n              }\n            }}\n          >\n            Max\n          </ButtonBase>\n        </Func>\n        <SelectTypeWrap>\n          <h3>Neutralize the asset from</h3>\n          <div className=\"content\">\n            <div\n              className={`item_wrap ${neutralizeType === NeutralizeType.Wallet ? 'active' : ''}`}\n              onClick={() => {\n                setNeutralizeType(NeutralizeType.Wallet)\n                if (neutralizeAmount > 0) {\n                  setDisabledAction(\n                    newNeutralizeFee > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol] ||\n                      neutralizeAmount > walletTokenBalance[currentMintToken],\n                  )\n                }\n              }}\n              onKeyUp={() => null}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <div className=\"item wallet\">\n                <h4>\n                  <WalletIcon /> My Wallet\n                </h4>\n                <p>\n                  <span>{currentMintToken}</span>\n                  <span\n                    style={{\n                      color:\n                        (neutralizeType === NeutralizeType.Wallet &&\n                          walletTokenBalance &&\n                          neutralizeAmount > walletTokenBalance[currentMintToken] &&\n                          RED) ||\n                        '',\n                    }}\n                  >\n                    {(walletTokenBalance && TokenUtils.formatFourDecimals(walletTokenBalance[currentMintToken])) || 0}\n                  </span>\n                </p>\n                <p>\n                  <span>{currentPosition.mintTokenInfo.settlementCurrency.symbol}</span>\n                  <span\n                    style={{\n                      color:\n                        neutralizeType === NeutralizeType.Wallet &&\n                        walletTokenBalance &&\n                        newNeutralizeFee > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]\n                          ? RED\n                          : '',\n                    }}\n                  >\n                    {(walletTokenBalance && TokenUtils.formatFourDecimals(walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol])) || 0}\n                  </span>\n                </p>\n              </div>\n            </div>\n\n            <div\n              className={`item_wrap ${neutralizeType === NeutralizeType.Avatar ? 'active' : ''}`}\n              onClick={() => {\n                setNeutralizeType(NeutralizeType.Avatar)\n                if (neutralizeAmount > 0) {\n                  setDisabledAction(\n                    neutralizeAmount > settlementCurrencyValues[currentMintToken] ||\n                      newNeutralizeFee >\n                        settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol],\n                  )\n                }\n              }}\n              onKeyUp={() => null}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <div className=\"item avatar\">\n                <h4>\n                  <AvatarIcon />\n                  Collateral\n                </h4>\n                <p>\n                  <span>{currentMintToken}</span>\n                  <span\n                    style={{\n                      color:\n                        (neutralizeType === NeutralizeType.Avatar &&\n                          neutralizeAmount > settlementCurrencyValues[currentMintToken] &&\n                          RED) ||\n                        '',\n                    }}\n                  >\n                    {settlementCurrencyValues[currentPosition.mintTokenInfo.symbol]}\n                  </span>\n                </p>\n                <p>\n                  <span>{currentPosition.mintTokenInfo.settlementCurrency.symbol}</span>\n                  <span\n                    style={{\n                      color:\n                        (neutralizeType === NeutralizeType.Avatar &&\n                          newNeutralizeFee >\n                            settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol] &&\n                          RED) ||\n                        '',\n                    }}\n                  >\n                    {settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol]}\n                  </span>\n                </p>\n              </div>\n            </div>\n          </div>\n        </SelectTypeWrap>\n      </SelectGroup>\n      <Tip>\n        <table className=\"info_panel\" cellSpacing={20} cellPadding={20}>\n          <thead>\n            <tr>\n              <td className=\"from\" colSpan={2}>\n                From\n              </td>\n              <td className=\"to\">To</td>\n            </tr>\n            <tr>\n              <td className=\"label\">Outstanding Debt</td>\n              <td className=\"from\">\n                {TokenUtils.formatFourDecimals(\n                  Number(toLargeUnits(currentPosition?.balance, currentPosition?.mintTokenInfo.decimals)),\n                )}\n              </td>\n              <td className=\"to\">\n                {TokenUtils.formatFourDecimals(\n                  Number(toLargeUnits(currentPosition?.balance, currentPosition?.mintTokenInfo.decimals)) -\n                    neutralizeAmount,\n                )}\n              </td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td className=\"label\">{DataIndexName.CollateralRatio}</td>\n              <td className=\"from\">{collateralIndex.displayRatio}</td>\n              <td className=\"to\">{newDisplayCollateralRatio}</td>\n            </tr>\n            <tr>\n              <td className=\"label\">{DataIndexName.PrepaidInterestCoverage}</td>\n              <td className=\"from\">{collateralIndex.displayCoverage}</td>\n\n              <td className=\"to\">{newDisplayPrepaidInterestCoverage}</td>\n            </tr>\n            <tr className=\"footer\">\n              <td className=\"label\">Estimate neutralize fee</td>\n              <td\n                className=\"to\"\n                colSpan={2}\n                style={{\n                  color:\n                    (neutralizeType === NeutralizeType.Wallet &&\n                      walletTokenBalance &&\n                      newNeutralizeFee > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]) ||\n                    (neutralizeType === NeutralizeType.Avatar &&\n                      newNeutralizeFee >\n                        settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol])\n                      ? RED\n                      : '',\n                }}\n              >\n                {!newNeutralizeFee\n                  ? 0\n                  : `≈ ${TokenUtils.formatTokenAmount(\n                      newNeutralizeFee,\n                      currentPosition.mintTokenInfo.settlementCurrency.decimals,\n                    )} ${currentPosition.mintTokenInfo.settlementCurrency.symbol}`}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </Tip>\n      <TipInfo>\n        {(neutralizeType === NeutralizeType.Wallet &&\n          walletTokenBalance &&\n          newNeutralizeFee > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]) ||\n        (neutralizeType === NeutralizeType.Avatar &&\n          newNeutralizeFee > settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol]) ? (\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16Z\"\n              fill=\"#FF2E00\"\n            />\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M8.57852 10.156C8.82398 10.156 9.02296 10.355 9.02296 10.6004V11.756C9.02296 12.0015 8.82398 12.2004 8.57852 12.2004H7.42296C7.1775 12.2004 6.97852 12.0015 6.97852 11.756V10.6004C6.97852 10.355 7.1775 10.156 7.42296 10.156H8.57852ZM8.57852 3.62842C8.82398 3.62842 9.02296 3.8274 9.02296 4.07286V8.74859C9.02296 8.99405 8.82398 9.19303 8.57852 9.19303H7.42296C7.1775 9.19303 6.97852 8.99405 6.97852 8.74859V4.07286C6.97852 3.8274 7.1775 3.62842 7.42296 3.62842H8.57852Z\"\n              fill=\"white\"\n            />\n          </svg>\n        ) : (\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path\n              d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16Z\"\n              fill=\"#73797C\"\n            />\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M7.42295 5.6736C7.17749 5.6736 6.9785 5.47461 6.9785 5.22915V4.0736C6.9785 3.82814 7.17749 3.62915 7.42295 3.62915H8.5785C8.82396 3.62915 9.02295 3.82814 9.02295 4.0736L9.02295 5.22915C9.02295 5.47461 8.82396 5.6736 8.5785 5.6736H7.42295ZM7.42295 12.2012C7.17749 12.2012 6.9785 12.0022 6.9785 11.7567V7.081C6.9785 6.83554 7.17749 6.63656 7.42295 6.63656H8.5785C8.82396 6.63656 9.02295 6.83554 9.02295 7.081V11.7567C9.02295 12.0022 8.82396 12.2012 8.5785 12.2012H7.42295Z\"\n              fill=\"white\"\n            />\n          </svg>\n        )}\n\n        <p\n          style={{\n            color:\n              (neutralizeType === NeutralizeType.Wallet &&\n                walletTokenBalance &&\n                newNeutralizeFee > walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]) ||\n              (neutralizeType === NeutralizeType.Avatar &&\n                newNeutralizeFee > settlementCurrencyValues[currentPosition.mintTokenInfo.settlementCurrency.symbol])\n                ? RED\n                : '',\n          }}\n        >\n          A 1.0% fee of the token value will be levied after the position is neutralized.\n        </p>\n      </TipInfo>\n      {neutralizeType === NeutralizeType.Avatar ? (\n        <NeutralizeButton disabled={disabledAction} onClick={onNeutralize}>\n          Neutralize\n        </NeutralizeButton>\n      ) : (\n        <>\n          {approveStatus ? (\n            <NeutralizeButton disabled={disabledAction} onClick={onNeutralize}>\n              Neutralize\n            </NeutralizeButton>\n          ) : (\n            <NeutralizeButton disabled={approveStatus} onClick={onApprove}>\n              Approve\n            </NeutralizeButton>\n          )}\n        </>\n      )}\n    </>\n  )\n}\n\nexport default NeutralizeComp\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport Methods from 'components/Methods'\n\nimport { Approve } from 'components/CommonComponent'\nimport useToast from 'hooks/useToast'\nimport DataWrapper from 'components/DataWrapper'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport { useComputedIndexAction, usePositionInfo, usePositionAction } from 'hooks/news/usePoistion'\nimport { AvatarIcon, GuaranteeIcon } from 'components/uikit'\nimport { TransactionSubmittedInfo, TransactionSuccessInfo } from 'components/TransactionInfo'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport Logo from 'components/Logo'\n\nfunction AddGuaranteeFromAvatar(props) {\n  const { approveStatus, onApprove, walletTokenBalance } = props\n  const [transferVal, setTransferVal] = useState<number>(0)\n  const [isDisabled, setDisabled] = useState(false)\n  const { toastSuccess, toastError, toastInfo } = useToast()\n  const { collateralIndex, currentPosition, currentPositionTokenInfo } = usePositionInfo()\n  const { onUpdatePrepaidInterest, newDisplayPrepaidInterestCoverage } = useComputedIndexAction()\n  const { handleUpdatePosition, onAddPrepaidInterest } = usePositionAction()\n  const leftBalance = useMemo(() => {\n    return toLargeUnits(\n      currentPositionTokenInfo.allowedTokens?.balances[currentPosition.mintTokenInfo.settlementCurrency.symbol] ?? 0,\n      currentPosition.mintTokenInfo.settlementCurrency.decimals,\n      true,\n    ) as number\n  }, [currentPosition.mintTokenInfo.settlementCurrency, currentPositionTokenInfo.allowedTokens?.balances])\n\n  const changeTransferVal = useCallback(\n    (e, type) => {\n      const numberVal = type === 0 ? Number(e.target.value) : leftBalance\n      const _transferAmount = toSmallUnits(\n        TokenUtils.formatTokenAmount(numberVal, currentPosition.mintTokenInfo.settlementCurrency.decimals),\n        currentPosition.mintTokenInfo.settlementCurrency.decimals,\n      )\n      console.log('11', type === 0 ? e.target.value : numberVal)\n      setTransferVal(type === 0 ? e.target.value : numberVal)\n      onUpdatePrepaidInterest(numberVal)\n    },\n    [currentPosition.mintTokenInfo.settlementCurrency.decimals, leftBalance, onUpdatePrepaidInterest],\n  )\n  const onSubmit = useCallback(async () => {\n    try {\n      if (!transferVal || (transferVal > leftBalance && transferVal <= 0)) {\n        toastError(ToastTitle.failed, 'Please enter a valid amount')\n        return\n      }\n      setDisabled(true)\n      const txInfo = await onAddPrepaidInterest(transferVal, true)\n      toastInfo(\n        ToastTitle.submited,\n        <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n      )\n      const result = await txInfo.wait()\n      if (result) {\n        toastSuccess(\n          ToastTitle.success,\n          <TransactionSuccessInfo content=\"Settlement added successfully\" txHash={txInfo.hash} />,\n        )\n        setDisabled(false)\n        setTransferVal(0)\n        onUpdatePrepaidInterest(0)\n        await handleUpdatePosition()\n      }\n    } catch (error) {\n      // console.log('transferVal > leftBalance || transferVal <= 0', transferVal > leftBalance || transferVal <= 0, transferVal, leftBalance)\n      // setDisabled(transferVal > leftBalance || transferVal <= 0)\n    }\n  }, [\n    transferVal,\n    leftBalance,\n    onAddPrepaidInterest,\n    toastInfo,\n    toastSuccess,\n    handleUpdatePosition,\n    onUpdatePrepaidInterest,\n    toastError,\n  ])\n  useEffect(() => {\n    if (transferVal > leftBalance || transferVal <= 0) {\n      setDisabled(true)\n    } else {\n      setDisabled(false)\n    }\n  }, [transferVal, leftBalance])\n  return (\n    <>\n      <Methods\n        SelectIcon={AvatarIcon}\n        options={[\n          {\n            token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            balance: walletTokenBalance\n              ? walletTokenBalance[currentPosition.mintTokenInfo.settlementCurrency.symbol]\n              : 0,\n            symbol: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n            icon: () => (\n              <Logo\n                imgprops={{\n                  style: { marginRight: 10 },\n                }}\n                token={currentPosition.mintTokenInfo.settlementCurrency.logo}\n                symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n              />\n            ),\n            address: currentPosition.mintTokenInfo.settlementCurrency.address,\n            rightOptionList: [\n              {\n                token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n                symbol: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n                icon: () => (\n                  <Logo\n                    imgprops={{\n                      style: { marginRight: 10 },\n                    }}\n                    token={currentPosition.mintTokenInfo.settlementCurrency.logo}\n                    symbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n                  />\n                ),\n                address: currentPosition.mintTokenInfo.settlementCurrency.address,\n                balance: collateralIndex.prepaidInterest,\n              },\n            ],\n          },\n        ]}\n        rightBalance={collateralIndex.prepaidInterest}\n        leftBalance={leftBalance}\n        rightSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        selectedSymbol={currentPosition.mintTokenInfo.settlementCurrency.symbol}\n        RightIcon={GuaranteeIcon}\n        leftInputValue={transferVal}\n        rightInputValue={transferVal}\n        selectInput={(e) => {\n          changeTransferVal(e, 0)\n        }}\n        onMax={() => {\n          changeTransferVal({}, 1)\n        }}\n      />\n      <DataWrapper\n        data={[\n          // The Collateral Ratio has not changed\n          [DataIndexName.CollateralRatio, collateralIndex.displayRatio, collateralIndex.displayRatio],\n\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      <Approve\n        style={{ boxShadow: 'none' }}\n        disabled={!approveStatus || isDisabled || !(transferVal > 0)}\n        onClick={approveStatus ? onSubmit : onApprove}\n      >\n        {approveStatus ? 'Submit' : 'Approve'}\n      </Approve>\n    </>\n  )\n}\n\nexport default AddGuaranteeFromAvatar\n","import React from 'react'\nimport { Typography } from '@mui/material/'\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails } from 'components/CommonComponent'\nimport usePanel from 'hooks/usePanel'\nimport NeutralizeComp from 'views/Mint/components/NeutralizeComp'\nimport { useWeb3React } from 'web3-react-core'\nimport AddGuaranteeFromWallet from './AddGuaranteeFromWallet'\nimport AddGuaranteeFromAvatar from './AddGuaranteeFromAvatar'\nimport useHashPowerToken from '../../../hooks/useHashPowerToken'\n\nexport default function CustomizedAccordions(props) {\n  const { approveStatus, onApprove } = props\n  const { active, chainId, account } = useWeb3React()\n  const { walletTokenBalance } = useHashPowerToken()\n  const { expanded, handleChange } = usePanel()\n  return (\n    <Wrapper>\n      <Title>Improve Prepaid Interest Coverage</Title>\n      <Accordion id=\"panel3\" expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Add asset from my wallet to Prepaid Interest</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel3' && (\n            <AddGuaranteeFromWallet\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel4\" expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 2. Transfer asset from Collateral to Prepaid Interest</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel4' && (\n            <AddGuaranteeFromAvatar\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel5\" expanded={expanded === 'panel5'} onChange={handleChange('panel5')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 3. Neutralize outstanding debt</Typography>\n        </AccordionSummary>\n        <AccordionDetails>{expanded === 'panel5' && <NeutralizeComp />}</AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport { Typography } from '@mui/material/'\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails } from 'components/CommonComponent'\nimport { useWeb3React } from 'web3-react-core'\nimport usePanel from 'hooks/usePanel'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport AddGuaranteeFromWallet from './AddGuaranteeFromWallet'\nimport AddCurrencyToAvatar from './AddCurrencyToAvatar'\nimport NetralizeComp from '../../Mint/components/NeutralizeComp'\n\nexport default function ImproveCollateralRatio(props) {\n  const { expanded, handleChange } = usePanel()\n  const { approveStatus, onApprove } = props\n  const { walletTokenBalance } = useHashPowerToken()\n  const { active, chainId, account } = useWeb3React()\n  return (\n    <Wrapper>\n      <Title>Improve Collateral Ratio</Title>\n      <Accordion id=\"panel7\" expanded={expanded === 'panel7'} onChange={handleChange('panel7')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Add asset from my wallet to Prepaid Interest</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel7' && (\n            <AddGuaranteeFromWallet\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel8\" expanded={expanded === 'panel8'} onChange={handleChange('panel8')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 2. Add asset from my wallet to Collateral</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel8' && (\n            <AddCurrencyToAvatar\n              active={active}\n              account={account}\n              chainId={chainId}\n              walletTokenBalance={walletTokenBalance}\n              onApprove={onApprove}\n              approveStatus={approveStatus}\n            />\n          )}\n        </AccordionDetails>\n      </Accordion>\n      <Accordion id=\"panel9\" expanded={expanded === 'panel9'} onChange={handleChange('panel9')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 3. Neutralize outstanding debt</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel9' && <NetralizeComp />}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { IconButton, Typography } from '@mui/material/'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\nimport AddIcon from '@mui/icons-material/Add'\nimport uuid from 'uuid/dist/v4'\nimport Methods from 'components/Methods'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Approve,\n  FlexWrap,\n  Title,\n  Wrapper,\n} from 'components/CommonComponent'\nimport DataWrapper from 'components/DataWrapper'\nimport usePanel from 'hooks/usePanel'\nimport { useWeb3React } from 'web3-react-core'\nimport { styled } from '@mui/material/styles'\nimport PositionABI from 'config/abi/Position.json'\nimport { AvatarIcon, Button, DeleteIcon, DroppableIcon } from 'components/uikit'\nimport { getContract } from 'utils/web3React'\nimport { utils } from 'ethers'\nimport useSystemParams from 'hooks/useSystemParams'\nimport contracts from 'config/constants/contracts'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport useToast from 'hooks/useToast'\nimport { useComputedIndexAction, usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport Logo from 'components/Logo'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { findPath, getSwapQuote } from 'config/constants/pool'\nimport { SupportedTokens } from 'config/constants/tokenConfig'\nimport { TransactionSubmittedInfo, TransactionSuccessInfo } from 'components/TransactionInfo'\n\nconst AddBtn = styled(Button)`\n  box-shadow: none !important;\n  width: 34px !important;\n  height: 28px !important;\n  padding: 0 !important;\n  background: linear-gradient(90deg, #62c3f7 0%, #7ae9f1 100%) !important;\n  border-radius: 6px !important;\n  svg {\n    color: #000;\n    width: 16px;\n  }\n`\n\nconst { ActionUser, ActionMulticall } = contracts\nconst ActionUserInterface = new utils.Interface(ActionUser.abi)\nconst ActionMulticallInterface = new utils.Interface(ActionMulticall.abi)\nconst onDragEnd = (result, columns, setColumns, setIsSubmit) => {\n  if (!result.destination) return\n  const { source, destination } = result\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId]\n    const destColumn = columns[destination.droppableId]\n    const sourceItems = [...sourceColumn.items]\n    const destItems = [...destColumn.items]\n    const [removed] = sourceItems.splice(source.index, 1)\n    destItems.splice(destination.index, 0, removed)\n    setColumns([...destColumn, destItems])\n  } else {\n    const copiedItems = [...columns]\n    const [removed] = copiedItems.splice(source.index, 1)\n    copiedItems.splice(destination.index, 0, removed)\n    if (copiedItems.map((it) => it.input > 0).includes(false)) {\n      setIsSubmit(true)\n    } else {\n      setIsSubmit(false)\n    }\n    setColumns(copiedItems)\n  }\n}\n\nconst TradingThrough: React.FC<{\n  onApprove: (callback: (state: boolean) => void) => void\n  approveStatus: boolean\n}> = (props) => {\n  const { onApprove, approveStatus } = props\n  const { chainId } = useWeb3React()\n  const { toastInfo, toastError, toastSuccess } = useToast()\n  const { signer, tokenPools } = useSystemParams()\n  const [columns, setColumns] = useState<\n    {\n      id: string\n      input: number\n      output: number\n      inputToken: {\n        token: SupportedTokens\n        balance: number\n        decimals: number\n        icon: React.FC<JSX.Element>\n        rightOptionList: {\n          token: SupportedTokens\n          balance: number\n          decimals: number\n          icon: React.FC<JSX.Element>\n        }[]\n      }\n      outputToken: { token: SupportedTokens; balance: number; decimals: number; icon: React.FC<JSX.Element> }\n    }[]\n  >([])\n  const [isSubmitStatus, setIsSubmit] = useState(true)\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n  const {\n    onUpdateTotalCollateralValue,\n    newDisplayCollateralRatio,\n    newCollateralRatio,\n    newDisplayPrepaidInterestCoverage,\n  } = useComputedIndexAction()\n  const { handleUpdatePosition } = usePositionAction()\n  const { currentPositionTokenInfo, collateralIndex, currentPosition } = usePositionInfo()\n\n  const tokenList = useMemo<\n    {\n      token: SupportedTokens\n      balance: any\n      decimals: number\n      icon: React.FC<JSX.Element>\n      rightOptionList: {\n        token: SupportedTokens\n        balance: any\n        decimals: number\n        icon: React.FC<JSX.Element>\n      }[]\n    }[]\n  >(() => {\n    if (currentPositionTokenInfo?.tokenPrice) {\n      const { allowedTokens } = currentPositionTokenInfo\n      const list = Object.values(allowedTokens.tokens).map((it) => {\n        console.log('allowedTokens?.balances[it.symbol] :>> ', );\n        const balance =\n          (allowedTokens?.balances &&\n            utils.formatUnits(allowedTokens?.balances[it.symbol] || 0, it.decimals)) ||\n          0\n        return {\n          decimals: it.decimals,\n          token: it.symbol,\n          balance,\n          icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={it.logo} symbol={it.symbol} />,\n          rightOptionList: [],\n        }\n      })\n      return list.map((item) => {\n        const rightOptionList = list.filter((it) => it.token !== item.token)\n        return {\n          ...item,\n          rightOptionList: rightOptionList.length ? rightOptionList : [item],\n        }\n      })\n    }\n    return []\n  }, [currentPositionTokenInfo])\n  const addMethods = useCallback(() => {\n    setColumns((state) => {\n      const data = [\n        ...state,\n        {\n          id: uuid(),\n          input: 0,\n          output: 0,\n          inputToken: tokenList[0],\n          outputToken: tokenList[0].rightOptionList[0],\n        },\n      ]\n      if (data.map((it) => it.input > 0).includes(false)) {\n        setIsSubmit(true)\n      } else {\n        setIsSubmit(false)\n      }\n      return data\n    })\n  }, [tokenList])\n  const initColumns = useCallback((reload = false) => {\n    if (tokenList.length) {\n      setColumns((state) => {\n        if (state.length && !reload) {\n          return state\n        }\n        return [\n          {\n            id: uuid(),\n            input: 0,\n            output: 0,\n            inputToken: tokenList[0],\n            outputToken: tokenList[0].rightOptionList[0],\n          },\n        ]\n      })\n    }\n  }, [tokenList])\n  const onSubmit = useCallback(async () => {\n    const posContract = getContract(signer, PositionABI, currentPosition.positionAddress)\n    try {\n      if (posContract) {\n        const isSubmit = columns.filter((it) => it.input <= 0)\n        if (isSubmit.length) {\n          toastError(ToastTitle.failed, 'Please enter a valid amount')\n          return\n        }\n\n        setIsSubmit(true)\n        const _params = columns.map((it) => {\n          const inputAmount = toSmallUnits(String(it.input), it.inputToken.decimals)\n          const outputAmount = toSmallUnits(String(it.output), it.outputToken.decimals)\n          const { tokenAddressPath } = findPath({\n            chainId,\n            from: it.inputToken.token,\n            to: it.outputToken.token,\n          })\n          return [\n            ActionUser.address[chainId],\n            ActionUserInterface.encodeFunctionData('swapExactTokensForTokens', [\n              inputAmount,\n              '1',\n              tokenAddressPath,\n              '999999999999999',\n            ]),\n          ]\n        })\n        const dataMulti = ActionMulticallInterface.encodeFunctionData('multicall', [_params])\n        const transaction = await posContract.delegateCall(ActionMulticall.address[chainId], dataMulti)\n        if (transaction.hash) {\n          toastInfo(\n            ToastTitle.submited,\n            <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={transaction.hash} />,\n          )\n        }\n        const result = await transaction.wait()\n        if (result) {\n          setIsSubmit(true)\n          onUpdateTotalCollateralValue(0)\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSuccessInfo content=\"The transaction has been successfully.\" txHash={transaction.hash} />,\n          )\n          try {\n            await handleUpdatePosition()\n            initColumns(true)\n          } catch (error) {\n            console.error('handleUpdatePosition>>>>', error)\n          }\n        }\n      }\n    } catch (error: any) {\n      setIsSubmit(false)\n      toastError(\n        'Failed',\n        <FlexWrap style={{ flexDirection: 'column' }}>\n          <p\n            style={{\n              wordBreak: 'break-all',\n            }}\n          >\n            {error.reason}\n          </p>\n        </FlexWrap>,\n      )\n    }\n  }, [\n    signer,\n    currentPosition.positionAddress,\n    columns,\n    chainId,\n    toastError,\n    toastInfo,\n    onUpdateTotalCollateralValue,\n    toastSuccess,\n    handleUpdatePosition,\n    initColumns,\n  ])\n\n  useEffect(() => {\n    initColumns()\n  }, [initColumns])\n  const onChangeInputAmount = useCallback(\n    (\n      e,\n      item: {\n        id: string\n        input: number\n        output: number\n        inputToken: {\n          token: SupportedTokens\n          balance: number\n          decimals: number\n          icon: React.FC<JSX.Element>\n          rightOptionList: {\n            token: SupportedTokens\n            balance: number\n            decimals: number\n            icon: React.FC<JSX.Element>\n          }[]\n        }\n        outputToken: { token: SupportedTokens; balance: number; decimals: number; icon: React.FC<JSX.Element> }\n      },\n    ) => {\n      const value = TokenUtils.formatTokenAmount(Number(e.target.value), item.inputToken.decimals)\n      if (Number(value) > Number.MAX_SAFE_INTEGER) {\n        setIsSubmit(true)\n        return\n      }\n      const res =\n        getSwapQuote(\n          chainId,\n          item.inputToken.token,\n          item.outputToken.token,\n          toSmallUnits(value, item.inputToken.decimals),\n          tokenPools,\n        ) || 0\n      setColumns((state) => {\n        const data = state.map((it) => {\n          const _item = {\n            ...it,\n            input: it.id === item.id ? e.target.value : it.input,\n            output: it.id === item.id ? utils.formatUnits(res, item.outputToken.decimals) as any : it.output,\n          }\n          return _item\n        })\n\n        const actionValSum = data.reduce((acc, curr) => {\n          const next = { ...acc }\n          if (Object.prototype.hasOwnProperty.call(next, curr.inputToken.token)) {\n            next[curr.inputToken.token] += Number(curr.input)\n          } else {\n            next[curr.inputToken.token] = Number(curr.input)\n          }\n          return next\n        }, {} as Record<SupportedTokens, number>)\n\n        if (data.map((it) => it.input > 0 && it.output > 0 && it.input <= it.inputToken.balance).includes(false)) {\n          setIsSubmit(true)\n        } else if (\n          value.indexOf('.') !== -1 &&\n          String(value).slice(value.indexOf('.') + 1).length > item.inputToken.decimals\n        ) {\n          setIsSubmit(true)\n        } else {\n          setIsSubmit(false)\n        }\n\n        if (data.map((it) => it.input > 0).includes(false) || data.map((it) => it.output > 0).includes(false)) {\n          setIsSubmit(true)\n        } else if (actionValSum[item.inputToken.token] > item.inputToken.balance) {\n          setIsSubmit(true)\n        } else {\n          setIsSubmit(false)\n        }\n        \n        return data\n      })\n    },\n    [chainId, tokenPools],\n  )\n  const onChangeToken = useCallback(\n    (selected, id, type) => {\n      setColumns((state) => {\n        return state.map((item) => {\n          if (item.id === id) {\n            const data = { ...item, [type]: selected }\n            if (data.input) {\n              const res = getSwapQuote(\n                chainId,\n                data.inputToken.token,\n                data.outputToken.token,\n                toSmallUnits(\n                  TokenUtils.formatTokenAmount(data.input, data.inputToken.decimals),\n                  data.inputToken.decimals,\n                ),\n                tokenPools,\n              )\n              data.output = toLargeUnits(res, data.outputToken.decimals, true) as number\n            }\n            if (type === 'inputToken') {\n              data.outputToken = data.inputToken.rightOptionList[0]\n              data.output = 0\n            }\n            return data\n          }\n          return item\n        })\n      })\n    },\n    [chainId, tokenPools],\n  )\n  const onExchange = useCallback((record, index) => {\n    setColumns((state) => {\n      return state.map((item, i) => {\n        if (i === index) {\n          const data: {\n            token: SupportedTokens\n            balance: number\n            decimals: number\n            icon: React.FC<JSX.Element>\n            rightOptionList: {\n              token: SupportedTokens\n              balance: number\n              decimals: number\n              icon: React.FC<JSX.Element>\n            }[]\n          } = {\n            ...item.outputToken,\n            rightOptionList: [],\n          }\n          data.rightOptionList = [...item.inputToken.rightOptionList]\n          data.rightOptionList.push(item.inputToken)\n          data.rightOptionList = data.rightOptionList.filter((it) => it.token !== item.outputToken.token)\n          const target = {\n            ...item,\n            outputToken: item.inputToken,\n            inputToken: { ...data, balance: item.outputToken.balance },\n            input: 0,\n            output: 0,\n          }\n          return { ...target }\n        }\n        return item\n      })\n    })\n  }, [])\n\n  useEffect(() => {\n    const { tokenPrice } = currentPositionTokenInfo\n    if (tokenPrice) {\n      const poolPath = columns.map((it) => ({\n        from: it.inputToken.token,\n        to: it.outputToken.token,\n        fromDecimals: it.inputToken.decimals,\n        toDecimals: it.outputToken.decimals,\n        inputValue: Number(it.input),\n        outputValue: Number(it.output),\n      }))\n      let total = 0\n      poolPath.forEach((item) => {\n        total -=\n          item.inputValue *\n          (toLargeUnits(\n            tokenPrice[item.from].price,\n            currentPosition.mintTokenInfo.settlementCurrency.decimals,\n            true,\n          ) as number)\n        total +=\n          item.outputValue *\n          (toLargeUnits(\n            tokenPrice[item.to].price,\n            currentPosition.mintTokenInfo.settlementCurrency.decimals,\n            true,\n          ) as number)\n      })\n      onUpdateTotalCollateralValue(total)\n    }\n  }, [\n    columns,\n    currentPosition.mintTokenInfo.settlementCurrency.decimals,\n    currentPositionTokenInfo,\n    onUpdateTotalCollateralValue,\n  ])\n  return (\n    <>\n      <DragDropContext onDragEnd={(result) => onDragEnd(result, columns, setColumns, setIsSubmit)}>\n        <Droppable droppableId=\"droppableId\">\n          {(provided) => {\n            return (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                {columns.map((item, index) => {\n                  return (\n                    <Draggable key={item.id} draggableId={item.id} index={index} isDragDisabled={index === 0}>\n                      {(provideds) => {\n                        const amountOut =\n                          (tokenPools.length &&\n                            getSwapQuote(\n                              chainId,\n                              item.inputToken.token,\n                              item.outputToken.token,\n                              toSmallUnits(\n                                TokenUtils.formatTokenAmount(item.input, item.inputToken.decimals) || '1',\n                                item.inputToken.decimals,\n                              ),\n                              tokenPools,\n                            )) ||\n                          0\n                          console.log('amountOut :>> ', amountOut);\n                        const price = toLargeUnits(amountOut, item.outputToken.decimals, true) as number\n                        const unitAmountOut = price / (Number(item.input) || 1)\n\n                        const priceStr = TokenUtils.formatFourDecimals(unitAmountOut)\n                        return (\n                          <div\n                            ref={provideds.innerRef}\n                            {...provideds.draggableProps}\n                            {...provideds.dragHandleProps}\n                            style={{\n                              display: 'flex',\n                              alignItems: 'center',\n                              userSelect: 'none',\n                              margin: '0 0 8px 0',\n                              ...provideds.draggableProps.style,\n                              position: 'static',\n                            }}\n                          >\n                            <div style={{ width: '100%', position: 'relative', paddingRight: index <= 0 ? 58 : 0 }}>\n                              <Methods\n                                SelectIcon={AvatarIcon}\n                                leftInputValue={item.input}\n                                rightInputValue={item.output}\n                                isExchange\n                                onExchange={() => {\n                                  onExchange(item, index)\n                                }}\n                                options={tokenList}\n                                leftSelectValue={item.inputToken.token}\n                                leftBalance={item.inputToken.balance}\n                                rightSelectValue={item.outputToken.token}\n                                rightBalance={item.outputToken.balance}\n                                rightOptions={item.inputToken.rightOptionList}\n                                selectedBalance={100}\n                                leftDisableStatus={[false, false]}\n                                RightIcon={AvatarIcon}\n                                rightDisableStatus={[false, true]}\n                                selectInput={(e) => {\n                                  onChangeInputAmount(e, item)\n                                }}\n                                leftChange={(selected) => {\n                                  onChangeToken(selected, item.id, 'inputToken')\n                                }}\n                                rightChange={(selected) => {\n                                  onChangeToken(selected, item.id, 'outputToken')\n                                }}\n                                onMax={() => {\n                                  onChangeInputAmount({ target: { value: item.inputToken.balance } }, item)\n                                }}\n                                leftSymbol={item.inputToken.token}\n                                rightSymbol={item.outputToken.token}\n                              />\n                              <p\n                                style={{\n                                  position: 'absolute',\n                                  bottom: 0,\n                                  right: index <= 0 ? 73 : 15,\n                                  color: 'rgba(0, 0, 0, 0.5)',\n                                  fontSize: 12,\n                                }}\n                              >\n                                {`${1} ${item.inputToken.token}`} ≈ {`${priceStr} ${item.outputToken.token}`}\n                              </p>\n                            </div>\n                            {index > 0 ? (\n                              <>\n                                <IconButton\n                                  onClick={() => {\n                                    const data = [...columns]\n                                    data.splice(index, 1)\n                                    if (data.map((it) => it.input > 0).includes(false)) {\n                                      setIsSubmit(true)\n                                    } else {\n                                      setIsSubmit(false)\n                                    }\n                                    setColumns(data)\n                                  }}\n                                  style={{ cursor: 'pointer', marginTop: 8, marginLeft: 10, padding: 0 }}\n                                >\n                                  <DeleteIcon />\n                                </IconButton>\n                                <IconButton style={{ marginTop: 8, marginLeft: 8, padding: 0 }}>\n                                  <DroppableIcon style={{ fill: 'none' }} />\n                                </IconButton>\n                              </>\n                            ) : null}\n                          </div>\n                        )\n                      }}\n                    </Draggable>\n                  )\n                })}\n                {provided.placeholder}\n              </div>\n            )\n          }}\n        </Droppable>\n      </DragDropContext>\n      <AddBtn onClick={addMethods}>\n        <AddIcon />\n      </AddBtn>\n      <DataWrapper\n        data={[\n          [\n            DataIndexName.CollateralRatio,\n            collateralIndex.displayRatio,\n            `${\n              !(newCollateralRatio === 0 || newCollateralRatio === Number.POSITIVE_INFINITY) ? '≈' : ''\n            } ${newDisplayCollateralRatio}`,\n          ],\n\n          [DataIndexName.PrepaidInterestCoverage, collateralIndex.displayCoverage, newDisplayPrepaidInterestCoverage],\n        ]}\n      />\n      {approveStatus ? (\n        <Approve style={{ boxShadow: 'none' }} disabled={isSubmitStatus} onClick={onSubmit}>\n          Submit\n        </Approve>\n      ) : (\n        <Approve\n          style={{ boxShadow: 'none' }}\n          disabled={approveBtnStatus}\n          onClick={() => {\n            onApprove((state) => {\n              setApproveBtnStatus(state)\n            })\n          }}\n        >\n          Approve\n        </Approve>\n      )}\n    </>\n  )\n}\n\nexport default function CustomizedAccordions(props) {\n  const { onApprove, approveStatus } = props\n  const { expanded, handleChange } = usePanel()\n  return (\n    <Wrapper>\n      <Title>Trading through Collateral</Title>\n      <Accordion id=\"panel12\" expanded={expanded === 'panel12'} onChange={handleChange('panel12')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Trading through Collateral</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {expanded === 'panel12' && <TradingThrough onApprove={onApprove} approveStatus={approveStatus} />}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Typography, Input } from '@mui/material/'\nimport Wallet from 'components/Menu/icons/Wallet'\nimport { Wrapper, Title, Accordion, AccordionSummary, AccordionDetails, Approve } from 'components/CommonComponent'\nimport usePanel from 'hooks/usePanel'\nimport { styled } from '@mui/material/styles'\nimport { AvatarIcon, ExchangeArrow, GuaranteeIcon } from 'components/uikit'\nimport { useWeb3React } from 'web3-react-core'\nimport Select from 'components/Select'\nimport DataWrapper from 'components/DataWrapper'\nimport useSystemParams from 'hooks/useSystemParams'\nimport usePosContract from 'hooks/usePosContract'\nimport contracts from 'config/constants/contracts'\nimport { useTransfer } from 'hooks/useManager'\nimport useToast from 'hooks/useToast'\nimport useHashPowerToken from 'hooks/useHashPowerToken'\nimport { TokenUtils, toLargeUnits, toSmallUnits } from 'utils/transformHelper'\nimport { useComputedIndexAction, usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport Logo from 'components/Logo'\nimport { DataIndexName, ToastTitle } from 'config/constants/contants'\nimport { chainConfigs, commonTokens, valueToKeyMap } from 'config/constants/tokenConfig'\nimport { getSwapQuote } from 'config/constants/pool'\nimport { TransactionSubmittedInfo, TransactionSuccessInfo } from 'components/TransactionInfo'\nimport { ethers } from 'ethers'\nimport PositionABI from 'config/abi/Position.json'\n\nconst MethodsWrap = styled('div')`\n  .balance_info {\n    display: flex;\n    align-content: center;\n    padding: 0 12px;\n    margin-bottom: 6px;\n    .label {\n      color: #000;\n      font-size: 14px;\n      font-family: PingFangSC-Medium, sans-serif;\n    }\n    span {\n      font-family: PingFangSC-Medium, sans-serif;\n      font-weight: 400;\n      font-size: 12px;\n      line-height: 17px;\n      color: rgba(0, 0, 0, 0.5);\n      margin-left: 7px;\n    }\n  }\n  .content {\n    display: flex;\n    height: 50px;\n    background: rgba(255, 255, 255, 0.4);\n    border: 1px solid rgba(207, 216, 226, 0.5);\n    box-sizing: border-box;\n    border-radius: 11px;\n    padding: 0 12px;\n    .select_custom {\n      margin: 0;\n      padding: 0;\n      border: none;\n      background: unset;\n      width: 200px;\n      flex-shrink: 0;\n    }\n    .select_custom:nth-of-type(2) {\n      width: 130px;\n    }\n    .MuiInput-root,\n    .MuiInput-input {\n      text-align: right;\n      width: 100%;\n      border: none;\n      &:before,\n      &:after {\n        display: none;\n      }\n    }\n    .MuiInput-input {\n      padding: 0 8px;\n      border-left: 1px solid rgba(207, 216, 226, 0.5) !important;\n\n      &::-webkit-inner-spin-button {\n        display: none;\n      }\n    }\n  }\n  .func {\n    font-size: 12px;\n    line-height: 17px;\n    color: #6ed6f3;\n    text-align: right;\n    padding: 0 20px;\n    margin-top: 3px;\n    cursor: pointer;\n    user-select: none;\n  }\n`\n\nenum AccountType {\n  'MyWallet' = 'My Wallet',\n  'Standard' = 'Collateral',\n  'Settlement' = 'Prepaid Interest',\n}\n\nconst accountCategoryList = [\n  {\n    type: AccountType.MyWallet,\n    token: 'My Wallet',\n    id: 'd04155c3-eb41-4c44-b28d-67bb2d515904',\n    icon: Wallet,\n  },\n  {\n    type: AccountType.Settlement,\n    token: 'Prepaid Interest',\n    icon: GuaranteeIcon,\n    id: 'edebd20e-18a1-4bc8-a869-9b44537d810c',\n  },\n  {\n    type: AccountType.Standard,\n    token: 'Collateral',\n    icon: AvatarIcon,\n    id: '763c1484-3fd3-4044-b8b5-3c261947f414',\n  },\n]\n\nconst { ActionUser } = contracts\n\nconst ActionUserInterface = new ethers.utils.Interface(ActionUser.abi)\nconst getTokenDecimals = (symbol: string) => {\n  const key = valueToKeyMap[symbol]\n  return commonTokens[key].decimals\n}\n\nexport default function GeneralTransfer(props) {\n  const { approveStatus, onApprove } = props\n  const [gDisStatus, setGDisStatus] = useState(true)\n  const [approveBtnStatus, setApproveBtnStatus] = useState(false)\n\n  const { signer, tokenPools } = useSystemParams()\n  const { walletTokenBalance } = useHashPowerToken()\n  const [trading, setTrading] = useState(false)\n  const { toastInfo, toastSuccess, toastError } = useToast()\n\n  const { currentPosition, currentPositionTokenInfo, collateralIndex } = usePositionInfo()\n  const {\n    onUpdateCollateralValue,\n    onUpdatePrepaidInterest,\n    newDisplayCollateralRatio,\n    newDisplayPrepaidInterestCoverage,\n    newCollateralRatio,\n    newPrepaidInterestCoverage,\n  } = useComputedIndexAction()\n  const { handleUpdatePosition } = usePositionAction()\n\n  const [actionData, setActionData] = useState([\n    {\n      accountType: AccountType.MyWallet,\n      tokenType: currentPosition.mintTokenInfo.symbol,\n      transferVal: 0,\n      id: '1fee1a14-b8b3-4b73-b2be-1817a6d228ec',\n      tokenSelectDisabled: false,\n      list: [...accountCategoryList],\n      token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n      decimals: currentPosition.mintTokenInfo.settlementCurrency.decimals,\n    },\n    {\n      accountType: AccountType.Standard,\n      tokenType: currentPosition.mintTokenInfo.symbol,\n      transferVal: 0,\n      id: '25897dcf-e843-4630-a5e1-309dc10cb1e5',\n      tokenSelectDisabled: true,\n      list: [...accountCategoryList],\n      token: currentPosition.mintTokenInfo.settlementCurrency.symbol,\n      decimals: currentPosition.mintTokenInfo.settlementCurrency.decimals,\n    },\n  ])\n\n  const avatarAssetList = useMemo(() => {\n    if (currentPositionTokenInfo.allowedTokens) {\n      const { balances, tokens } = currentPositionTokenInfo.allowedTokens\n      return Object.keys(balances).reduce((acc, key) => {\n        return {\n          ...acc,\n          [key]: tokens[key] ? (toLargeUnits(balances[key], tokens[key].decimals, true) as number) : 0,\n        }\n      }, {})\n    }\n    return Object.keys(valueToKeyMap).reduce((acc, key) => {\n      return {\n        ...acc,\n        [key]: 0,\n      }\n    }, {})\n  }, [currentPositionTokenInfo.allowedTokens])\n\n  const tokenList = useMemo(() => {\n    if (currentPositionTokenInfo.allowedTokens) {\n      const { tokens } = currentPositionTokenInfo.allowedTokens\n      return Object.keys(tokens).map((key) => {\n        return {\n          token: key,\n          decimals: tokens[key].decimals,\n          address: tokens[key].address,\n          icon: () => <Logo imgprops={{ style: { marginRight: 10 } }} token={tokens[key].logo} symbol={key} />,\n        }\n      })\n    }\n    return []\n  }, [currentPositionTokenInfo.allowedTokens])\n\n  const transfer = useTransfer()\n  const { expanded, handleChange } = usePanel()\n  const { chainId, account } = useWeb3React()\n\n  const onChangeVal = useCallback(({ target }, record) => {\n    const { value } = target\n    setActionData((state) => {\n      const data = state.map((item) => ({ ...item, transferVal: value }))\n      return data\n    })\n  }, [])\n\n  const onSubmit = useCallback(async () => {\n    setTrading(true)\n\n    let data = null\n    let isTransfer = false\n    const transferTransactions = []\n    const [transferData, recviceTarget] = actionData\n    const { tokenType: tokenSymbol, accountType, transferVal } = transferData\n    const transferDecimals = getTokenDecimals(tokenSymbol)\n    const transferAmount = toSmallUnits(TokenUtils.formatDecimalString(transferVal, transferDecimals), transferDecimals)\n    const tokenAddress = chainConfigs[chainId].tokens[valueToKeyMap[tokenSymbol]].address\n    if (transferAmount.isZero()) {\n      return\n    }\n\n    const handleResult = async (txInfo) => {\n      const result = await txInfo.wait()\n      if (result) {\n        toastSuccess(\n          ToastTitle.success,\n          <TransactionSuccessInfo content=\"The transaction has been successfully.\" txHash={result.hash} />,\n        )\n        setTrading(false)\n        setGDisStatus(true)\n        await handleUpdatePosition()\n        onChangeVal({ target: { value: 0 } }, null)\n      }\n    }\n\n    const handleError = ({ message, reason }) => {\n      toastError('Failed', `${reason || message}`)\n      setTrading(false)\n    }\n\n    const handleAllSettled = (results) => {\n      setTrading(false)\n      results.forEach((result) => {\n        if (result.status === 'rejected') {\n          toastError(ToastTitle.failed, result.reason?.reason || result.reason?.message)\n        } else {\n          toastSuccess(\n            ToastTitle.success,\n            <TransactionSuccessInfo\n              content=\"The transaction has been successfully.\"\n              txHash={result.value.transactionHash}\n            />,\n          )\n          setTrading(false)\n          setGDisStatus(true)\n          handleUpdatePosition().then(() => {\n            onChangeVal({ target: { value: 0 } }, null)\n\n          })\n        }\n      })\n    }\n\n    const submitTransaction = async (_data: string) => {\n      try {\n        const positionContract = new ethers.Contract(currentPosition.positionAddress, PositionABI, signer)\n        const txInfo = await positionContract.delegateCall(ActionUser.address[chainId], _data)\n        if (txInfo) {\n          toastInfo(\n            ToastTitle.submited,\n            <TransactionSubmittedInfo content=\"Waiting for confirmation\" txHash={txInfo.hash} />,\n          )\n          await handleResult(txInfo)\n        }\n      } catch (error) {\n        handleError(error as any)\n      }\n    }\n\n    if (accountType === AccountType.MyWallet) {\n      if (recviceTarget.accountType === AccountType.Settlement) {\n        data = ActionUserInterface.encodeFunctionData('addGuarantee', [transferAmount, false])\n      } else if (recviceTarget.accountType === AccountType.Standard) {\n        transferTransactions.push(transfer(account, tokenAddress, currentPosition.positionAddress, transferAmount))\n        isTransfer = true\n      }\n    } else if (accountType === AccountType.Standard) {\n      if (recviceTarget.accountType === AccountType.MyWallet) {\n        data = ActionUserInterface.encodeFunctionData('withdrawAsset', [tokenAddress, account, transferAmount])\n      } else if (recviceTarget.accountType === AccountType.Settlement) {\n        data = ActionUserInterface.encodeFunctionData('addGuarantee', [transferAmount, true])\n      }\n    } else if (accountType === AccountType.Settlement) {\n      if (recviceTarget.accountType === AccountType.MyWallet) {\n        data = ActionUserInterface.encodeFunctionData('moveGuarantee', [account, transferAmount])\n      } else if (recviceTarget.accountType === AccountType.Standard) {\n        data = ActionUserInterface.encodeFunctionData('moveGuarantee', [\n          currentPosition.positionAddress,\n          transferAmount,\n        ])\n      }\n    }\n\n    if (!isTransfer && data) {\n      await submitTransaction(data)\n    } else {\n      Promise.allSettled(transferTransactions)\n        .then(handleAllSettled)\n        .catch((e) => {\n          toastError(ToastTitle.failed, e.reason)\n          setTrading(false)\n        })\n    }\n  }, [\n    actionData,\n    chainId,\n    toastSuccess,\n    onChangeVal,\n    handleUpdatePosition,\n    toastError,\n    currentPosition.positionAddress,\n    signer,\n    toastInfo,\n    transfer,\n    account,\n  ])\n\n  useEffect(() => {\n    const [send, recive] = actionData\n    switch (send.accountType) {\n      case AccountType.MyWallet:\n        if (recive.accountType === AccountType.Settlement) {\n          onUpdatePrepaidInterest(send.transferVal)\n        } else {\n          onUpdateCollateralValue({\n            symbol: send.tokenType as any,\n            value: Number(send.transferVal),\n          })\n        }\n        break\n      case AccountType.Standard:\n        if (recive.accountType === AccountType.MyWallet) {\n          const value = Number(send.transferVal)\n          onUpdateCollateralValue({\n            symbol: send.tokenType as any,\n            value: value ? Number(`-${value}`) : value,\n          })\n        } else {\n          const value = Number(send.transferVal)\n          onUpdateCollateralValue({\n            symbol: send.tokenType as any,\n            value: value ? Number(`-${value}`) : value,\n          })\n          onUpdatePrepaidInterest(send.transferVal)\n        }\n        break\n      case AccountType.Settlement:\n        if (recive.accountType === AccountType.MyWallet) {\n          const value = Number(send.transferVal)\n          onUpdatePrepaidInterest(value ? Number(`-${value}`) : value)\n        } else {\n          const value = Number(send.transferVal)\n          onUpdatePrepaidInterest(value ? Number(`-${value}`) : value)\n          onUpdateCollateralValue({\n            symbol: send.tokenType as any,\n            value: Number(send.transferVal),\n          })\n        }\n        break\n      default:\n        console.log(1)\n    }\n  }, [actionData, onUpdateCollateralValue, onUpdatePrepaidInterest])\n\n  const onChangeAccount = useCallback(\n    (val, record, i) => {\n      setActionData((state) => {\n        const data = state.map((item) => ({\n          ...item,\n          accountType: item.id === record.id ? val : item.accountType,\n          tokenType:\n            val === AccountType.Settlement ? currentPosition.mintTokenInfo.settlementCurrency.symbol : item.tokenType,\n          transferVal: Number(),\n        }))\n        if (i === 0) {\n          data[1].list = accountCategoryList.filter((it) => it.type !== data[0].accountType)\n          data[0].tokenSelectDisabled = data[0].accountType === AccountType.Settlement\n        }\n        if(data[0].accountType === data[1].accountType) {\n          data[1].accountType = data[1].list.find((it) => it.type !== data[0].accountType).type\n        }\n        return data\n      })\n    },\n    [currentPosition.mintTokenInfo.settlementCurrency.symbol],\n  )\n\n  const onChangeToken = useCallback(\n    (val, __index) => {\n      setActionData((state) => {\n        const nextState = state.map((it) => ({ ...it, tokenType: val, transferVal: Number() }))\n\n        if (val !== currentPosition.mintTokenInfo.settlementCurrency.symbol) {\n          nextState[1].list = nextState[1].list.filter((it) => it.type !== AccountType.Settlement)\n        } else {\n          const settlement = accountCategoryList.find((it) => it.type === AccountType.Settlement)\n          const _index = nextState[1].list.findIndex((it) => it.type === AccountType.Settlement)\n          if (!(_index > -1)) {\n            nextState[1].list.push(settlement)\n          }\n        }\n        return nextState\n      })\n    },\n    [currentPosition.mintTokenInfo.settlementCurrency.symbol],\n  )\n\n  const onMax = useCallback(\n    (record) => {\n      setActionData((state) => {\n        const data = [...state]\n        /* \n          1. wallet send to collateral //// add collateral（transfer）   Total assets increase, prepaid interest remains unchanged, margin ratio increases, and the number of days covered by prepaid interest remains the same.\n          2. wallet send to prepaid interest       // addGuarantee｜    Total assets increase, prepaid interest increases, margin ratio increases, and the number of days covered by prepaid interest remains the same.\n          3. collateral send to wallet //           withdrawAsset｜     Total assets decrease, prepaid interest remains unchanged, margin ratio decreases, and the number of days covered by prepaid interest remains the same.\n          4. collateral send to prepaid interest // addGuarantee |      Total assets remain unchanged, prepaid interest increases, margin ratio remains unchanged, and the number of days covered by prepaid interest increases.\n          5. prepaid interest send to wallet /// moveGuarantee |        Total assets decrease, prepaid interest decreases, margin ratio decreases, and the number of days covered by prepaid interest decreases.\n          6. prepaid interest send to collateral /// add collateral ||  Total assets remain unchanged, prepaid interest decreases, margin ratio remains unchanged, and the number of days covered by prepaid interest decreases.\n          */\n        const { settlementCurrency } = currentPosition.mintTokenInfo\n        const { shortBalanceValue, estimatedDailyDebt, collateralValue } = currentPosition.positionStatus\n        const tokenTypeDecimals = getTokenDecimals(record.tokenType)\n        if (record.accountType === AccountType.MyWallet) {\n          const balance = walletTokenBalance[record.tokenType] || 0\n          data[0].transferVal = balance\n          if (data[1].accountType === AccountType.Standard) {\n            data[1].transferVal = balance + avatarAssetList[record.tokenType]\n          }\n          if (data[1].accountType === AccountType.Settlement) {\n            data[1].transferVal = balance + collateralIndex.prepaidInterest\n          }\n          // data[1].transferVal = balance\n        } else if (record.accountType === AccountType.Standard) {\n          const collateralAssets = avatarAssetList[record.tokenType] || 0\n          const maxActionTotalAssets = Number(\n            TokenUtils.formatTokenAmount(1.2 * Number(toLargeUnits(shortBalanceValue, settlementCurrency.decimals)), 0),\n          )\n          if (collateralAssets > 0) {\n            if (maxActionTotalAssets === 0) {\n              data[0].transferVal = collateralAssets\n              if (data[1].accountType === AccountType.MyWallet) {\n                data[1].transferVal = collateralAssets + walletTokenBalance[record.tokenType]\n              }\n              if (data[1].accountType === AccountType.Settlement) {\n                data[1].transferVal = collateralAssets + collateralIndex.prepaidInterest\n              }\n              return data\n            }\n            const maxCollateralTransfer = maxActionTotalAssets - collateralIndex.prepaidInterest\n            if (data[1].accountType === AccountType.Settlement) {\n              // If the calculated maximum value exceeds the asset value, use the asset value instead.\n              if (maxCollateralTransfer > collateralAssets) {\n                data[0].transferVal = collateralAssets\n                // data[1].transferVal = collateralAssets\n              } else {\n                data[0].transferVal = maxCollateralTransfer\n                // data[1].transferVal = maxCollateralTransfer\n              }\n            }\n            if (data[1].accountType === AccountType.MyWallet) {\n              const amountOutPrice = getSwapQuote(\n                chainId,\n                record.tokenType,\n                settlementCurrency.symbol,\n                toSmallUnits(collateralAssets, tokenTypeDecimals),\n                tokenPools,\n              )\n              const otherTokenWbtc = collateralValue.sub(amountOutPrice)\n              const actionCurrentMaxValue =\n                maxCollateralTransfer - Number(toLargeUnits(otherTokenWbtc, settlementCurrency.decimals))\n\n              const amountInCurrentMaxValue = getSwapQuote(\n                chainId,\n                settlementCurrency.symbol,\n                record.tokenType,\n                toSmallUnits(\n                  TokenUtils.formatTokenAmount(actionCurrentMaxValue, settlementCurrency.decimals),\n                  settlementCurrency.decimals,\n                ),\n                tokenPools,\n              )\n              // Calculate the maximum operable value for the current cryptocurrency.\n              const maxTransterCurrentToken = toLargeUnits(amountInCurrentMaxValue, tokenTypeDecimals, true) as number\n              // If the calculated maximum value exceeds the asset value, use the asset value.\n              if (maxTransterCurrentToken > collateralAssets) {\n                data[0].transferVal = collateralAssets\n                // data[1].transferVal = collateralAssets\n              } else if (maxTransterCurrentToken > 0) {\n                data[0].transferVal = Math.floor(collateralAssets - maxTransterCurrentToken)\n                // data[1].transferVal = Math.floor(collateralAssets - maxTransterCurrentToken)\n              } else {\n                data[0].transferVal = collateralAssets\n                // data[1].transferVal = collateralAssets\n              }\n            }\n            if (data[1].accountType === AccountType.MyWallet) {\n              data[1].transferVal = data[0].transferVal + walletTokenBalance[record.tokenType]\n            }\n            if (data[1].accountType === AccountType.Settlement) {\n              data[1].transferVal = data[0].transferVal + collateralIndex.prepaidInterest\n            }\n          }\n        } else if (record.accountType === AccountType.Settlement) {\n          if (data[1].accountType === AccountType.MyWallet) {\n            const maxPrepaidInterest =\n              20 * Number(toLargeUnits(estimatedDailyDebt.toNumber(), settlementCurrency.decimals))\n            const maxActionPrepaidInterest = collateralIndex.prepaidInterest - maxPrepaidInterest\n\n            if (maxActionPrepaidInterest > 0) {\n              data[0].transferVal = Number(\n                TokenUtils.formatTokenAmount(maxActionPrepaidInterest, settlementCurrency.decimals),\n              )\n            }\n          }\n          if (data[1].accountType === AccountType.Standard) {\n            const maxPrepaidInterest =\n              20 * Number(toLargeUnits(estimatedDailyDebt.toNumber(), settlementCurrency.decimals))\n            const maxActionPrepaidInterest = collateralIndex.prepaidInterest - maxPrepaidInterest\n            if (maxActionPrepaidInterest > 0) {\n              data[0].transferVal = maxActionPrepaidInterest\n            }\n          }\n          if (data[1].accountType === AccountType.MyWallet) {\n            data[1].transferVal = data[0].transferVal + walletTokenBalance[record.tokenType]\n          }\n          if (data[1].accountType === AccountType.Standard) {\n            data[1].transferVal = data[0].transferVal + avatarAssetList[record.tokenType]\n          }\n        }\n        data[1].transferVal = Number(TokenUtils.formatFourDecimals(data[1].transferVal))\n        return data\n      })\n    },\n    [\n      avatarAssetList,\n      chainId,\n      collateralIndex,\n      currentPosition.mintTokenInfo,\n      currentPosition.positionStatus,\n      tokenPools,\n      walletTokenBalance,\n    ],\n  )\n\n  useEffect(() => {\n    setActionData((state) => {\n      return [\n        state[0],\n        {\n          ...state[1],\n          list: accountCategoryList.filter((it) => it.type !== state[0].accountType),\n        },\n      ]\n    })\n  }, [])\n\n  useEffect(() => {\n    if (trading) {\n      setGDisStatus(true)\n      return\n    }\n    const [left] = actionData\n    const { decimals } = left\n    if (!left || !decimals) return\n    let leftBalance = 0\n    const { transferVal } = left\n    const transferAmout = toSmallUnits(\n      TokenUtils.formatTokenAmount(transferVal, commonTokens[valueToKeyMap[left.tokenType]].decimals),\n      commonTokens[valueToKeyMap[left.tokenType]].decimals,\n    )\n    if (transferAmout.isZero()) {\n      setGDisStatus(true)\n      return\n    }\n    if (left.accountType === AccountType.MyWallet) {\n      leftBalance = walletTokenBalance[left.tokenType] || 0\n    }\n    if (left.accountType === AccountType.Settlement || left.accountType === AccountType.Standard) {\n      if (left.accountType === AccountType.Settlement) {\n        // if ()\n        const { interestGuaranteed } = currentPosition.positionStatus\n        if (transferAmout.gt(interestGuaranteed)) {\n          setGDisStatus(true)\n          return\n        }\n      }\n      if (left.accountType === AccountType.Standard) {\n        const val = avatarAssetList[left.tokenType] || 0\n        if (transferVal > val) {\n          setGDisStatus(true)\n          return\n        }\n      }\n      if (newCollateralRatio < 120 || newPrepaidInterestCoverage < 20) {\n        setGDisStatus(true)\n      } else {\n        setGDisStatus(false)\n      }\n      return\n    }\n\n    if (left.transferVal <= 0 || left.transferVal > leftBalance || trading) {\n      setGDisStatus(true)\n    } else {\n      setGDisStatus(false)\n    }\n  }, [\n    actionData,\n    avatarAssetList,\n    currentPosition.positionStatus,\n    newCollateralRatio,\n    newPrepaidInterestCoverage,\n    trading,\n    walletTokenBalance,\n  ])\n\n  return (\n    <Wrapper>\n      <Title>General Transfer</Title>\n      <Accordion id=\"panel15\" expanded={expanded === 'panel15'} onChange={handleChange('panel15')}>\n        <AccordionSummary aria-controls=\"panel1d-content\">\n          <Typography>Method 1. Freestyle Transfer</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          {actionData.map((item, index) => {\n            let avatarAssetBalance = (avatarAssetList && avatarAssetList[item.tokenType]) || 0\n            let walletAssetBalance = (walletTokenBalance && walletTokenBalance[item.tokenType]) || 0\n            if (String(avatarAssetBalance).includes('.')) {\n              avatarAssetBalance = TokenUtils.formatFourDecimals(avatarAssetBalance)\n            }\n\n            if (String(walletAssetBalance).includes('.')) {\n              walletAssetBalance = TokenUtils.formatFourDecimals(walletAssetBalance)\n            }\n\n            return (\n              <div key={item.id}>\n                <MethodsWrap>\n                  <div className=\"balance_info\">\n                    <span className=\"label\">Balance: </span>\n                    {item.accountType === AccountType.Standard && (\n                      <span>\n                        {avatarAssetBalance} {item.tokenType}\n                      </span>\n                    )}\n                    {item.accountType === AccountType.MyWallet && (\n                      <span>\n                        {walletAssetBalance} {item.tokenType}\n                      </span>\n                    )}\n                    {item.accountType === AccountType.Settlement && (\n                      <span>\n                        {TokenUtils.formatFourDecimals(collateralIndex.prepaidInterest)}{' '}\n                        {currentPosition.mintTokenInfo.settlementCurrency.symbol}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"content\">\n                    <Select\n                      options={item.list}\n                      onChange={(val) => {\n                        onChangeAccount(val, item, index)\n                      }}\n                      selectValue={item.accountType}\n                    />\n                    <Select\n                      options={tokenList}\n                      onChange={(val) => {\n                        onChangeToken(val, index)\n                      }}\n                      selectValue={item.tokenType}\n                      selectDisabled={index === 1 ? true : item.tokenSelectDisabled}\n                    />\n                    <Input\n                      value={item.transferVal}\n                      type=\"number\"\n                      onChange={(event) => {\n                        const inputValue = event.target.value\n                        let formattedValue = ''\n                        const cleanedValue = inputValue.replace(/[^\\d.]/g, '')\n                        if (cleanedValue.includes('.')) {\n                          const parts = cleanedValue.split('.')\n                          parts[1] = parts[1]?.slice(0, commonTokens[valueToKeyMap[item.tokenType]].decimals)\n                          formattedValue = parts.join('.')\n                        } else {\n                          formattedValue = cleanedValue\n                        }\n                        if (Number(formattedValue) > 100000000) {\n                          formattedValue = '100000000'\n                        }\n                        onChangeVal({ target: { value: formattedValue } }, item)\n                      }}\n                      disabled={index === 1}\n                    />\n                  </div>\n\n                  <div hidden={index === 1} className=\"func\">\n                    <span\n                      onClick={() => {\n                        onMax(item)\n                      }}\n                      onKeyUp={() => null}\n                      tabIndex={0}\n                      role=\"button\"\n                    >\n                      Max\n                    </span>\n                  </div>\n                </MethodsWrap>\n\n                {index === 0 ? (\n                  <div style={{ display: 'flex', alignItems: 'center', height: 30, justifyContent: 'center' }}>\n                    <ExchangeArrow\n                      onClick={() => {\n                        setActionData((state) => {\n                          const list1 = state[0]\n                          const list2 = state[1]\n                          const data = state.reverse()\n                          return data.map((it, i) => ({\n                            ...it,\n                            transferVal: 0,\n                            list:\n                              i === 0\n                                ? list1.list\n                                : accountCategoryList.filter((ele) => ele.type !== list2.accountType),\n                            tokenSelectDisabled: i === 0 ? list1.tokenSelectDisabled : list2.tokenSelectDisabled,\n                          }))\n                        })\n                      }}\n                      style={{ fill: 'none', transform: 'rotate(90deg)', cursor: 'pointer', width: 22 }}\n                    />\n                  </div>\n                ) : null}\n              </div>\n            )\n          })}\n          <DataWrapper\n            data={[\n              [DataIndexName.CollateralRatio, collateralIndex.displayRatio, newDisplayCollateralRatio],\n              [\n                DataIndexName.PrepaidInterestCoverage,\n                collateralIndex.displayCoverage,\n                newDisplayPrepaidInterestCoverage,\n              ],\n            ]}\n          />\n          {approveStatus ? (\n            <Approve style={{ boxShadow: 'none' }} disabled={gDisStatus} onClick={onSubmit}>\n              Submit\n            </Approve>\n          ) : (\n            <Approve\n              style={{ boxShadow: 'none' }}\n              disabled={approveBtnStatus}\n              onClick={() => {\n                onApprove((state) => {\n                  setApproveBtnStatus(state)\n                })\n              }}\n            >\n              Approve\n            </Approve>\n          )}\n        </AccordionDetails>\n      </Accordion>\n    </Wrapper>\n  )\n}\n","/* eslint-disable no-nested-ternary */\nimport React, { MutableRefObject, useCallback, useEffect, useMemo, useState } from 'react'\nimport { useWeb3React } from 'web3-react-core'\nimport { Link, withRouter } from 'react-router-dom'\nimport { styled } from '@mui/material/styles'\nimport { Grid } from '@mui/material'\nimport Slide from 'components/Slide'\nimport Select from 'components/Select'\nimport Card from 'components/Card'\nimport { ArrowLine, Fbtc20Icon } from 'components/uikit'\nimport { FlexWrap, ScrollWrapper } from 'components/CommonComponent'\nimport CopyToClipboard from 'components/uikit/components/WalletModal/CopyToClipboard'\nimport { useApprove, useCheckApprove } from 'hooks/useApprove'\nimport useToast from 'hooks/useToast'\nimport Assets from 'assets'\nimport SubTitle from 'components/SubTitle'\nimport { TokenUtils, toLargeUnits } from 'utils/transformHelper'\nimport { usePositionAction, usePositionInfo } from 'hooks/news/usePoistion'\nimport Logo from 'components/Logo'\nimport { mintTokenChainConfigs, MintTokenKey } from 'config/constants/mintToken'\nimport { SupportedChainId } from 'config/constants/chains'\nimport { isSupportedChainId } from 'utils/web3React'\nimport { Infinite, ToastTitle } from 'config/constants/contants'\nimport { TransactionSuccessInfo } from 'components/TransactionInfo'\nimport { LiquidationThresholdValue } from '../../../config/constants/thresholdValue'\nimport Title from './Title'\nimport BeforeMintAction from './BeforeMintAction'\nimport WithdrawCollateral from './WithdrawCollateral'\nimport ImproveGuaranteeDays from './ImproveGuaranteeDays'\nimport ImproveCollateralRatio from './ImproveCollateralRatio'\nimport TradingThroughAvatar from './TradingThroughAvatar'\nimport GeneralTransfer from './GeneralTransfer'\nimport usePanel from '../../../hooks/usePanel'\n\nconst Box = styled('div')`\n  box-sizing: border-box;\n  margin-top: 18px;\n  padding-right: 44px;\n  overflow: auto;\n\n  & > .MuiGrid-root {\n    min-width: 1024px;\n  }\n\n  .account_panel {\n    height: calc(100vh - 189px);\n    padding-bottom: 100px;\n    overflow: auto;\n\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n\n  .asset_info {\n    padding: 0;\n    margin-top: 26px;\n  }\n`\nconst CardWrap = styled(Card)`\n  position: relative;\n  padding: 23px 0;\n  display: flex;\n  margin-bottom: 20px;\n\n  .avatar_info {\n    .avatar {\n      font-family: PingFangSC-Regular, sans-serif;\n      font-size: 12px;\n      line-height: 17px;\n      color: #000000;\n\n      & + svg {\n        margin-left: 10px;\n      }\n    }\n  }\n\n  .token_item {\n    justify-content: space-between;\n    align-items: center;\n    padding: 16px 0;\n\n    svg {\n      margin-right: 10px;\n\n      & + span {\n        margin-top: 5px;\n      }\n    }\n\n    .balance {\n      font-family: PingFangSC-Regular, sans-serif;\n\n      span:first-of-type {\n        font-size: 14px;\n        line-height: 20px;\n      }\n\n      span:last-of-type {\n        font-size: 12px;\n        line-height: 17px;\n        color: #747879;\n      }\n    }\n  }\n`\nconst TipPanel = styled('div')`\n  width: 50%;\n  padding: 0 30px 0 40px;\n  display: flex;\n  justify-content: space-between;\n\n  font-family: PingFangSC-Semibold, sans-serif;\n\n  > div {\n    width: calc(100% - 50px);\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 0.2px;\n    height: 70%;\n    background-color: #2da3ff;\n  }\n\n  h2 {\n    font-family: PingFangSC-Semibold, sans-serif;\n    font-weight: 550;\n    font-size: 1rem;\n    line-height: 22px;\n    color: #000000;\n  }\n\n  .num {\n    font-family: PingFangSC-Semibold, sans-serif;\n    font-weight: 550;\n    font-size: 50px;\n    line-height: 1;\n    color: #6ed6f3;\n    display: flex;\n    align-items: flex-end;\n    margin-bottom: 20px;\n    margin-top: 15px;\n    width: 100%;\n\n    span {\n      font-family: PingFangSC-Regular, sans-serif;\n      display: block;\n      max-width: 80%;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    sub {\n      margin-bottom: 5px;\n      font-size: 20px;\n      font-weight: 500;\n    }\n  }\n\n  .tip {\n    font-size: 12px;\n    line-height: 17px;\n    color: rgba(0, 0, 0, 0.5);\n  }\n\n  .num.guarantee {\n    color: #efd71e;\n  }\n`\nconst TipWrap = styled(CardWrap)`\n  padding: 23px 0 !important;\n`\n\nconst CollateralInfoWrap = styled('div')`\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.4);\n  box-shadow: 0 4px 27px rgba(0, 0, 0, 0.03);\n  border-radius: 8px;\n  margin-bottom: 20px;\n  .m_title {\n    font-size: 22px;\n    line-height: 31px;\n    font-weight: 500;\n    font-family: PingFangSC-Medium, sans-serif;\n    margin-bottom: 13px;\n  }\n  .list {\n    background: rgba(42, 161, 255, 0.07);\n    border-radius: 8px;\n    padding: 16px 16px 0;\n    margin-bottom: 18px;\n  }\n  .item {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    svg {\n      margin-right: 10px;\n    }\n    .item_title {\n      font-size: 18px;\n      font-family: PingFangSC-Semibold, sans-serif;\n      font-weight: 550;\n      line-height: 25px;\n      display: flex;\n      align-items: center;\n      margin-bottom: 20px;\n      img {\n        width: 24px;\n        margin-right: 10px;\n      }\n    }\n    .icon_symbol {\n      display: flex;\n      align-items: center;\n      font-family: PingFangSC-Medium, sans-serif;\n      font-weight: 500;\n      font-size: 14px;\n    }\n    span {\n      font-family: PingFangSC-Regular, sans-serif;\n      font-size: 14px;\n    }\n    &.currency {\n      padding: 22px 0;\n      border-top: 0.5px solid rgba(0, 0, 0, 0.13);\n    }\n    &.item_head {\n      padding-bottom: 14px;\n      span {\n        font-family: PingFangSC-Medium, sans-serif;\n        font-weight: 500;\n        font-size: 12px;\n        line-height: 17px;\n        color: rgba(0, 0, 0, 0.6);\n      }\n    }\n    .balance span {\n      line-height: 20px;\n      &:last-of-type {\n        opacity: 0.5;\n      }\n    }\n  }\n  .avatar .currency {\n    padding: 15px 0;\n  }\n  .avatar_address {\n    display: flex;\n    align-items: center;\n    padding-left: 16px;\n    line-height: 17px;\n    * {\n      font-size: 12px;\n      font-weight: normal !important;\n      color: #000 !important;\n      font-family: PingFangSC-Regular, sans-serif !important;\n    }\n  }\n\n  .asset_list_title {\n    font-family: PingFangSC-Medium, sans-serif;\n    font-weight: 500;\n    font-size: 22px;\n    line-height: 22px;\n    color: #000000;\n    margin-bottom: 22px;\n  }\n  .outstandingDebt {\n    span {\n      font-size: 14px;\n    }\n    div {\n      font-family: PingFangSC-Medium, sans-serif;\n      font-weight: 500;\n      margin-bottom: 5px;\n      svg {\n        margin-right: 10px;\n      }\n    }\n    span:last-of-type {\n      font-family: PingFangSC-Regular, sans-serif;\n      font-weight: 400;\n    }\n  }\n`\nconst getValueColor = (value: number) =>\n  value * 1 >= 400 ? 'rgb(29, 202, 218)' : value * 1 > 200 ? 'rgb(255, 204, 4)' : 'rgb(255, 99, 8)'\n\nfunction Manage() {\n  const oBox: MutableRefObject<any> = React.useRef()\n  const { expanded } = usePanel()\n  const [approveStatus, setApproveStatus] = useState(false)\n\n  const { currentPosition, currentPositionTokenInfo, currentMintToken } = usePositionInfo()\n  const { handleChangeCurrentPosition } = usePositionAction()\n  const { account, chainId } = useWeb3React()\n  const { toastSuccess, toastError, toastWarning } = useToast()\n  // change manager\n  const onChange = useCallback(\n    (val) => {\n      handleChangeCurrentPosition(val)\n    },\n    [handleChangeCurrentPosition],\n  )\n  const { handleApprove } = useApprove(account, currentPosition?.mintTokenInfo.settlementCurrency.address)\n  const { onCheckApprove } = useCheckApprove()\n  const checkApprove = useCallback(async () => {\n    if (currentPosition && currentPosition.isEnable) {\n      const txInfo = await onCheckApprove(\n        account,\n        currentPosition.mintTokenInfo.settlementCurrency.address,\n        currentPosition.positionAddress,\n      )\n      if (txInfo && txInfo._hex > 0) {\n        setApproveStatus(true)\n      } else {\n        setApproveStatus(false)\n      }\n      return txInfo\n    }\n    return 0\n  }, [account, currentPosition, onCheckApprove])\n\n  const onApprove = useCallback(\n    async (callback?) => {\n      if (currentPosition && currentPosition.isEnable) {\n        try {\n          if (callback) {\n            callback(true)\n          }\n          const info = await handleApprove(currentPosition.positionAddress)\n          if (info.hash) {\n            const result = await info.wait()\n            if (result) {\n              checkApprove().then((approveTransactionInfo) => {\n                if (callback) {\n                  callback(false)\n                }\n                if (approveTransactionInfo._hex > 0) {\n                  setApproveStatus(true)\n                  toastSuccess(\n                    ToastTitle.success,\n                    <TransactionSuccessInfo txHash={result.transactionHash} content=\"The approve has been successfully\" />,\n                  )\n                } else {\n                  setApproveStatus(false)\n                  toastWarning('Approve Warning', 'Approval is zero. You will not be able to perform any transactions.')\n                }\n              })\n            }\n          }\n        } catch (err: any) {\n          if (callback) {\n            callback(false)\n          }\n          toastError(ToastTitle.failed, `${err.reason}`)\n        }\n      }\n    },\n    [currentPosition, handleApprove, checkApprove, toastSuccess, toastWarning, toastError],\n  )\n\n  const collateralRatio = useMemo(() => {\n    if (currentPosition && currentPosition.collateralRatio) {\n      if (currentPosition.collateralRatio === Number.POSITIVE_INFINITY) {\n        return `+${Infinite}`\n      }\n      if (currentPosition.collateralRatio === Number.NEGATIVE_INFINITY) {\n        return `-${Infinite}`\n      }\n      return TokenUtils.formatTokenAmount(currentPosition.collateralRatio, 2)\n    }\n    return '0'\n  }, [currentPosition])\n  const prepaidInterestCoverage = useMemo(() => {\n    if (currentPosition && currentPosition.prepaidInterestCoverage) {\n      if (currentPosition.prepaidInterestCoverage === Number.POSITIVE_INFINITY) {\n        return '+∞'\n      }\n      return TokenUtils.formatTokenAmount(currentPosition.prepaidInterestCoverage, 0)\n    }\n    return '0'\n  }, [currentPosition])\n  const prepaidInterest = useMemo(() => {\n    if (currentPosition) {\n      const pi = toLargeUnits(\n        currentPosition.positionStatus.interestGuaranteed\n          .sub(currentPosition.positionStatus.obligation)\n          .sub(currentPosition.positionStatus.epochDebt)\n          .sub(currentPosition.positionStatus.estimatedObligationToday),\n        currentPosition.mintTokenInfo.settlementCurrency.decimals,\n      )\n      return TokenUtils.formatTokenAmount(Number(pi), 4)\n    }\n    return 0\n  }, [currentPosition])\n\n  useEffect(() => {\n    checkApprove()\n    if (expanded && Number(expanded) !== -1) {\n      if (oBox && expanded !== 'panel1' && expanded !== 'panel2') {\n        setTimeout(() => {\n          const panel = document.querySelector(`#${expanded}`)\n\n          if (panel) {\n            panel.scrollIntoView()\n          }\n        }, 500)\n      }\n    }\n  }, [checkApprove, currentPosition, expanded])\n\n  const allowedAssets = useMemo(() => {\n    if (!currentPositionTokenInfo) {\n      return null\n    }\n    const currentTokenPrice = currentPositionTokenInfo.tokenPrice\n    const currentAllowedTokens = currentPositionTokenInfo.allowedTokens\n    const currentAllowedTokenBalance = currentPositionTokenInfo.allowedTokens?.balances\n    const usdt = currentPositionTokenInfo.WBTCToUSD\n    return Object.values(currentAllowedTokens.tokens).map((tokenInfo) => (\n      <div className=\"item currency\" key={tokenInfo.symbol}>\n        <div className=\"icon_symbol\">\n          <Logo\n            token={tokenInfo.logo}\n            symbol={tokenInfo.symbol}\n            imgprops={{\n              style: {\n                marginRight: 10,\n              },\n            }}\n          />\n          {tokenInfo.symbol}\n        </div>\n        <FlexWrap className=\"balance\" style={{ flexDirection: 'column', alignItems: 'flex-end' }}>\n          <span>\n            {(currentAllowedTokenBalance &&\n              toLargeUnits(currentAllowedTokenBalance[tokenInfo.symbol], tokenInfo.decimals)) ||\n              0}\n          </span>\n          <span>\n            ≈ $\n            {(currentAllowedTokenBalance &&\n              TokenUtils.formatCurrencyTwoDecimals(\n                (Number(currentAllowedTokenBalance[tokenInfo.symbol]) *\n                  Number(currentTokenPrice[tokenInfo.symbol]?.price) *\n                  usdt) /\n                  10 ** currentPosition.mintTokenInfo.settlementCurrency.decimals,\n              )) ||\n              0}\n          </span>\n        </FlexWrap>\n      </div>\n    ))\n  }, [currentPosition, currentPositionTokenInfo])\n\n  const mintTokens = useMemo(() => {\n    if (isSupportedChainId(chainId)) {\n      const _tokens = mintTokenChainConfigs[chainId as SupportedChainId].tokens\n      return Object.keys(mintTokenChainConfigs[chainId as SupportedChainId].tokens).map((key) => {\n        return {\n          token: _tokens[key as MintTokenKey].symbol,\n          address: _tokens[key as MintTokenKey].address,\n          decimals: _tokens[key as MintTokenKey].decimals,\n          icon: () => (\n            <Logo\n              imgprops={{ style: { marginRight: 10 } }}\n              token={_tokens[key as MintTokenKey].logo}\n              symbol={_tokens[key as MintTokenKey].symbol}\n            />\n          ),\n        }\n      })\n    }\n    return []\n  }, [chainId])\n\n  return (\n    <>\n      <Title style={{ marginBottom: 4 }}>Collateral Management</Title>\n      <SubTitle>\n        Make sure the collateral ratio is higher than the Liquidation Ratio, and the Prepaid Interest Coverage is higher\n        than the Liquidation Threshold.\n      </SubTitle>\n      <Select isGroup={false} options={mintTokens} selectValue={currentMintToken} onChange={onChange} />\n      <Box>\n        {!currentPosition?.isEnable ? (\n          <Link to=\"/collateral\" style={{ color: '#2AA1FF' }}>\n            Please enable the collateral first\n            <ArrowLine />{' '}\n          </Link>\n        ) : (\n          <Grid key={currentMintToken} container spacing={2.5}>\n            <Grid item xs={8}>\n              <ScrollWrapper ref={oBox}>\n                <TipWrap>\n                  <TipPanel>\n                    <div title={`Collateral Ratio: ${Number(collateralRatio) > 0 ? `${collateralRatio}%`: collateralRatio}`}>\n                      <h2>Collateral Ratio</h2>\n                      {!currentPosition.collateralRatio ? (\n                        <p className=\"tip\" style={{ lineHeight: '85px' }}>\n                          Add collateral before mint\n                        </p>\n                      ) : (\n                        <p className=\"num\">\n                          {currentPosition.collateralRatio ? (\n                            <>\n                              <span\n                                style={{\n                                  color: getValueColor(currentPosition?.collateralRatio),\n                                }}\n                              >\n                                {collateralRatio}\n                              </span>\n                              {currentPosition?.collateralRatio === Number.POSITIVE_INFINITY ? null : (\n                                <sub\n                                  style={{\n                                    color: getValueColor(currentPosition?.collateralRatio),\n                                  }}\n                                >\n                                  %\n                                </sub>\n                              )}\n                            </>\n                          ) : (\n                            <span\n                              style={{\n                                color: 'rgb(255, 99, 8)',\n                              }}\n                            >\n                              0\n                            </span>\n                          )}\n                        </p>\n                      )}\n                      <p className=\"tip\">Liquidation Ratio：{LiquidationThresholdValue.ratio}%</p>\n                    </div>\n                    <Slide\n                      style={{ height: '100%' }}\n                      value={\n                        currentPosition.isEnable && collateralRatio !== '0'\n                          ? (currentPosition?.collateralRatio - 100) / 5\n                          : 0\n                      }\n                    />\n                  </TipPanel>\n                  <TipPanel>\n                    <div title={`Prepaid Interest Coverage: ${prepaidInterestCoverage} days`}>\n                      <h2>Prepaid Interest Coverage</h2>\n                      {!currentPosition.prepaidInterestCoverage ? (\n                        <p className=\"tip\" style={{ lineHeight: '85px' }}>\n                          Add collateral before mint\n                        </p>\n                      ) : (\n                        <p className=\"num guarantee\">\n                          {currentPosition.prepaidInterestCoverage ? (\n                            <>\n                              <sub\n                                style={{\n                                  color: getValueColor(currentPosition.prepaidInterestCoverage),\n                                }}\n                              >\n                                ≈\n                              </sub>\n                              <span\n                                style={{\n                                  color: getValueColor(currentPosition.prepaidInterestCoverage),\n                                }}\n                              >\n                                {prepaidInterestCoverage}\n                              </span>\n                              {currentPosition.prepaidInterestCoverage === Number.POSITIVE_INFINITY ? null : (\n                                <sub\n                                  style={{\n                                    color: getValueColor(currentPosition.prepaidInterestCoverage),\n                                  }}\n                                >\n                                  days\n                                </sub>\n                              )}\n                            </>\n                          ) : (\n                            <span\n                              style={{\n                                color: 'rgb(255, 99, 8)',\n                              }}\n                            >\n                              0\n                            </span>\n                          )}\n                        </p>\n                      )}\n                      <p className=\"tip\">Liquidation Threshold: {LiquidationThresholdValue.days} days</p>\n                      {/*   <p className='tip'>Min. Mint Guarantee days: {Constants.minMintGDays} days</p>\n                       */}{' '}\n                    </div>\n                    <Slide style={{ height: '100%' }} value={currentPosition.prepaidInterestCoverage / 5} />\n                  </TipPanel>\n                </TipWrap>\n                {/* collateral info */}\n                <BeforeMintAction onApprove={onApprove} approveStatus={approveStatus} />\n                <ImproveGuaranteeDays onApprove={onApprove} approveStatus={approveStatus} />\n                <ImproveCollateralRatio onApprove={onApprove} approveStatus={approveStatus} />\n                <TradingThroughAvatar onApprove={onApprove} approveStatus={approveStatus} />\n                <WithdrawCollateral onApprove={onApprove} approveStatus={approveStatus} />\n                <GeneralTransfer onApprove={onApprove} approveStatus={approveStatus} />\n                {/*\n                <ImproveCollateralRatio/>\n                <WithdrawCollateral managerInfo={managerData} guaranteeBalance={guaranteeBalance}/>\n                */}\n              </ScrollWrapper>\n            </Grid>\n            <Grid item xs={4} className=\"account_panel\">\n              <CollateralInfoWrap>\n                <h3 className=\"m_title\">Total Collateral</h3>\n                <div className=\"list guarantee\">\n                  <div className=\"item\">\n                    <h4 className=\"item_title\">\n                      <img src={Assets.PrepaidInterest} alt=\"\" />\n                      Prepaid Interest\n                    </h4>\n                  </div>\n                  <div className=\"item currency\">\n                    <span className=\"icon_symbol\">\n                      <Logo\n                        token={currentPosition?.mintTokenInfo.settlementCurrency.logo}\n                        symbol={currentPosition?.mintTokenInfo.settlementCurrency.symbol}\n                      />\n                      <span\n                        style={{\n                          marginLeft: '10px',\n                        }}\n                      >\n                        {currentPosition?.mintTokenInfo.settlementCurrency.symbol}\n                      </span>\n                    </span>\n                    <span>{prepaidInterest}</span>\n                  </div>\n                </div>\n                <div className=\"list avatar\" style={{ marginBottom: 12 }}>\n                  <div className=\"item\">\n                    <h4 className=\"item_title\">\n                      <img src={Assets.Collateral} alt=\"\" />\n                      Collateral\n                    </h4>\n                  </div>\n                  <div className=\"item item_head\">\n                    <span>Ticker</span>\n                    <span>Holdings - In Collateral</span>\n                  </div>\n                  {allowedAssets}\n                </div>\n                <div className=\"avatar_address\">\n                  <span>Collateral Account Address: &nbsp;&nbsp;</span>{' '}\n                  <CopyToClipboard toCopy={currentPosition?.positionAddress || ''}>\n                    {currentPosition\n                      ? `${currentPosition?.positionAddress.slice(0, 6)}...${currentPosition?.positionAddress.slice(\n                          -6,\n                        )}`\n                      : ''}\n                  </CopyToClipboard>\n                </div>\n              </CollateralInfoWrap>\n              <CollateralInfoWrap>\n                <h3 className=\"asset_list_title\">My Outstanding Debt</h3>\n                <FlexWrap className=\"outstandingDebt\" style={{ alignItems: 'center', justifyContent: 'space-between' }}>\n                  <FlexWrap style={{ alignItems: 'center' }}>\n                    <Fbtc20Icon className=\"icon\" />\n                    {currentPosition?.mintTokenInfo.symbol}\n                  </FlexWrap>\n                  <span>\n                    {TokenUtils.formatFourDecimals(\n                      Number(toLargeUnits(currentPosition.balance, currentPosition.mintTokenInfo.decimals)),\n                    )}\n                  </span>\n                </FlexWrap>\n              </CollateralInfoWrap>\n              <CollateralInfoWrap style={{ padding: 30 }}>\n                <img src={Assets.CollateralManage} style={{ width: '100%' }} alt=\"\" />\n              </CollateralInfoWrap>\n            </Grid>\n          </Grid>\n        )}\n      </Box>\n    </>\n  )\n}\n\nexport default withRouter(Manage)\n","import React from 'react';\nimport Manage from \"./components/manage\";\n\nfunction ManagerPage() {\n  return (\n    <Manage/>\n  );\n}\n\nexport default ManagerPage;\n","import React from 'react'\n\nexport default function Logo(props: { token: string; symbol: string; imgprops?: React.ImgHTMLAttributes<HTMLImageElement> }) {\n  return <img {...props.imgprops} style={{width: 22, height: 22, ...props.imgprops?.style}} src={props.token} alt={props.symbol}  />\n}\n","import React from \"react\";\nimport {useAppDispatch, useAppSelector} from \"../state\";\nimport {toggleStatus} from \"../state/CollateralManage/actions\";\n\nexport default function usePanel(){\n  const expanded = useAppSelector((state)=> state.collateralManage.expanded)\n  const dispatch = useAppDispatch()\n  const handleChange = (panel: string):(event: React.SyntheticEvent, newExpanded: boolean)=>void => {\n    return (event: React.SyntheticEvent, newExpanded: boolean) => {\n      dispatch(toggleStatus({expanded:newExpanded ? panel : '-1'}))\n    }\n  }\n  const setExpanded = (panel?: string) => {\n    dispatch(toggleStatus({expanded:panel || '-1'}))\n  }\n  return {expanded,handleChange,setExpanded}\n}\n","import React from 'react'\nimport { styled } from '@mui/material/styles'\n\nconst Wrapper = styled('div')`\n  background: #def1ff;\n  border-radius: 14px;\n  padding: 13px 22px;\n  margin: 20px 0;\n\n  table {\n    width: 100%;\n  }\n\n  td {\n    font-family: PingFangSC-Regular, sans-serif;\n    font-weight: 400;\n    font-size: 12px;\n    padding: 5px 0;\n  }\n\n  .label {\n    text-align: left;\n    width: 30%;\n  }\n\n  .from,\n  .to {\n    width: 35%;\n    line-height: 17px;\n    text-align: right;\n  }\n\n  .to {\n    font-family: PingFangSC-Medium, sans-serif;\n    font-weight: 500;\n    color: #000;\n  }\n\n  .borderTop {\n    border-top: 0.5px solid rgba(0, 0, 0, 0.12);\n  }\n`\n\n/*\n\nconst data = [\n  ['Collateral Ratio', 100, 200],\n  ['Collateral Ratio', 100, 200],\n  ['Collateral Ratio', 100, 200],\n]\n\n*/\n\nfunction DataWrapper(props) {\n  const { data } = props\n  return (\n    <Wrapper>\n      <table>\n        <tbody>\n          <tr>\n            <td className=\"from\" colSpan={2}>\n              From\n            </td>\n            <td className=\"to\">To</td>\n          </tr>\n          {data.map((item) => (\n            <tr className={item[3] ? 'borderTop' : ''} key={item[0]}>\n              <td className=\"label\">{item[0]}</td>\n              <td className=\"from\">{item[1]}</td>\n              <td className=\"to\">{item[2]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Wrapper>\n  )\n}\n\nexport default DataWrapper\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { styled } from '@mui/material/styles'\nimport { PoolProps } from 'config/constants/types'\nimport { TokenUtils } from 'utils/transformHelper'\nimport Select from '../Select'\nimport { ExchangeArrow, RoundArrow } from '../uikit'\nimport { FlexWrap } from '../CommonComponent'\n\nconst SelectWrap = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: static !important;\n`\n\nconst GroupWrap = styled('div')`\n  display: flex;\n  flex-direction: column;\n  width: calc(100% / 2 - 25px);\n\n  p {\n    height: 28px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0 15px;\n    box-sizing: border-box;\n\n    span {\n      font-size: 12px;\n      line-height: 17px;\n      color: rgba(0, 0, 0, 0.5);\n    }\n  }\n\n  .maxBtn {\n    height: 21px;\n    align-items: flex-end;\n  }\n`\n\nexport const IconWrap = styled('strong')`\n  display: block;\n  width: 20px;\n  height: 20px;\n  background: #c4c4c4;\n  line-height: 20px;\n  text-align: center;\n  border-radius: 50%;\n`\n\nexport interface MethodsProps {\n  options: PoolProps[] // selectIcon\n  selectValue: number // current selected\n  onMax?: (arg1: PoolProps) => void // to max action\n  selectedSymbol: string // selected symbol\n  SelectIcon: React.FC // leftTop icon\n  RightIcon: React.FC // right icon\n  leftInputValue?: number | null // left input value\n  rightInputValue?: number // right input value\n  rightBalance: number // right balance\n  rightSymbol: string // right symbol\n  rightOptions: PoolProps[] // options list\n  selectInput?: (arg1: React.SyntheticEvent) => void\n  leftBalance?: any\n}\n\nexport default function Index(props) {\n  const {\n    options,\n    leftBalance,\n    isExchange,\n    onExchange,\n    onMax,\n    selectInput,\n    rightSelectInput,\n    SelectIcon,\n    RightIcon,\n    leftInputValue,\n    rightInputValue,\n    rightBalance,\n    rightDisableStatus,\n    leftChange,\n    rightChange,\n    leftDisableStatus = [false, false],\n    leftSelectValue,\n    rightSelectValue,\n    rightOptions,\n    leftSymbol,\n    rightSymbol,\n    rightNumberIsShow = true,\n    leftDesc,\n    rightDesc,\n  } = props\n  // rightDisableStatus[1] true selectDisabled\n  // rightDisableStatus[2] true inputDisabled\n\n  const [currentSelected, setVal] = useState(options && options.length ? options[0] : {})\n  const [rightList, setRightList] = useState(options && options.length ? options[0].rightOptionList : [])\n  const [rightVal, setRightVal] = useState(rightList ? rightList[0] : {})\n\n\n  useEffect(() => {\n    if (options && options.length && leftSelectValue && rightSelectValue) {\n      setVal(options.filter((it) => it.token === leftSelectValue)[0] || options[0])\n      setRightList(options[0].rightOptionList)\n      setRightVal(options[0].rightOptionList.filter((it) => it.token === rightSelectValue)[0] || options[0].rightOptionList[0])\n    }\n  }, [leftSelectValue, options, rightSelectValue])\n\n  const displayValues = useMemo(() => {\n    const _rightBalance = rightBalance || rightVal && rightVal.balance || 0;\n    const _leftBalance = leftBalance || currentSelected.balance || 0;\n    return {\n      right: {\n        orignalBalance: _rightBalance,\n        balance: TokenUtils.formatFourDecimals(_rightBalance),\n        symbol: rightSymbol || (rightVal && Object.keys(rightVal) ? rightVal.token : 'WBTC'),\n      },\n      left: {\n        orignalBalance: _leftBalance,\n        balance: TokenUtils.formatFourDecimals(_leftBalance),\n        symbol: leftSymbol || currentSelected.token || 'WBTC',\n      },\n    }\n  }, [currentSelected, leftBalance, leftSymbol, rightBalance, rightSymbol, rightVal])\n  return (\n    <>\n      <SelectWrap>\n        <GroupWrap>\n          <p title={`${displayValues.left.symbol} Balance: ${displayValues.left.orignalBalance}`}>\n            <SelectIcon />\n            <span className=\"balance\">\n              {displayValues.left.balance} {displayValues.left.symbol}\n            </span>\n          </p>\n          <Select\n            key={1}\n            selectValue={leftSelectValue || currentSelected.token}\n            allDisabled={!leftDisableStatus || (leftDisableStatus[0] && leftDisableStatus[1])}\n            inputDisabled={!leftDisableStatus || leftDisableStatus[1]}\n            selectDisabled={!leftDisableStatus || leftDisableStatus[0]}\n            onChange={(val) => {\n              const selected = options.filter((it) => it.token === val)[0]\n              setRightList(selected.rightOptionList)\n              setRightVal(selected.rightOptionList[0])\n              setVal(selected)\n              if (leftChange) {\n                leftChange(selected)\n              }\n            }}\n            selectInput={selectInput}\n            actionValue={leftInputValue}\n            options={options}\n            groupStyle={{ width: '100%' }}\n            isGroup\n          />\n          <FlexWrap style={{ justifyContent: 'space-between', alignItems: 'center' }}>\n            {leftDesc && leftDesc}\n            <p dir=\"rtl\" style={{ width: '100%' }} className=\"maxBtn\">\n              <span\n                onClick={() => {\n                  if (onMax) {\n                    onMax(currentSelected)\n                  }\n                }}\n                onKeyUp={() => null}\n                tabIndex={0}\n                role=\"button\"\n                style={{ cursor: 'pointer', color: '#6ED6F3', fontSize: '0.75rem', userSelect: 'none' }}\n              >\n                Max\n              </span>\n            </p>\n          </FlexWrap>\n        </GroupWrap>\n        {isExchange ? (\n          <ExchangeArrow onClick={onExchange} style={{ fill: 'none', cursor: 'pointer', width: 22, marginTop: 8 }} />\n        ) : (\n          <RoundArrow style={{ fill: 'none', width: 22, marginTop: 8 }} />\n        )}\n\n        <GroupWrap>\n          <p title={rightNumberIsShow ? `${displayValues.right.symbol} Balance: ${displayValues.right.orignalBalance}` : ''}>\n            <RightIcon />\n            {rightNumberIsShow ? (\n              <span className=\"balance\">\n                {displayValues.right.balance}{\" \"}\n                {displayValues.right.symbol}\n              </span>\n            ) : null}\n          </p>\n          <Select\n            key={2}\n            selectValue={rightSelectValue || (rightVal ? rightVal.token : 'WBTC')}\n            options={rightOptions || rightList}\n            actionValue={rightInputValue}\n            groupStyle={{ width: '100%' }}\n            isGroup\n            allDisabled={!rightDisableStatus || (rightDisableStatus[0] && rightDisableStatus[1])}\n            inputDisabled={!rightDisableStatus || rightDisableStatus[1]}\n            selectDisabled={!rightDisableStatus || rightDisableStatus[0]}\n            selectInput={rightSelectInput}\n            onChange={(val) => {\n              if (currentSelected) {\n                const selected = currentSelected.rightOptionList.filter((it) => it.token === val)[0]\n                if (rightChange) {\n                  rightChange(selected)\n                }\n                setRightVal(selected)\n              } else {\n                const selected = options[0].filter((it) => it.token === val)[0]\n                if (rightChange) {\n                  rightChange(selected)\n                }\n                setRightVal(selected)\n              }\n            }}\n          />\n          <FlexWrap style={{ justifyContent: 'space-between', alignItems: 'center' }}>\n            {rightDesc && rightDesc}\n            <p dir=\"rtl\" style={{ width: '100%' }} className=\"maxBtn\" />\n          </FlexWrap>\n        </GroupWrap>\n      </SelectWrap>\n    </>\n  )\n}\n","import { useWeb3React } from 'web3-react-core'\nimport { useCallback } from 'react'\nimport { ethers } from 'ethers'\nimport { getContract, getSigner } from 'utils/web3React'\nimport ERC20 from 'config/abi/erc20.json'\nimport useSystemParams from './useSystemParams'\n\nexport function useCheckApprove() {\n  const { active } = useWeb3React()\n  const {signer} = useSystemParams()\n\n  const handleApprove = useCallback(\n    async (account: string, spender: string, target: string) => {\n      if (active) {\n        try {\n          // TODO rpc url should be from the chainId\n\n          // const { signer } = getProviderAndSigner(INFURA_NETWORK_URLS[SupportedChainId.BLAST_SEPPLIA], account, SupportedChainId.BLAST_SEPPLIA)\n          const contract = getContract(signer, ERC20, spender)\n          if (contract) {\n            const allowance = await contract.allowance(account, target)\n            return allowance\n          }\n        } catch (error) {\n          console.error('Failed to check approval', error)\n          return null\n        }\n      }\n      return null\n    },\n    [active, signer],\n  )\n\n  return { onCheckApprove: handleApprove }\n}\n\n\n\n\nexport function useApprove(owner, spender) {\n  const { active, library, chainId } = useWeb3React()\n\n  const handleApprove = useCallback(\n    async (target) => {\n      if (active && chainId) {\n        const signer = getSigner(library, owner)\n\n        const contract = getContract(signer, ERC20, spender && typeof spender === 'object' ? spender[chainId] : spender)\n\n        if (contract) {\n          return contract.approve(target, ethers.constants.MaxUint256)\n        }\n      }\n      return null\n    },\n    [active, chainId, library, owner, spender],\n  )\n\n  return { handleApprove }\n}\n","export const MintThresholdValue = {\n  days: 20,\n  ratio: 120,\n}\n\nexport const LiquidationThresholdValue = {\n  days: 10,\n  ratio: 110,\n}\n\nexport const ShortThresholdValue = {\n  days: 20,\n  ratio: 120,\n}\n","import { styled } from '@mui/material/styles'\n\nconst Title = styled('h1')`\n  font-family: 'Heebo Medium';\n  font-style: normal;\n  font-weight: 500;\n  font-size: 32px;\n  line-height: 47px;\n  margin-bottom: 14px;\n  color: #000000;\n`\n\nexport default Title\n"],"sourceRoot":""}